{
    "Title": "Application Server Security Requirements Guide",
    "Description": "This Security Requirements Guide is published as a tool to improve the security of Department of Defense (DoD) information systems. The requirements are derived from the National Institute of Standards and Technology (NIST) 800-53 and related documents. Comments or proposed revisions to this document should be sent via email to the following address: disa.stig_spt@mail.mil.",
    "Version": "3",
    "Release": "3 ",
    "BenchmarkDate": "27 Oct 2022",
    "ReleaseInfo": "Release: 3 Benchmark Date: 27 Oct 2022",
    "Source": "STIG.DOD.MIL",
    "Notice": "terms-of-use",
    "Rules": [
        {
            "VulnID": "V-204708",
            "RuleID": "SV-204708r508029_rule",
            "StigID": "SRG-APP-000001-AS-000001",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000001",
            "RuleTitle": "The application server must limit the number of concurrent sessions to an organization-defined number for all accounts and/or account types.",
            "Description": "<VulnDiscussion>Application management includes the ability to control the number of sessions that utilize an application by all accounts and/or account types. Limiting the number of allowed sessions is helpful in limiting risks related to Denial of Service attacks.\n\nApplication servers host and expose business logic and application processes.\n\nThe application server must possess the capability to limit the maximum number of concurrent sessions in a manner that affects the entire application server or on an individual application basis.\n\nAlthough there is some latitude concerning the settings themselves, the settings should follow DoD-recommended values, but the settings should be configurable to allow for future DoD direction.\n\nWhile the DoD will specify recommended values, the values can be adjusted to accommodate the operational requirement of a given system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application management includes the ability to control the number of sessions that utilize an application by all accounts and/or account types. Limiting the number of allowed sessions is helpful in limiting risks related to Denial of Service attacks.\n\nApplication servers host and expose business logic and application processes.\n\nThe application server must possess the capability to limit the maximum number of concurrent sessions in a manner that affects the entire application server or on an individual application basis.\n\nAlthough there is some latitude concerning the settings themselves, the settings should follow DoD-recommended values, but the settings should be configurable to allow for future DoD direction.\n\nWhile the DoD will specify recommended values, the values can be adjusted to accommodate the operational requirement of a given system.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server product documentation and configuration to determine if the number of concurrent sessions can be limited to the organization-defined number of sessions for all accounts and/or account types.\n\nIf a feature to limit the number of concurrent sessions is not available, is not set, or is set to unlimited, this is a finding.",
            "FixText": "Configure the application server to limit the number of concurrent sessions for all accounts and/or account types to the organization-defined number.",
            "CCI": "SV-46335,V-35070,CCI-000054"
        },
        {
            "VulnID": "V-204709",
            "RuleID": "SV-204709r508029_rule",
            "StigID": "SRG-APP-000014-AS-000009",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000014",
            "RuleTitle": "The application server must use encryption strength in accordance with the categorization of the management data during remote access management sessions.",
            "Description": "<VulnDiscussion>Remote management access is accomplished by leveraging common communication protocols and establishing a remote connection to the application server via a network for the purposes of managing the application server. If cryptography is not used, then the session data traversing the remote connection could be intercepted and compromised. \n\nTypes of management interfaces utilized by an application server include web-based HTTPS interfaces as well as command line-based management interfaces.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Remote management access is accomplished by leveraging common communication protocols and establishing a remote connection to the application server via a network for the purposes of managing the application server. If cryptography is not used, then the session data traversing the remote connection could be intercepted and compromised. \n\nTypes of management interfaces utilized by an application server include web-based HTTPS interfaces as well as command line-based management interfaces.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Check the application server configuration to ensure all management interfaces use encryption in accordance with the management data.\n\nIf the application server is not configured to encrypt remote access management sessions in accordance with the categorization of the management data, this is a finding.",
            "FixText": "Configure the application server to use encryption strength in accordance with the categorization of the management data during remote access management sessions.",
            "CCI": "SV-46376,V-35089,CCI-000068"
        },
        {
            "VulnID": "V-204710",
            "RuleID": "SV-204710r508029_rule",
            "StigID": "SRG-APP-000015-AS-000010",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000015",
            "RuleTitle": "The application server must implement cryptography mechanisms to protect the integrity of the remote access session.",
            "Description": "<VulnDiscussion>Encryption is critical for protection of remote access sessions. If encryption is not being used for integrity, malicious users may gain the ability to modify the application server configuration. The use of cryptography for ensuring integrity of remote access sessions mitigates that risk.\n\nApplication servers utilize a web management interface and scripted commands when allowing remote access. Web access requires the use of TLS and scripted access requires using ssh or some other form of approved cryptography. Application servers must have a capability to enable a secure remote admin capability.\n\nFIPS 140-2 approved TLS versions must be enabled and non-FIPS-approved SSL versions must be disabled.\n\nNIST SP 800-52 specifies the preferred configurations for government systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Encryption is critical for protection of remote access sessions. If encryption is not being used for integrity, malicious users may gain the ability to modify the application server configuration. The use of cryptography for ensuring integrity of remote access sessions mitigates that risk.\n\nApplication servers utilize a web management interface and scripted commands when allowing remote access. Web access requires the use of TLS and scripted access requires using ssh or some other form of approved cryptography. Application servers must have a capability to enable a secure remote admin capability.\n\nFIPS 140-2 approved TLS versions must be enabled and non-FIPS-approved SSL versions must be disabled.\n\nNIST SP 800-52 specifies the preferred configurations for government systems.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to ensure the application server is configured to use cryptography to protect the integrity of remote access sessions.\n\nIf the application server is not configured to implement cryptography mechanisms to protect the integrity of remote access sessions, this is a finding.",
            "FixText": "Configure the application server to implement cryptography mechanisms to protect the integrity of the remote access session.",
            "CCI": "SV-46377,V-35090,CCI-001453"
        },
        {
            "VulnID": "V-204711",
            "RuleID": "SV-204711r508029_rule",
            "StigID": "SRG-APP-000016-AS-000013",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000016",
            "RuleTitle": "The application server must ensure remote sessions for accessing security functions and security-relevant information are logged.",
            "Description": "<VulnDiscussion>Logging must be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident.\n\nRemote access by administrators requires that the admin activity be logged.\n\nApplication servers provide a web and command line-based remote management capability for managing the application server. Application servers must ensure that all actions related to administrative functionality such as application server configuration are logged.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Logging must be utilized in order to track system activity, assist in diagnosing system issues, and provide evidence needed for forensic investigations post security incident.\n\nRemote access by administrators requires that the admin activity be logged.\n\nApplication servers provide a web and command line-based remote management capability for managing the application server. Application servers must ensure that all actions related to administrative functionality such as application server configuration are logged.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server product documentation to determine if the application server logs remote administrative sessions.\n\nIf the application server does not log remote sessions for the admin user, then this is a finding.",
            "FixText": "Configure the application server to log an event for each instance when the administrator accesses the system remotely.",
            "CCI": "SV-71683,V-57411,CCI-000067"
        },
        {
            "VulnID": "V-204712",
            "RuleID": "SV-204712r508029_rule",
            "StigID": "SRG-APP-000033-AS-000024",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000033",
            "RuleTitle": "The application server must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.",
            "Description": "<VulnDiscussion>Strong access controls are critical to securing the application server. Access control policies (e.g., identity-based policies, role-based policies, attribute-based policies) and access enforcement mechanisms (e.g., access control lists, access control matrices, cryptography) must be employed by the application server to control access between users (or processes acting on behalf of users) and objects (e.g., applications, files, records, processes, application domains) in the application server.\n\nWithout stringent logical access and authorization controls, an adversary may have the ability, with very little effort, to compromise the application server and associated supporting infrastructure.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Strong access controls are critical to securing the application server. Access control policies (e.g., identity-based policies, role-based policies, attribute-based policies) and access enforcement mechanisms (e.g., access control lists, access control matrices, cryptography) must be employed by the application server to control access between users (or processes acting on behalf of users) and objects (e.g., applications, files, records, processes, application domains) in the application server.\n\nWithout stringent logical access and authorization controls, an adversary may have the ability, with very little effort, to compromise the application server and associated supporting infrastructure.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server product documentation and configuration to determine if the system enforces authorization requirements for logical access to the system in accordance with applicable policy.\n\nIf the application server is not configured to utilize access controls or follow access control policies, this is a finding.",
            "FixText": "Configure the application server to enforce access control policies for logical access to the system in accordance with applicable policy.",
            "CCI": "SV-47025,V-35738,CCI-000213"
        },
        {
            "VulnID": "V-204713",
            "RuleID": "SV-204713r508029_rule",
            "StigID": "SRG-APP-000068-AS-000035",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000068",
            "RuleTitle": "The application server management interface must display the Standard Mandatory DoD Notice and Consent Banner before granting access to the system.",
            "Description": "<VulnDiscussion>Application servers are required to display the Standard Mandatory DoD Notice and Consent Banner before granting access to the system management interface, providing privacy and security notices consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance that states that: \n\n(i) users are accessing a U.S. Government information system; \n(ii) system usage may be monitored, recorded, and subject to audit; \n(iii) unauthorized use of the system is prohibited and subject to criminal and civil penalties; and \n(iv) the use of the system indicates consent to monitoring and recording.\n\nSystem use notification messages can be implemented in the form of warning banners displayed when individuals log on to the information system. \n\nSystem use notification is intended only for information system access including an interactive logon interface with a human user, and is not required when an interactive interface does not exist. \n\nUse this banner for desktops, laptops, and other devices accommodating banners of 1300 characters. The banner shall be implemented as a click-through banner at logon (to the extent permitted by the operating system), meaning it prevents further activity on the information system unless and until the user executes a positive action to manifest agreement by clicking on a box indicating \"OK\".\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n-At any time, the USG may inspect and seize data stored on this IS.\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application servers are required to display the Standard Mandatory DoD Notice and Consent Banner before granting access to the system management interface, providing privacy and security notices consistent with applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance that states that: \n\n(i) users are accessing a U.S. Government information system; \n(ii) system usage may be monitored, recorded, and subject to audit; \n(iii) unauthorized use of the system is prohibited and subject to criminal and civil penalties; and \n(iv) the use of the system indicates consent to monitoring and recording.\n\nSystem use notification messages can be implemented in the form of warning banners displayed when individuals log on to the information system. \n\nSystem use notification is intended only for information system access including an interactive logon interface with a human user, and is not required when an interactive interface does not exist. \n\nUse this banner for desktops, laptops, and other devices accommodating banners of 1300 characters. The banner shall be implemented as a click-through banner at logon (to the extent permitted by the operating system), meaning it prevents further activity on the information system unless and until the user executes a positive action to manifest agreement by clicking on a box indicating \"OK\".\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n-At any time, the USG may inspect and seize data stored on this IS.\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server management interface configuration to verify the application server is configured to display the Standard Mandatory DoD Notice and Consent Banner before granting access.\n\nThe banner must read:\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n-At any time, the USG may inspect and seize data stored on this IS.\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"\n\nIf the application server management interface does not display the banner or displays an unapproved banner, this is a finding.",
            "FixText": "Configure the application server management interface so it displays the Standard Mandatory DoD Notice and Consent Banner prior to allowing access.\n\nThe banner must read:\n\n\"You are accessing a U.S. Government (USG) Information System (IS) that is provided for USG-authorized use only.\nBy using this IS (which includes any device attached to this IS), you consent to the following conditions:\n-The USG routinely intercepts and monitors communications on this IS for purposes including, but not limited to, penetration testing, COMSEC monitoring, network operations and defense, personnel misconduct (PM), law enforcement (LE), and counterintelligence (CI) investigations.\n-At any time, the USG may inspect and seize data stored on this IS.\n-Communications using, or data stored on, this IS are not private, are subject to routine monitoring, interception, and search, and may be disclosed or used for any USG-authorized purpose.\n-This IS includes security measures (e.g., authentication and access controls) to protect USG interests--not for your personal benefit or privacy.\n-Notwithstanding the above, using this IS does not constitute consent to PM, LE or CI investigative searching or monitoring of the content of privileged communications, or work product, related to personal representation or services by attorneys, psychotherapists, or clergy, and their assistants. Such communications and work product are private and confidential. See User Agreement for details.\"",
            "CCI": "SV-46383,V-35096,CCI-000048"
        },
        {
            "VulnID": "V-204714",
            "RuleID": "SV-204714r508029_rule",
            "StigID": "SRG-APP-000069-AS-000036",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000069",
            "RuleTitle": "The application server management interface must retain the Standard Mandatory DoD Notice and Consent Banner on the screen until users acknowledge the usage conditions and take explicit actions to log on for further access.",
            "Description": "<VulnDiscussion>To establish acceptance of system usage policy, a click-through banner at the application server management interface logon is required. The banner shall prevent further activity on the application server unless and until the user executes a positive action to manifest agreement by clicking on a box indicating \"OK\".</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "To establish acceptance of system usage policy, a click-through banner at the application server management interface logon is required. The banner shall prevent further activity on the application server unless and until the user executes a positive action to manifest agreement by clicking on a box indicating \"OK\".",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server management interface product documentation and configuration to determine that the logon banner can be displayed until the user takes action to acknowledge the agreement.\n\nIf the banner screen allows continuation to the application server without user interaction, this is a finding.",
            "FixText": "Configure the application server management interface to retain the logon banner on the screen until the user takes explicit action to logon to the server.",
            "CCI": "SV-46385,V-35098,CCI-000050"
        },
        {
            "VulnID": "V-204715",
            "RuleID": "SV-204715r508029_rule",
            "StigID": "SRG-APP-000080-AS-000045",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000080",
            "RuleTitle": "The application server must protect against an individual (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation.",
            "Description": "<VulnDiscussion>Non-repudiation of actions taken is required in order to maintain application integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNon-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document. \n\nTypical application server actions requiring non-repudiation will be related to application deployment among developers/users and administrative actions taken by admin personnel.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Non-repudiation of actions taken is required in order to maintain application integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNon-repudiation protects individuals against later claims by an author of not having authored a particular document, a sender of not having transmitted a message, a receiver of not having received a message, or a signatory of not having signed a document. \n\nTypical application server actions requiring non-repudiation will be related to application deployment among developers/users and administrative actions taken by admin personnel.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server product documentation and server configuration to determine if the system does protect against an individual's (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation.\n\nIf the application does not meet this requirement, this is a finding.",
            "FixText": "Configure the application server to protect against an individual's (or process acting on behalf of an individual) falsely denying having performed organization-defined actions to be covered by non-repudiation.",
            "CCI": "SV-46422,V-35135,CCI-000166"
        },
        {
            "VulnID": "V-204716",
            "RuleID": "SV-204716r508029_rule",
            "StigID": "SRG-APP-000086-AS-000048",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000086",
            "RuleTitle": "For application servers providing log record aggregation, the application server must compile log records from organization-defined information system components into a system-wide log trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the log trail.",
            "Description": "<VulnDiscussion>Log generation and log records can be generated from various components within the application server. The list of logged events is the set of events for which logs are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating log records (e.g., logable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked).\n\nThe events occurring must be time-correlated in order to conduct accurate forensic analysis. In addition, the correlation must meet certain tolerance criteria. For instance, DoD may define that the time stamps of different logged events must not differ by any amount greater than ten seconds. It is also acceptable for the application server to utilize an external logging tool that provides this capability.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Log generation and log records can be generated from various components within the application server. The list of logged events is the set of events for which logs are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating log records (e.g., logable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked).\n\nThe events occurring must be time-correlated in order to conduct accurate forensic analysis. In addition, the correlation must meet certain tolerance criteria. For instance, DoD may define that the time stamps of different logged events must not differ by any amount greater than ten seconds. It is also acceptable for the application server to utilize an external logging tool that provides this capability.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server log feature configuration to determine if the application server or an external logging tool in conjunction with the application server does compile log records from multiple components within the server into a system-wide log trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the log trail.\n\nIf the application server does not meet this requirement, this is a finding.",
            "FixText": "Configure the application server or an external logging tool supporting the application server to compile log records from multiple components within the server into a system-wide log trail that is time-correlated with an organization-defined level of tolerance for the relationship between time stamps of individual records in the log trail.",
            "CCI": "V-35139,SV-46426,CCI-000174"
        },
        {
            "VulnID": "V-204717",
            "RuleID": "SV-204717r508029_rule",
            "StigID": "SRG-APP-000089-AS-000050",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000089",
            "RuleTitle": "The application server must generate log records for access and authentication events.",
            "Description": "<VulnDiscussion>Log records can be generated from various components within the application server.  From an application server perspective, certain specific application server functionalities may be logged as well.  The application server must allow the definition of what events are to be logged.  As conditions change, the number and types of events to be logged may change, and the application server must be able to facilitate these changes.\n\nThe minimum list of logged events should be those pertaining to system startup and shutdown, system access, and system authentication events.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Log records can be generated from various components within the application server.  From an application server perspective, certain specific application server functionalities may be logged as well.  The application server must allow the definition of what events are to be logged.  As conditions change, the number and types of events to be logged may change, and the application server must be able to facilitate these changes.\n\nThe minimum list of logged events should be those pertaining to system startup and shutdown, system access, and system authentication events.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and the deployed system configuration to determine if, at a minimum, system startup and shutdown, system access, and system authentication events are logged.\n\nIf the logs do not include the minimum logable events, this is a finding.",
            "FixText": "Configure the application server to generate log records for system startup and shutdown, system access, and system authentication events.",
            "CCI": "V-35141,SV-46428,CCI-000169"
        },
        {
            "VulnID": "V-204718",
            "RuleID": "SV-204718r508029_rule",
            "StigID": "SRG-APP-000090-AS-000051",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000090",
            "RuleTitle": "The application server must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which logable events are to be logged.",
            "Description": "<VulnDiscussion>Log records can be generated from various components within the application server, (e.g., httpd, beans, etc.) From an application perspective, certain specific application functionalities may be logged, as well.\n\nThe list of logged events is the set of events for which logs are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating log records (e.g., logable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked).\n\n\nApplication servers utilize role-based access controls in order to specify the individuals who are allowed to configure application component logable events. The application server must be configured to select which personnel are assigned the role of selecting which logable events are to be logged.\n\nThe personnel or roles that can select logable events are only the ISSM (or individuals or roles appointed by the ISSM).</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Log records can be generated from various components within the application server, (e.g., httpd, beans, etc.) From an application perspective, certain specific application functionalities may be logged, as well.\n\nThe list of logged events is the set of events for which logs are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating log records (e.g., logable events, time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked).\n\n\nApplication servers utilize role-based access controls in order to specify the individuals who are allowed to configure application component logable events. The application server must be configured to select which personnel are assigned the role of selecting which logable events are to be logged.\n\nThe personnel or roles that can select logable events are only the ISSM (or individuals or roles appointed by the ISSM).",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server product documentation and configuration to determine if the system only allows the ISSM (or individuals or roles appointed by the ISSM) to change logable events.\n\nIf the system is not configured to perform this function, this is a finding.",
            "FixText": "Configure the application server to only allow the ISSM (or individuals or roles appointed by the ISSM) to change logable events.",
            "CCI": "V-35142,SV-46429,CCI-000171"
        },
        {
            "VulnID": "V-204719",
            "RuleID": "SV-204719r508029_rule",
            "StigID": "SRG-APP-000091-AS-000052",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000091",
            "RuleTitle": "The application server must generate log records when successful/unsuccessful attempts to access subject privileges occur.",
            "Description": "<VulnDiscussion>Accessing a subject's privileges can be used to elevate a lower-privileged subject's privileges temporarily in order to cause harm to the application server or to gain privileges to operate temporarily for a designed purpose.  When these actions take place, the event needs to be logged.\n\nApplication servers either provide a local user store, or they integrate with enterprise user stores like LDAP.  When the application server provides the user store and enforces authentication, the application server must generate a log record when modification of privileges is successfully or unsuccessfully performed.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Accessing a subject's privileges can be used to elevate a lower-privileged subject's privileges temporarily in order to cause harm to the application server or to gain privileges to operate temporarily for a designed purpose.  When these actions take place, the event needs to be logged.\n\nApplication servers either provide a local user store, or they integrate with enterprise user stores like LDAP.  When the application server provides the user store and enforces authentication, the application server must generate a log record when modification of privileges is successfully or unsuccessfully performed.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and the system configuration to determine if the application server generates log records when successful/unsuccessful attempts are made to access privileges.\n\nIf log records are not generated, this is a finding.",
            "FixText": "Configure the application server to generate log records when privileges are successfully/unsuccessfully accessed.",
            "CCI": "V-35143,SV-46430,CCI-000172"
        },
        {
            "VulnID": "V-204720",
            "RuleID": "SV-204720r508029_rule",
            "StigID": "SRG-APP-000092-AS-000053",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000092",
            "RuleTitle": "The application server must initiate session logging upon startup.",
            "Description": "<VulnDiscussion>Session logging activities are developed, integrated, and used in consultation with legal counsel in accordance with applicable federal laws, Executive Orders, directives, policies, or regulations.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Session logging activities are developed, integrated, and used in consultation with legal counsel in accordance with applicable federal laws, Executive Orders, directives, policies, or regulations.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server product documentation and server configuration to determine if the application server initiates session logging on application server startup.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to initiate session logging on application server startup.",
            "CCI": "SV-46435,V-35148,CCI-001464"
        },
        {
            "VulnID": "V-204721",
            "RuleID": "SV-204721r508029_rule",
            "StigID": "SRG-APP-000095-AS-000056",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000095",
            "RuleTitle": "The application server must produce log records containing information to establish what type of events occurred.",
            "Description": "<VulnDiscussion>Information system logging capability is critical for accurate forensic analysis.  Without being able to establish what type of event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible. \n\nLog record content that may be necessary to satisfy the requirement of this control includes time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.\n\nApplication servers must log all relevant log data that pertains to the application server.  Examples of relevant data include, but are not limited to, Java Virtual Machine (JVM) activity, HTTPD/Web server activity, and application server-related system process activity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information system logging capability is critical for accurate forensic analysis.  Without being able to establish what type of event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible. \n\nLog record content that may be necessary to satisfy the requirement of this control includes time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.\n\nApplication servers must log all relevant log data that pertains to the application server.  Examples of relevant data include, but are not limited to, Java Virtual Machine (JVM) activity, HTTPD/Web server activity, and application server-related system process activity.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server log configuration to determine if the application server produces log records showing what type of event occurred.\n\nIf the log data does not show the type of event, this is a finding.",
            "FixText": "Configure the application server to include the event type in the log data.",
            "CCI": "V-35159,SV-46446,CCI-000130"
        },
        {
            "VulnID": "V-204722",
            "RuleID": "SV-204722r508029_rule",
            "StigID": "SRG-APP-000096-AS-000059",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000096",
            "RuleTitle": "The application server must produce log records containing sufficient information to establish when (date and time) the events occurred.",
            "Description": "<VulnDiscussion>Application server logging capability is critical for accurate forensic analysis.  Without sufficient and accurate information, a correct replay of the events cannot be determined.\n\nAscertaining the correct order of the events that occurred is important during forensic analysis.  Events that appear harmless by themselves might be flagged as a potential threat when properly viewed in sequence.  By also establishing the event date and time, an event can be properly viewed with an enterprise tool to fully see a possible threat in its entirety.\n\nWithout sufficient information establishing when the log event occurred, investigation into the cause of event is severely hindered.  Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, file names involved, access control, or flow control rules invoked.\n\nIn addition to logging event information, application servers must also log the corresponding dates and times of these events. Examples of event data include, but are not limited to, Java Virtual Machine (JVM) activity, HTTPD activity, and application server-related system process activity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application server logging capability is critical for accurate forensic analysis.  Without sufficient and accurate information, a correct replay of the events cannot be determined.\n\nAscertaining the correct order of the events that occurred is important during forensic analysis.  Events that appear harmless by themselves might be flagged as a potential threat when properly viewed in sequence.  By also establishing the event date and time, an event can be properly viewed with an enterprise tool to fully see a possible threat in its entirety.\n\nWithout sufficient information establishing when the log event occurred, investigation into the cause of event is severely hindered.  Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, file names involved, access control, or flow control rules invoked.\n\nIn addition to logging event information, application servers must also log the corresponding dates and times of these events. Examples of event data include, but are not limited to, Java Virtual Machine (JVM) activity, HTTPD activity, and application server-related system process activity.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the logs on the application server to determine if the date and time are included in the log event data.\n\nIf the date and time are not included, this is a finding.",
            "FixText": "Configure the application server logging system to log date and time with the event.",
            "CCI": "SV-46452,V-35165,CCI-000131"
        },
        {
            "VulnID": "V-204723",
            "RuleID": "SV-204723r508029_rule",
            "StigID": "SRG-APP-000097-AS-000060",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000097",
            "RuleTitle": "The application server must produce log records containing sufficient information to establish where the events occurred.",
            "Description": "<VulnDiscussion>Application server logging capability is critical for accurate forensic analysis. Without sufficient and accurate information, a correct replay of the events cannot be determined.\n\nAscertaining the correct location or process within the application server where the events occurred is important during forensic analysis. To determine where an event occurred, the log data must contain information that identifies the source and destination of the events such as application components, modules, filenames, host names, servlets, containers, API\u2019s, and other functionality.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application server logging capability is critical for accurate forensic analysis. Without sufficient and accurate information, a correct replay of the events cannot be determined.\n\nAscertaining the correct location or process within the application server where the events occurred is important during forensic analysis. To determine where an event occurred, the log data must contain information that identifies the source and destination of the events such as application components, modules, filenames, host names, servlets, containers, API\u2019s, and other functionality.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the configuration settings on the application server to determine if the application server is configured to log information that establishes where within the application server the event occurred. \n\nThe data in the log file should identify the event, the component, module, filename, host name, servlets, containers, API\u2019s, or other functionality within the application server, as well as, any source and destination information that indicates where an event occurred.\n\nIf the application server is not configured to log where within the application server the event took place, this is a finding.",
            "FixText": "Configure the application server logging system to log where the event took place.",
            "CCI": "SV-46454,V-35167,CCI-000132"
        },
        {
            "VulnID": "V-204724",
            "RuleID": "SV-204724r508029_rule",
            "StigID": "SRG-APP-000098-AS-000061",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000098",
            "RuleTitle": "The application server must produce log records containing sufficient information to establish the sources of the events.",
            "Description": "<VulnDiscussion>Application server logging capability is critical for accurate forensic analysis.  Without sufficient and accurate information, a correct replay of the events cannot be determined.\n\nAscertaining the correct source, e.g., source IP, of the events is important during forensic analysis.  Correctly determining the source will add information to the overall reconstruction of the logable event.  By determining the source of the event correctly, analysis of the enterprise can be undertaken to determine if the event compromised other assets within the enterprise.\n\nWithout sufficient information establishing the source of the logged event, investigation into the cause of event is severely hindered.  Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, file names involved, access control, or flow control rules invoked.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application server logging capability is critical for accurate forensic analysis.  Without sufficient and accurate information, a correct replay of the events cannot be determined.\n\nAscertaining the correct source, e.g., source IP, of the events is important during forensic analysis.  Correctly determining the source will add information to the overall reconstruction of the logable event.  By determining the source of the event correctly, analysis of the enterprise can be undertaken to determine if the event compromised other assets within the enterprise.\n\nWithout sufficient information establishing the source of the logged event, investigation into the cause of event is severely hindered.  Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, file names involved, access control, or flow control rules invoked.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and deployment configuration to determine if the application server is configured to generate sufficient information to resolve the source, e.g., source IP, of the log event.\n\nRequest a user access the application server and generate logable events, and then review the logs to determine if the source of the event can be established.\n\nIf the source of the event cannot be determined, this is a finding.",
            "FixText": "Configure the application server to generate the source of each logable event.",
            "CCI": "V-35170,SV-46457,CCI-000133"
        },
        {
            "VulnID": "V-204725",
            "RuleID": "SV-204725r508029_rule",
            "StigID": "SRG-APP-000099-AS-000062",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000099",
            "RuleTitle": "The application server must produce log records that contain sufficient information to establish the outcome of events.",
            "Description": "<VulnDiscussion>Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, filenames involved, access control or flow control rules invoked.\n\nSuccess and failure indicators ascertain the outcome of a particular application server event or function. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.  Event outcome may also include event-specific results (e.g., the security state of the information system after the event occurred).</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, filenames involved, access control or flow control rules invoked.\n\nSuccess and failure indicators ascertain the outcome of a particular application server event or function. As such, they also provide a means to measure the impact of an event and help authorized personnel to determine the appropriate response.  Event outcome may also include event-specific results (e.g., the security state of the information system after the event occurred).",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and the log files on the application server to determine if the logs contain information that establishes the outcome of event data.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server logging system to log the event outcome.",
            "CCI": "V-35176,SV-46463,CCI-000134"
        },
        {
            "VulnID": "V-204726",
            "RuleID": "SV-204726r508029_rule",
            "StigID": "SRG-APP-000100-AS-000063",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000100",
            "RuleTitle": "The application server must generate log records containing information that establishes the identity of any individual or process associated with the event.",
            "Description": "<VulnDiscussion>Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes: time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked. \n\nApplication servers have differing levels of logging capabilities that can be specified by setting a verbosity level. The application server must, at a minimum, be capable of establishing the identity of any user or process that is associated with any particular event.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes: time stamps, source and destination addresses, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked. \n\nApplication servers have differing levels of logging capabilities that can be specified by setting a verbosity level. The application server must, at a minimum, be capable of establishing the identity of any user or process that is associated with any particular event.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and the log files on the application server to determine if the logs contain information that establishes the identity of the user or process associated with log event data.\n\nIf the application server does not produce logs that establish the identity of the user or process associated with log event data, this is a finding.",
            "FixText": "Configure the application server logging system to log the identity of the user or process related to the events.",
            "CCI": "V-35182,SV-46469,CCI-001487"
        },
        {
            "VulnID": "V-204727",
            "RuleID": "SV-204727r508029_rule",
            "StigID": "SRG-APP-000101-AS-000072",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000101",
            "RuleTitle": "The application server must generate log records containing the full-text recording of privileged commands or the individual identities of group account users.",
            "Description": "<VulnDiscussion>Privileged commands are commands that change the configuration or data of the application server.  Since this type of command changes the application server configuration and could possibly change the security posture of the application server, these commands need to be logged to show the full-text of the command executed.  Without the full-text, reconstruction of harmful events or forensic analysis is not possible.\n\nOrganizations can consider limiting the additional log information to only that information explicitly needed for specific log requirements.  At a minimum, the organization must log either full-text recording of privileged commands or the individual identities of group users, or both.  The organization must maintain log trails in sufficient detail to reconstruct events to determine the cause and impact of compromise.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Privileged commands are commands that change the configuration or data of the application server.  Since this type of command changes the application server configuration and could possibly change the security posture of the application server, these commands need to be logged to show the full-text of the command executed.  Without the full-text, reconstruction of harmful events or forensic analysis is not possible.\n\nOrganizations can consider limiting the additional log information to only that information explicitly needed for specific log requirements.  At a minimum, the organization must log either full-text recording of privileged commands or the individual identities of group users, or both.  The organization must maintain log trails in sufficient detail to reconstruct events to determine the cause and impact of compromise.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and deployment configuration to determine if the application server is configured to generate full-text recording of privileged commands or the individual identities of group users at a minimum.\n\nHave a user execute a privileged command and review the log data to validate that the full-text or identity of the individual is being logged.\n\nIf the application server is not meeting this requirement, this is a finding.",
            "FixText": "Configure the application server to generate the full-text recording of privileged commands or the individual identities of group users, or both.",
            "CCI": "V-57417,SV-71689,CCI-000135"
        },
        {
            "VulnID": "V-204728",
            "RuleID": "SV-204728r508029_rule",
            "StigID": "SRG-APP-000108-AS-000067",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000108",
            "RuleTitle": "The application server must alert the SA and ISSO, at a minimum, in the event of a log processing failure.",
            "Description": "<VulnDiscussion>Logs are essential to monitor the health of the system, investigate changes that occurred to the system, or investigate a security incident.  When log processing fails, the events during the failure can be lost.  To minimize the timeframe of the log failure, an alert needs to be sent to the SA and ISSO at a minimum.\n\nLog processing failures include, but are not limited to, failures in the application server log capturing mechanisms or log storage capacity being reached or exceeded. In some instances, it is preferred to send alarms to individuals rather than to an entire group. Application servers must be able to trigger an alarm and send an alert to, at a minimum, the SA and ISSO in the event there is an application server log processing failure.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Logs are essential to monitor the health of the system, investigate changes that occurred to the system, or investigate a security incident.  When log processing fails, the events during the failure can be lost.  To minimize the timeframe of the log failure, an alert needs to be sent to the SA and ISSO at a minimum.\n\nLog processing failures include, but are not limited to, failures in the application server log capturing mechanisms or log storage capacity being reached or exceeded. In some instances, it is preferred to send alarms to individuals rather than to an entire group. Application servers must be able to trigger an alarm and send an alert to, at a minimum, the SA and ISSO in the event there is an application server log processing failure.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server log configuration.  Verify the application server sends alerts to the SA and ISSO in the event of a log processing failure.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server log feature to alert the SA and ISSO in the event of a log processing failure.",
            "CCI": "V-35186,SV-46473,CCI-000139"
        },
        {
            "VulnID": "V-204729",
            "RuleID": "SV-204729r508029_rule",
            "StigID": "SRG-APP-000109-AS-000068",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000109",
            "RuleTitle": "The application server must shut down by default upon log failure (unless availability is an overriding concern).",
            "Description": "<VulnDiscussion>It is critical that, when a system is at risk of failing to process logs, it detects and takes action to mitigate the failure. Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  During a failure, the application server must be configured to shut down unless the application server is part of a high availability system.\n\nWhen availability is an overriding concern, other approved actions in response to a log failure are as follows: \n\n(i) If the failure was caused by the lack of log record storage capacity, the application must continue generating log records if possible (automatically restarting the log service if necessary), overwriting the oldest log records in a first-in-first-out manner.\n\n(ii) If log records are sent to a centralized collection server and communication with this server is lost or the server fails, the application must queue log records locally until communication is restored or until the log records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local log data with the collection server.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "It is critical that, when a system is at risk of failing to process logs, it detects and takes action to mitigate the failure. Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  During a failure, the application server must be configured to shut down unless the application server is part of a high availability system.\n\nWhen availability is an overriding concern, other approved actions in response to a log failure are as follows: \n\n(i) If the failure was caused by the lack of log record storage capacity, the application must continue generating log records if possible (automatically restarting the log service if necessary), overwriting the oldest log records in a first-in-first-out manner.\n\n(ii) If log records are sent to a centralized collection server and communication with this server is lost or the server fails, the application must queue log records locally until communication is restored or until the log records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local log data with the collection server.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "If the application server is a high availability system, this finding is NA.\n\nReview the application server configuration settings to determine if the application server is configured to shut down on a log failure.\n\nIf the application server is not configured to shut down on a log failure, this is a finding.",
            "FixText": "If the application server is a high availability system, this finding is NA.\n\nConfigure the application server to shut down on a log failure.",
            "CCI": "SV-46477,V-35190,CCI-000140"
        },
        {
            "VulnID": "V-204730",
            "RuleID": "SV-204730r508029_rule",
            "StigID": "SRG-APP-000109-AS-000070",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000109",
            "RuleTitle": "The application server must be configured to fail over to another system in the event of log subsystem failure.",
            "Description": "<VulnDiscussion>This requirement is dependent upon system MAC and availability.  If the system MAC and availability do not specify redundancy requirements, this requirement is NA.\n\nIt is critical that, when a system is at risk of failing to process logs as required, it detects and takes action to mitigate the failure.\n \nApplication servers must be capable of failing over to another system which can handle application and logging functions upon detection of an application log processing failure. This will allow continual operation of the application and logging functions while minimizing the loss of operation for the users and loss of log data.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "This requirement is dependent upon system MAC and availability.  If the system MAC and availability do not specify redundancy requirements, this requirement is NA.\n\nIt is critical that, when a system is at risk of failing to process logs as required, it detects and takes action to mitigate the failure.\n \nApplication servers must be capable of failing over to another system which can handle application and logging functions upon detection of an application log processing failure. This will allow continual operation of the application and logging functions while minimizing the loss of operation for the users and loss of log data.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "If the system MAC level and availability do not require redundancy, this requirement is NA.\n\nReview the system's accreditation documentation to determine system MAC and confidentiality requirements.  Review application server configuration settings to determine if the application server is configured to fail over operation to another system when the log subsystem fails to operate.\n\nIf the system MAC level requires redundancy and the application server is not configured to fail over to another system which can handle application and log functions when a log subsystem failure occurs, this is a finding.",
            "FixText": "If the system MAC level and availability do not require redundancy, this requirement is NA.\n\nConfigure the application server to fail over to another system which can handle log functions when the logging subsystem fails.",
            "CCI": "SV-46478,V-35191,CCI-000140"
        },
        {
            "VulnID": "V-204731",
            "RuleID": "SV-204731r508029_rule",
            "StigID": "SRG-APP-000116-AS-000076",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000116",
            "RuleTitle": "The application server must use internal system clocks to generate time stamps for log records.",
            "Description": "<VulnDiscussion>Without the use of an approved and synchronized time source configured on the systems, events cannot be accurately correlated and analyzed to determine what is transpiring within the application server.\n\nIf an event has been triggered on the network, and the application server is not configured with the correct time, the event may be seen as insignificant, when in reality the events are related and may have a larger impact across the network. Synchronization of system clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. Determining the correct time a particular event occurred on a system, via time stamps, is critical when conducting forensic analysis and investigating system events. \n\nApplication servers must utilize the internal system clock when generating time stamps and log records.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Without the use of an approved and synchronized time source configured on the systems, events cannot be accurately correlated and analyzed to determine what is transpiring within the application server.\n\nIf an event has been triggered on the network, and the application server is not configured with the correct time, the event may be seen as insignificant, when in reality the events are related and may have a larger impact across the network. Synchronization of system clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. Determining the correct time a particular event occurred on a system, via time stamps, is critical when conducting forensic analysis and investigating system events. \n\nApplication servers must utilize the internal system clock when generating time stamps and log records.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration files to determine if the internal system clock is used for time stamps. If this is not feasible, an alternative workaround is to take an action that generates an entry in the logs and then immediately query the operating system for the current time. A reasonable match between the two times will suffice as evidence that the system is using the internal clock for timestamps.\n\nIf the application server does not use the internal system clock to generate time stamps, this is a finding.",
            "FixText": "Configure the application server to use internal system clocks to generate time stamps for log records.",
            "CCI": "SV-46490,V-35203,CCI-000159"
        },
        {
            "VulnID": "V-204732",
            "RuleID": "SV-204732r508029_rule",
            "StigID": "SRG-APP-000118-AS-000078",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000118",
            "RuleTitle": "The application server must protect log information from any type of unauthorized read access.",
            "Description": "<VulnDiscussion>If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to log records provides information an attacker could potentially use to his or her advantage.\n\nApplication servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow unfettered access to those records. Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.\n\nLog information includes all information (e.g., log records, log settings, transaction logs, and log reports) needed to successfully log information system activity. Application servers must protect log information from unauthorized read access.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to log records provides information an attacker could potentially use to his or her advantage.\n\nApplication servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow unfettered access to those records. Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.\n\nLog information includes all information (e.g., log records, log settings, transaction logs, and log reports) needed to successfully log information system activity. Application servers must protect log information from unauthorized read access.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the configuration settings to determine if the application server log features protect log information from unauthorized access.\n\nReview file system settings to verify the application server sets secure file permissions on log files.\n\nIf the application server does not protect log information from unauthorized read access, this is a finding.",
            "FixText": "Configure the application server to protect log information from unauthorized read access.",
            "CCI": "SV-46492,V-35205,CCI-000162"
        },
        {
            "VulnID": "V-204733",
            "RuleID": "SV-204733r508029_rule",
            "StigID": "SRG-APP-000119-AS-000079",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000119",
            "RuleTitle": "The application server must protect log information from unauthorized modification.",
            "Description": "<VulnDiscussion>If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to log records provides information an attacker could potentially use to his or her advantage.\n\nApplication servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow unfettered access to those records.  Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.\n\nLog information includes all information (e.g., log records, log settings, transaction logs and log reports) needed to successfully log information system activity.  Application servers must protect log information from unauthorized modification.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to log records provides information an attacker could potentially use to his or her advantage.\n\nApplication servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow unfettered access to those records.  Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.\n\nLog information includes all information (e.g., log records, log settings, transaction logs and log reports) needed to successfully log information system activity.  Application servers must protect log information from unauthorized modification.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the configuration settings to determine if the application server log features protect log information from unauthorized modification.\n\nReview file system settings to verify the application server sets secure file permissions on log files to prevent unauthorized modification.\n\nIf the application server does not protect log information from unauthorized modification, this is a finding.",
            "FixText": "Configure the application server to protect log information from unauthorized modification.",
            "CCI": "V-35772,SV-47059,CCI-000163"
        },
        {
            "VulnID": "V-204734",
            "RuleID": "SV-204734r508029_rule",
            "StigID": "SRG-APP-000120-AS-000080",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000120",
            "RuleTitle": "The application server must protect log information from unauthorized deletion.",
            "Description": "<VulnDiscussion>If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. \n\nApplication servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow for unfettered access to those records. Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.\n\nLog information includes all information (e.g., log records, log settings, transaction logs, and log reports) needed to successfully log information system activity. Application servers must protect log information from unauthorized deletion.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "If log data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. \n\nApplication servers contain admin interfaces that allow reading and manipulation of log records. Therefore, these interfaces should not allow for unfettered access to those records. Application servers also write log data to log files which are stored on the OS, so appropriate file permissions must also be used to restrict access.\n\nLog information includes all information (e.g., log records, log settings, transaction logs, and log reports) needed to successfully log information system activity. Application servers must protect log information from unauthorized deletion.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the configuration settings to determine if the application server log features protect log information from unauthorized deletion.\n\nReview file system settings to verify the application server sets secure file permissions on log files to prevent unauthorized deletion.\n\nIf the application server does not protect log information from unauthorized deletion, this is a finding.",
            "FixText": "Configure the application server to protect log information from unauthorized deletion.",
            "CCI": "SV-46499,V-35212,CCI-000164"
        },
        {
            "VulnID": "V-204735",
            "RuleID": "SV-204735r508029_rule",
            "StigID": "SRG-APP-000121-AS-000081",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000121",
            "RuleTitle": "The application server must protect log tools from unauthorized access.",
            "Description": "<VulnDiscussion>Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. \n\nIt is, therefore, imperative that access to log tools be controlled and protected from unauthorized access. \n\nApplication servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected as well.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. \n\nIt is, therefore, imperative that access to log tools be controlled and protected from unauthorized access. \n\nApplication servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected as well.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and server configuration to determine if the application server protects log tools from unauthorized access.\n\nRequest a system administrator attempt to access log tools while logged into the server in a role that does not have the requisite privileges.\n\nIf the application server does not protect log tools from unauthorized access, this is a finding.",
            "FixText": "Configure the application server or OS to protect log tools from unauthorized access.",
            "CCI": "SV-46500,V-35213,CCI-001493"
        },
        {
            "VulnID": "V-204736",
            "RuleID": "SV-204736r508029_rule",
            "StigID": "SRG-APP-000122-AS-000082",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000122",
            "RuleTitle": "The application server must protect log tools from unauthorized modification.",
            "Description": "<VulnDiscussion>Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. \n\nIt is, therefore, imperative that access to log tools be controlled and protected from unauthorized modification. If an attacker were to modify log tools, he could also manipulate logs to hide evidence of malicious activity. \n\nApplication servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected as well.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. \n\nIt is, therefore, imperative that access to log tools be controlled and protected from unauthorized modification. If an attacker were to modify log tools, he could also manipulate logs to hide evidence of malicious activity. \n\nApplication servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected as well.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and server configuration to determine if the application server protects log tools from unauthorized modification. Request a system administrator attempt to modify log tools while logged into the server in a role that does not have the requisite privileges.\n\nLocate binary copies of log tool executables that are located on the file system and attempt to modify using unprivileged credentials.\n\nIf the application server does not protect log tools from unauthorized modification, this is a finding.",
            "FixText": "Configure the application server or the OS to protect log tools from unauthorized modification.",
            "CCI": "SV-46501,V-35214,CCI-001494"
        },
        {
            "VulnID": "V-204737",
            "RuleID": "SV-204737r508029_rule",
            "StigID": "SRG-APP-000123-AS-000083",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000123",
            "RuleTitle": "The application server must protect log tools from unauthorized deletion.",
            "Description": "<VulnDiscussion>Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. \n\nIt is, therefore, imperative that access to log tools be controlled and protected from unauthorized modification. If an attacker were to delete log tools, the application server administrator would have no way of managing or viewing the logs. \n\nApplication servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar, class or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected from unauthorized deletion as well.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Protecting log data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. \n\nIt is, therefore, imperative that access to log tools be controlled and protected from unauthorized modification. If an attacker were to delete log tools, the application server administrator would have no way of managing or viewing the logs. \n\nApplication servers provide a web- and/or a command line-based management functionality for managing the application server log capabilities. In addition, subsets of log tool components may be stored on the file system as jar, class or xml configuration files. The application server must ensure that in addition to protecting any web-based log tools, any file system-based tools are protected from unauthorized deletion as well.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and server configuration to determine if the application server protects log tools from unauthorized deletion.\n\nLocate binary copies of log tool executables that are located on the file system and attempt to delete using unprivileged credentials.\n\nIf the application server does not protect log tools from unauthorized deletion, this is a finding.",
            "FixText": "Configure the application server or the OS to protect log tools from unauthorized deletion.",
            "CCI": "V-35215,SV-46502,CCI-001495"
        },
        {
            "VulnID": "V-204738",
            "RuleID": "SV-204738r508029_rule",
            "StigID": "SRG-APP-000125-AS-000084",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000125",
            "RuleTitle": "The application server must back up log records at least every seven days onto a different system or system component than the system or component being logged.",
            "Description": "<VulnDiscussion>Protection of log data includes assuring log data is not accidentally lost or deleted. Backing up log records to a different system or onto separate media from the system the application server is actually running on helps to assure that in the event of a catastrophic system failure, the log records will be retained.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Protection of log data includes assuring log data is not accidentally lost or deleted. Backing up log records to a different system or onto separate media from the system the application server is actually running on helps to assure that in the event of a catastrophic system failure, the log records will be retained.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to determine if the application server backs up log records every seven days onto a different system or media from the system being logged.\n\nIf the application server does not back up log records every seven days onto a different system or media from the system being logged, this is a finding.",
            "FixText": "Configure the application server to back up log records every seven days onto a different system or media from the system being logged.",
            "CCI": "V-35216,SV-46503,CCI-001348"
        },
        {
            "VulnID": "V-204739",
            "RuleID": "SV-204739r508029_rule",
            "StigID": "SRG-APP-000126-AS-000085",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000126",
            "RuleTitle": "The application server must use cryptographic mechanisms to protect the integrity of log information.",
            "Description": "<VulnDiscussion>Protecting the integrity of log records helps to ensure log files are not tampered with. Cryptographic mechanisms are the industry-established standard used to protect the integrity of log data. An example of cryptographic mechanisms is the computation and application of a cryptographic hash and using asymmetric cryptography with digital signatures.  Application Servers often write log data to files on the file system.  These files typically roll over on a periodic basis. Once the logs are rolled over, hashing and signing the logs assures the logs are not tampered with and helps to assure log integrity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Protecting the integrity of log records helps to ensure log files are not tampered with. Cryptographic mechanisms are the industry-established standard used to protect the integrity of log data. An example of cryptographic mechanisms is the computation and application of a cryptographic hash and using asymmetric cryptography with digital signatures.  Application Servers often write log data to files on the file system.  These files typically roll over on a periodic basis. Once the logs are rolled over, hashing and signing the logs assures the logs are not tampered with and helps to assure log integrity.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server can be configured to protect the integrity of log data using cryptographic hashes and digital signatures. Configure the application server to hash and sign log data. This is typically done the moment when log files cease to be written to and are rolled over for storage or offloading. \n\nAlternatively, if the application server is not able to hash and sign log data, the task can be delegated by configuring the application server or underlying OS to send logs to a centralized log management system or SIEM that can meet the requirement. \n\nIf the application server is not configured to hash and sign logs, or is not configured to utilize the aforementioned OS and centralized log management resources to meet the requirement, this is a finding.",
            "FixText": "Configure the application server to hash and sign logs using cryptographic means. \n\nAlternatively, configure the application server or OS to send logs to a centralized log server that meets the hashing and signing requirement.",
            "CCI": "V-35217,SV-46504,CCI-001350"
        },
        {
            "VulnID": "V-204740",
            "RuleID": "SV-204740r850830_rule",
            "StigID": "SRG-APP-000131-AS-000002",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000131",
            "RuleTitle": "The application server must prevent the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.",
            "Description": "<VulnDiscussion>Changes to any software components can have significant effects on the overall security of the application. Verifying software components have been digitally signed using a certificate that is recognized and approved by the organization ensures the software has not been tampered with and that it has been provided by a trusted vendor. \n\nAccordingly, patches, service packs, or application components must be signed with a certificate recognized and approved by the organization. \n\nVerifying the authenticity of the software prior to installation validates the integrity of the patch or upgrade received from a vendor. This ensures the software has not been tampered with and that it has been provided by a trusted vendor. Self-signed certificates are disallowed by this requirement. The application should not have to verify the software again. This requirement does not mandate DoD certificates for this purpose; however, the certificate used to verify the software must be from an approved CA.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Changes to any software components can have significant effects on the overall security of the application. Verifying software components have been digitally signed using a certificate that is recognized and approved by the organization ensures the software has not been tampered with and that it has been provided by a trusted vendor. \n\nAccordingly, patches, service packs, or application components must be signed with a certificate recognized and approved by the organization. \n\nVerifying the authenticity of the software prior to installation validates the integrity of the patch or upgrade received from a vendor. This ensures the software has not been tampered with and that it has been provided by a trusted vendor. Self-signed certificates are disallowed by this requirement. The application should not have to verify the software again. This requirement does not mandate DoD certificates for this purpose; however, the certificate used to verify the software must be from an approved CA.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review system documentation to determine if the application server prevents the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.\n\nIf the application server does not meet this requirement, this is a finding.",
            "FixText": "Configure the application server to prevent the installation of patches, service packs, or application components without verification the software component has been digitally signed using a certificate that is recognized and approved by the organization.",
            "CCI": "V-57495,SV-71771,CCI-001749"
        },
        {
            "VulnID": "V-204741",
            "RuleID": "SV-204741r508029_rule",
            "StigID": "SRG-APP-000133-AS-000092",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000133",
            "RuleTitle": "The application server must limit privileges to change the software resident within software libraries.",
            "Description": "<VulnDiscussion>Application servers have the ability to specify that the hosted applications utilize shared libraries. The application server must have a capability to divide roles based upon duties wherein one project user (such as a developer) cannot modify the shared library code of another project user. The application server must also be able to specify that non-privileged users cannot modify any shared library code at all.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application servers have the ability to specify that the hosted applications utilize shared libraries. The application server must have a capability to divide roles based upon duties wherein one project user (such as a developer) cannot modify the shared library code of another project user. The application server must also be able to specify that non-privileged users cannot modify any shared library code at all.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Check the application server documentation and configuration to determine if the application server provides role-based access that limits the capability to change shared software libraries.\n\nValidate file permission settings to ensure library files are secured in relation to OS access.\n\nIf the application server does not meet this requirement, this is a finding.",
            "FixText": "Configure the application server to limit privileges to change the software resident within software libraries through the use of defined user roles and file permissions.",
            "CCI": "SV-46511,V-35224,CCI-001499"
        },
        {
            "VulnID": "V-204742",
            "RuleID": "SV-204742r810851_rule",
            "StigID": "SRG-APP-000133-AS-000093",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000133",
            "RuleTitle": "The application server must be capable of reverting to the last known good configuration in the event of failed installations and upgrades.",
            "Description": "<VulnDiscussion>Any changes to the components of the application server can have significant effects on the overall security of the system.\n\nIn order to ensure a prompt response to failed application installations and application server upgrades, the application server must provide an automated rollback capability that allows the system to be restored to a previous known good configuration state prior to the application installation or application server upgrade.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Any changes to the components of the application server can have significant effects on the overall security of the system.\n\nIn order to ensure a prompt response to failed application installations and application server upgrades, the application server must provide an automated rollback capability that allows the system to be restored to a previous known good configuration state prior to the application installation or application server upgrade.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Check the application server documentation and configuration to determine if the application server provides an automated rollback capability to a known good configuration in the event of a failed installation and upgrade.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to automatically rollback to a known good configuration in the event of failed application installations and application server upgrades.",
            "CCI": "V-57497,SV-71773,CCI-001190"
        },
        {
            "VulnID": "V-204743",
            "RuleID": "SV-204743r508029_rule",
            "StigID": "SRG-APP-000141-AS-000095",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000141",
            "RuleTitle": "The application server must adhere to the principles of least functionality by providing only essential capabilities.",
            "Description": "<VulnDiscussion>Application servers provide a myriad of differing processes, features and functionalities. Some of these processes may be deemed to be unnecessary or too unsecure to run on a production DoD system. Application servers must provide the capability to disable or deactivate functionality and services that are deemed to be non-essential to the server mission or can adversely impact server performance, for example, disabling dynamic JSP reloading on production application servers as a best practice.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application servers provide a myriad of differing processes, features and functionalities. Some of these processes may be deemed to be unnecessary or too unsecure to run on a production DoD system. Application servers must provide the capability to disable or deactivate functionality and services that are deemed to be non-essential to the server mission or can adversely impact server performance, for example, disabling dynamic JSP reloading on production application servers as a best practice.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server can disable non-essential features and capabilities.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to use only essential features and capabilities.",
            "CCI": "SV-46521,V-35234,CCI-000381"
        },
        {
            "VulnID": "V-204744",
            "RuleID": "SV-204744r508029_rule",
            "StigID": "SRG-APP-000142-AS-000014",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000142",
            "RuleTitle": "The application server must prohibit or restrict the use of nonsecure ports, protocols, modules, and/or services as defined in the PPSM CAL and vulnerability assessments.",
            "Description": "<VulnDiscussion>Some networking protocols may not meet organizational security requirements to protect data and components.\n\nApplication servers natively host a number of various features, such as management interfaces, httpd servers and message queues. These features all run on TCPIP ports. This creates the potential that the vendor may choose to utilize port numbers or network services that have been deemed unusable by the organization. The application server must have the capability to both reconfigure and disable the assigned ports without adversely impacting application server operation capabilities. For a list of approved ports and protocols, reference the DoD ports and protocols web site at https://public.cyber.mil/connect/ppsm/</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Some networking protocols may not meet organizational security requirements to protect data and components.\n\nApplication servers natively host a number of various features, such as management interfaces, httpd servers and message queues. These features all run on TCPIP ports. This creates the potential that the vendor may choose to utilize port numbers or network services that have been deemed unusable by the organization. The application server must have the capability to both reconfigure and disable the assigned ports without adversely impacting application server operation capabilities. For a list of approved ports and protocols, reference the DoD ports and protocols web site at https://public.cyber.mil/connect/ppsm/",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and deployment configuration to determine which ports and protocols are enabled.\n\nVerify that the ports and protocols being used are not prohibited and are necessary for the operation of the application server and the hosted applications.\n\nIf any of the ports or protocols is prohibited or not necessary for the application server operation, this is a finding.",
            "FixText": "Configure the application server to disable any ports or protocols that are prohibited by the PPSM CAL and vulnerability assessments.",
            "CCI": "V-57501,SV-71777,CCI-000382"
        },
        {
            "VulnID": "V-204745",
            "RuleID": "SV-204745r508029_rule",
            "StigID": "SRG-APP-000148-AS-000101",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000148",
            "RuleTitle": "The application server must use an enterprise user management system to uniquely identify and authenticate users (or processes acting on behalf of organizational users).",
            "Description": "<VulnDiscussion>To assure accountability and prevent unauthorized access, application server users must be uniquely identified and authenticated.  This is typically accomplished via the use of a user store which is either local (OS-based) or centralized (LDAP) in nature.\n\nTo ensure support to the enterprise, the authentication must utilize an enterprise solution.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "To assure accountability and prevent unauthorized access, application server users must be uniquely identified and authenticated.  This is typically accomplished via the use of a user store which is either local (OS-based) or centralized (LDAP) in nature.\n\nTo ensure support to the enterprise, the authentication must utilize an enterprise solution.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration settings to determine if the application server is using an enterprise solution to authenticate organizational users and processes running on the users' behalf.\n\nIf an enterprise solution is not being used, this is a finding.",
            "FixText": "Configure the application server to use an enterprise user management system to uniquely identify and authenticate users and processes acting on behalf of organizational users.",
            "CCI": "V-35299,SV-46586,CCI-000764"
        },
        {
            "VulnID": "V-204746",
            "RuleID": "SV-204746r864571_rule",
            "StigID": "SRG-APP-000149-AS-000102",
            "Severity": "high",
            "Cat": "CAT I",
            "Classification": "",
            "GroupTitle": "SRG-APP-000149",
            "RuleTitle": "The application server must use multifactor authentication for network access to privileged accounts.",
            "Description": "<VulnDiscussion>Multifactor authentication creates a layered defense and makes it more difficult for an unauthorized person to access the application server.  If one factor is compromised or broken, the attacker still has at least one more barrier to breach before successfully breaking into the target.  Unlike a simple username/password scenario where the attacker could gain access by knowing both the username and password without the user knowing his account was compromised, multifactor authentication adds the requirement that the attacker must have something from the user, such as a token, or to biometrically be the user.\n\nMultifactor authentication is defined as: using two or more factors to achieve authentication. \n\nFactors include: \n(i) something a user knows (e.g., password/PIN); \n(ii) something a user has (e.g., cryptographic identification device, token); or \n(iii) something a user is (e.g., biometric). A CAC or PKI Hardware Token meets this definition.\n\nA privileged account is defined as an information system account with authorizations of a privileged user.  These accounts would be capable of accessing the web management interface.\n\nWhen accessing the application server via a network connection, administrative access to the application server must be PKI Hardware Token enabled.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Multifactor authentication creates a layered defense and makes it more difficult for an unauthorized person to access the application server.  If one factor is compromised or broken, the attacker still has at least one more barrier to breach before successfully breaking into the target.  Unlike a simple username/password scenario where the attacker could gain access by knowing both the username and password without the user knowing his account was compromised, multifactor authentication adds the requirement that the attacker must have something from the user, such as a token, or to biometrically be the user.\n\nMultifactor authentication is defined as: using two or more factors to achieve authentication. \n\nFactors include: \n(i) something a user knows (e.g., password/PIN); \n(ii) something a user has (e.g., cryptographic identification device, token); or \n(iii) something a user is (e.g., biometric). A CAC or PKI Hardware Token meets this definition.\n\nA privileged account is defined as an information system account with authorizations of a privileged user.  These accounts would be capable of accessing the web management interface.\n\nWhen accessing the application server via a network connection, administrative access to the application server must be PKI Hardware Token enabled.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to ensure the system is authenticating via multifactor authentication for privileged users.\n\nIf all aspects of application server web management interfaces are not authenticating privileged users via multifactor authentication methods, this is a finding.",
            "FixText": "Configure the application server to authenticate privileged users via multifactor authentication for network access to the management interface.",
            "CCI": "V-35300,SV-46587,CCI-000765"
        },
        {
            "VulnID": "V-204747",
            "RuleID": "SV-204747r864572_rule",
            "StigID": "SRG-APP-000151-AS-000103",
            "Severity": "high",
            "Cat": "CAT I",
            "Classification": "",
            "GroupTitle": "SRG-APP-000151",
            "RuleTitle": "The application server must use multifactor authentication for local access to privileged accounts.",
            "Description": "<VulnDiscussion>Multifactor authentication creates a layered defense and makes it more difficult for an unauthorized person to access the application server.  If one factor is compromised or broken, the attacker still has at least one more barrier to breach before successfully breaking into the target.  Unlike a simple username/password scenario where the attacker could gain access by knowing both the username and password without the user knowing his account was compromised, multifactor authentication adds the requirement that the attacker must have something from the user, such as a token, or to biometrically be the user.\n\nMultifactor authentication is defined as: using two or more factors to achieve authentication. \n\nFactors include: \n(i) something a user knows (e.g., password/PIN); \n(ii) something a user has (e.g., cryptographic identification device, token); or \n(iii) something a user is (e.g., biometric). A CAC or PKI Hardware Token meets this definition.\n\nA privileged account is defined as an information system account with authorizations of a privileged user.  These accounts would be capable of accessing the command line management interface.\n\nWhen accessing the application server via a local connection, administrative access to the application server must be PKI hardware token enabled.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Multifactor authentication creates a layered defense and makes it more difficult for an unauthorized person to access the application server.  If one factor is compromised or broken, the attacker still has at least one more barrier to breach before successfully breaking into the target.  Unlike a simple username/password scenario where the attacker could gain access by knowing both the username and password without the user knowing his account was compromised, multifactor authentication adds the requirement that the attacker must have something from the user, such as a token, or to biometrically be the user.\n\nMultifactor authentication is defined as: using two or more factors to achieve authentication. \n\nFactors include: \n(i) something a user knows (e.g., password/PIN); \n(ii) something a user has (e.g., cryptographic identification device, token); or \n(iii) something a user is (e.g., biometric). A CAC or PKI Hardware Token meets this definition.\n\nA privileged account is defined as an information system account with authorizations of a privileged user.  These accounts would be capable of accessing the command line management interface.\n\nWhen accessing the application server via a local connection, administrative access to the application server must be PKI hardware token enabled.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to ensure the system is authenticating via multifactor authentication for privileged users.\n\nIf all aspects of application server command line management interfaces are not authenticating privileged users via multifactor authentication methods, this is a finding.",
            "FixText": "Configure the application server to authenticate privileged users via multifactor authentication for local access to the management interface.",
            "CCI": "V-35301,SV-46588,CCI-000767"
        },
        {
            "VulnID": "V-204748",
            "RuleID": "SV-204748r508029_rule",
            "StigID": "SRG-APP-000153-AS-000104",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000153",
            "RuleTitle": "The application server must authenticate users individually prior to using a group authenticator.",
            "Description": "<VulnDiscussion>To assure individual accountability and prevent unauthorized access, application server users (and any processes acting on behalf of application server users) must be individually identified and authenticated. \n\nA group authenticator is a generic account used by multiple individuals. Use of a group authenticator alone does not uniquely identify individual users. \n\nApplication servers must ensure that individual users are authenticated prior to authenticating via role or group authentication. This is to ensure that there is non-repudiation for actions taken.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "To assure individual accountability and prevent unauthorized access, application server users (and any processes acting on behalf of application server users) must be individually identified and authenticated. \n\nA group authenticator is a generic account used by multiple individuals. Use of a group authenticator alone does not uniquely identify individual users. \n\nApplication servers must ensure that individual users are authenticated prior to authenticating via role or group authentication. This is to ensure that there is non-repudiation for actions taken.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server individually authenticates users prior to authenticating via a role or group.\n\nReview application server logs to verify user accesses requiring authentication can be traced back to an individual account.\n\nIf the application server does not authenticate users on an individual basis, this is a finding.",
            "FixText": "Configure the application server to authenticate users individually prior to allowing any group-based authentication.",
            "CCI": "V-35302,SV-46589,CCI-000770"
        },
        {
            "VulnID": "V-204749",
            "RuleID": "SV-204749r850831_rule",
            "StigID": "SRG-APP-000156-AS-000106",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000156",
            "RuleTitle": "The application server must provide security extensions to extend the SOAP protocol and provide secure authentication when accessing sensitive data.",
            "Description": "<VulnDiscussion>Application servers may provide a web services capability that could be leveraged to allow remote access to sensitive application data. A web service, which is a repeatable process used to make data available to remote clients, should not be confused with a web server. \n\nMany web services utilize SOAP, which in turn utilizes XML and HTTP as a transport. Natively, SOAP does not provide security protections. As such, the application server must provide security extensions to enhance SOAP capabilities to ensure that secure authentication mechanisms are employed to protect sensitive data. The WS_Security suite is a widely used and acceptable SOAP security extension.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application servers may provide a web services capability that could be leveraged to allow remote access to sensitive application data. A web service, which is a repeatable process used to make data available to remote clients, should not be confused with a web server. \n\nMany web services utilize SOAP, which in turn utilizes XML and HTTP as a transport. Natively, SOAP does not provide security protections. As such, the application server must provide security extensions to enhance SOAP capabilities to ensure that secure authentication mechanisms are employed to protect sensitive data. The WS_Security suite is a widely used and acceptable SOAP security extension.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation to ensure the application server provides extensions to the SOAP protocol that provide secure authentication. These protocols include, but are not limited to, WS_Security suite.  Review policy and data owner protection requirements in order to identify sensitive data.\n\nIf secure authentication protocols are not utilized to protect data identified by data owner as requiring protection, this is a finding.",
            "FixText": "Configure the application server to utilize secure authentication when SOAP web services are used to access sensitive data.",
            "CCI": "V-35304,SV-46591,CCI-001941"
        },
        {
            "VulnID": "V-204750",
            "RuleID": "SV-204750r508029_rule",
            "StigID": "SRG-APP-000163-AS-000111",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000163",
            "RuleTitle": "The application server must disable identifiers (individuals, groups, roles, and devices) after 35 days of inactivity.",
            "Description": "<VulnDiscussion>Inactive identifiers pose a risk to systems and applications. Attackers that are able to exploit an inactive identifier can potentially obtain and maintain undetected access to the application. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained. \n\nApplications need to track periods of inactivity and disable application identifiers after 35 days of inactivity. \n\nManagement of user identifiers is not applicable to shared information system accounts (e.g., guest and anonymous accounts). It is commonly the case that a user account is the name of an information system account associated with an individual.\n\nTo avoid having to build complex user management capabilities directly into their application, wise developers leverage the underlying OS or other user account management infrastructure (AD, LDAP) that is already in place within the organization and meets organizational user account management requirements.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Inactive identifiers pose a risk to systems and applications. Attackers that are able to exploit an inactive identifier can potentially obtain and maintain undetected access to the application. Owners of inactive accounts will not notice if unauthorized access to their user account has been obtained. \n\nApplications need to track periods of inactivity and disable application identifiers after 35 days of inactivity. \n\nManagement of user identifiers is not applicable to shared information system accounts (e.g., guest and anonymous accounts). It is commonly the case that a user account is the name of an information system account associated with an individual.\n\nTo avoid having to build complex user management capabilities directly into their application, wise developers leverage the underlying OS or other user account management infrastructure (AD, LDAP) that is already in place within the organization and meets organizational user account management requirements.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to ensure the application server disables identifiers (individuals, groups, roles, and devices) after 35 days of inactivity.\n\nIf the application server is not configured to disable identifiers (individuals, groups, roles, and devices) after 35 days of inactivity, this is a finding.",
            "FixText": "Configure the application server to disable identifiers (individuals, groups, roles, and devices) after 35 days of inactivity.",
            "CCI": "SV-46596,V-35309,CCI-000795"
        },
        {
            "VulnID": "V-204751",
            "RuleID": "SV-204751r508029_rule",
            "StigID": "SRG-APP-000171-AS-000119",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000171",
            "RuleTitle": "The application server must store only encrypted representations of passwords.",
            "Description": "<VulnDiscussion>Applications must enforce password encryption when storing passwords. Passwords need to be protected at all times and encryption is the standard method for protecting passwords. If passwords are not encrypted, they can be plainly read and easily compromised. \n\nApplication servers provide either a local user store or they integrate with enterprise user stores like LDAP. When the application server is responsible for creating or storing passwords, the application server must enforce the storage of encrypted representations of passwords.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Applications must enforce password encryption when storing passwords. Passwords need to be protected at all times and encryption is the standard method for protecting passwords. If passwords are not encrypted, they can be plainly read and easily compromised. \n\nApplication servers provide either a local user store or they integrate with enterprise user stores like LDAP. When the application server is responsible for creating or storing passwords, the application server must enforce the storage of encrypted representations of passwords.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server enforces the requirement to only store encrypted representations of passwords.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to only store encrypted representations of passwords.",
            "CCI": "SV-46604,V-35317,CCI-000196"
        },
        {
            "VulnID": "V-204752",
            "RuleID": "SV-204752r508029_rule",
            "StigID": "SRG-APP-000172-AS-000120",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000172",
            "RuleTitle": "The application server must transmit only encrypted representations of passwords.",
            "Description": "<VulnDiscussion>Passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission.  If passwords are not encrypted, they can be plainly read (i.e., clear text) and easily compromised.\n\nApplication servers have the capability to utilize either certificates (tokens) or user IDs and passwords in order to authenticate. When the application server transmits or receives passwords, the passwords must be encrypted.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission.  If passwords are not encrypted, they can be plainly read (i.e., clear text) and easily compromised.\n\nApplication servers have the capability to utilize either certificates (tokens) or user IDs and passwords in order to authenticate. When the application server transmits or receives passwords, the passwords must be encrypted.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server enforces the requirement to encrypt passwords when they are transmitted.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to transmit only encrypted representations of passwords.",
            "CCI": "SV-46605,V-35318,CCI-000197"
        },
        {
            "VulnID": "V-204753",
            "RuleID": "SV-204753r508029_rule",
            "StigID": "SRG-APP-000172-AS-000121",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000172",
            "RuleTitle": "The application server must utilize encryption when using LDAP for authentication.",
            "Description": "<VulnDiscussion>Passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission. \n\nApplication servers have the capability to utilize LDAP directories for authentication. If LDAP connections are not protected during transmission, sensitive authentication credentials can be stolen. When the application server utilizes LDAP, the LDAP traffic must be encrypted.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission. \n\nApplication servers have the capability to utilize LDAP directories for authentication. If LDAP connections are not protected during transmission, sensitive authentication credentials can be stolen. When the application server utilizes LDAP, the LDAP traffic must be encrypted.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server enforces the requirement to encrypt LDAP traffic.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to encrypt LDAP traffic.",
            "CCI": "V-35319,SV-46606,CCI-000197"
        },
        {
            "VulnID": "V-204754",
            "RuleID": "SV-204754r508029_rule",
            "StigID": "SRG-APP-000175-AS-000124",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000175",
            "RuleTitle": "The application server must perform RFC 5280-compliant certification path validation.",
            "Description": "<VulnDiscussion>A certificate's certification path is the path from the end entity certificate to a trusted root certification authority (CA).  Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate.  Certification path validation includes checks such as certificate issuer trust, time validity and revocation status for each certificate in the certification path.  Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "A certificate's certification path is the path from the end entity certificate to a trusted root certification authority (CA).  Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate.  Certification path validation includes checks such as certificate issuer trust, time validity and revocation status for each certificate in the certification path.  Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and deployed configuration to determine whether the application server provides PKI functionality that validates certification paths in accordance with RFC 5280.\n\nIf PKI is not being used, this is NA.\n\nIf the application server is using PKI, but it does not perform this requirement, this is a finding.",
            "FixText": "Configure the application server to validate certificates in accordance with RFC 5280.",
            "CCI": "SV-46609,V-35322,CCI-000185"
        },
        {
            "VulnID": "V-204755",
            "RuleID": "SV-204755r508029_rule",
            "StigID": "SRG-APP-000176-AS-000125",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000176",
            "RuleTitle": "Only authenticated system administrators or the designated PKI Sponsor for the application server must have access to the web servers private key.",
            "Description": "<VulnDiscussion>The cornerstone of the PKI is the private key used to encrypt or digitally sign information. \n\nIf the private key is stolen, this will lead to the compromise of the authentication and non-repudiation gained through PKI because the attacker can use the private key to digitally sign documents and can pretend to be the authorized user. \n\nBoth the holders of a digital certificate and the issuing authority must protect the computers, storage devices, or whatever they use to keep the private keys. Java-based application servers utilize the Java keystore, which provides storage for cryptographic keys and certificates. The keystore is usually maintained in a file stored on the file system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The cornerstone of the PKI is the private key used to encrypt or digitally sign information. \n\nIf the private key is stolen, this will lead to the compromise of the authentication and non-repudiation gained through PKI because the attacker can use the private key to digitally sign documents and can pretend to be the authorized user. \n\nBoth the holders of a digital certificate and the issuing authority must protect the computers, storage devices, or whatever they use to keep the private keys. Java-based application servers utilize the Java keystore, which provides storage for cryptographic keys and certificates. The keystore is usually maintained in a file stored on the file system.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server configuration and documentation to ensure the application server enforces authorized access to the corresponding private key.\n\nIf the application server is not configured to enforce authorized access to the corresponding private key, this is a finding.",
            "FixText": "Configure the application server to enforce authorized access to the corresponding private key.",
            "CCI": "SV-46611,V-35324,CCI-000186"
        },
        {
            "VulnID": "V-204756",
            "RuleID": "SV-204756r508029_rule",
            "StigID": "SRG-APP-000177-AS-000126",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000177",
            "RuleTitle": "The application server must map the authenticated identity to the individual user or group account for PKI-based authentication.",
            "Description": "<VulnDiscussion>The cornerstone of PKI is the private key used to encrypt or digitally sign information. The key by itself is a cryptographic value that does not contain specific user information, but the key can be mapped to a user.  Without mapping the certificate used to authenticate to the user account, the ability to determine the identity of the individual user or group will not be available for forensic analysis.\n\nApplication servers must provide the capability to utilize and meet requirements of the DoD Enterprise PKI infrastructure for application authentication.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The cornerstone of PKI is the private key used to encrypt or digitally sign information. The key by itself is a cryptographic value that does not contain specific user information, but the key can be mapped to a user.  Without mapping the certificate used to authenticate to the user account, the ability to determine the identity of the individual user or group will not be available for forensic analysis.\n\nApplication servers must provide the capability to utilize and meet requirements of the DoD Enterprise PKI infrastructure for application authentication.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation to ensure the application server provides a PKI integration capability that meets DoD PKI infrastructure requirements.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to utilize the DoD Enterprise PKI infrastructure.",
            "CCI": "SV-46612,V-35325,CCI-000187"
        },
        {
            "VulnID": "V-204757",
            "RuleID": "SV-204757r508029_rule",
            "StigID": "SRG-APP-000178-AS-000127",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000178",
            "RuleTitle": "The application server must obscure feedback of authentication information during the authentication process to protect the information from possible exploitation/use by unauthorized individuals.",
            "Description": "<VulnDiscussion>To prevent the compromise of authentication information during the authentication process, the application server authentication screens must obfuscate input so an unauthorized user cannot view a password, PIN, or any other authenticator value as it is being typed.\n\nThis can occur when a user is authenticating to the application server through the web management interface or command line interface. The application server must obfuscate all passwords, PINs, or other authenticator information when typed. User ID is not required to be obfuscated.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "To prevent the compromise of authentication information during the authentication process, the application server authentication screens must obfuscate input so an unauthorized user cannot view a password, PIN, or any other authenticator value as it is being typed.\n\nThis can occur when a user is authenticating to the application server through the web management interface or command line interface. The application server must obfuscate all passwords, PINs, or other authenticator information when typed. User ID is not required to be obfuscated.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if any interfaces which are provided for authentication purposes display the user's password when it is typed into the data entry field.\n\nIf authentication information is not obfuscated when entered, this is a finding.",
            "FixText": "Configure the application server to obscure feedback of authentication information during the authentication process to protect the information from possible exploitation/use by unauthorized individuals.",
            "CCI": "V-35328,SV-46615,CCI-000206"
        },
        {
            "VulnID": "V-204758",
            "RuleID": "SV-204758r864567_rule",
            "StigID": "SRG-APP-000179-AS-000129",
            "Severity": "high",
            "Cat": "CAT I",
            "Classification": "",
            "GroupTitle": "SRG-APP-000179",
            "RuleTitle": "The application server must utilize FIPS 140-2 approved encryption modules when authenticating users and processes.",
            "Description": "<VulnDiscussion>Encryption is only as good as the encryption modules utilized.  Unapproved cryptographic module algorithms cannot be verified and cannot be relied upon to provide confidentiality or integrity, and DoD data may be compromised due to weak algorithms.  The use of TLS provides confidentiality of data in transit between the application server and client.  \n\nTLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Encryption is only as good as the encryption modules utilized.  Unapproved cryptographic module algorithms cannot be verified and cannot be relied upon to provide confidentiality or integrity, and DoD data may be compromised due to weak algorithms.  The use of TLS provides confidentiality of data in transit between the application server and client.  \n\nTLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and deployed configuration to determine which version of TLS is being used.\n\nIf the application server is not using TLS when authenticating users or non-FIPS-approved SSL versions are enabled, this is a finding.",
            "FixText": "Configure the application server to use a FIPS-2 approved TLS version to authenticate users and to disable all non-FIPS-approved SSL versions.",
            "CCI": "SV-46616,V-35329,CCI-000803"
        },
        {
            "VulnID": "V-204759",
            "RuleID": "SV-204759r850832_rule",
            "StigID": "SRG-APP-000181-AS-000255",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000181",
            "RuleTitle": "The application server must provide a log reduction capability that supports on-demand reporting requirements.",
            "Description": "<VulnDiscussion>The ability to generate on-demand reports, including after the log data has been subjected to log reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nLog reduction is a process that manipulates collected log information and organizes such information in a summary format that is more meaningful to analysts. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as needed) reports.\n\nInstead of the application server providing the log reduction function; it is also accepted practice to configure the application server to send its logs to a centralized log system that can be used to provide the log reduction with reporting capability. Security Incident Event Management (SIEM) systems are an example of such a solution.\n\nTo fully understand and investigate an incident within the components of the application server, the application server, must be configured to provide log reduction and on-demand reporting or be configured to send its logs to a centralized log system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The ability to generate on-demand reports, including after the log data has been subjected to log reduction, greatly facilitates the organization's ability to generate incident reports as needed to better handle larger-scale or more complex security incidents.\n\nLog reduction is a process that manipulates collected log information and organizes such information in a summary format that is more meaningful to analysts. The report generation capability provided by the application must support on-demand (i.e., customizable, ad-hoc, and as needed) reports.\n\nInstead of the application server providing the log reduction function; it is also accepted practice to configure the application server to send its logs to a centralized log system that can be used to provide the log reduction with reporting capability. Security Incident Event Management (SIEM) systems are an example of such a solution.\n\nTo fully understand and investigate an incident within the components of the application server, the application server, must be configured to provide log reduction and on-demand reporting or be configured to send its logs to a centralized log system.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server product documentation and server configuration to determine if the application server is configured to provide log reduction with on-demand reporting.\n\nIf the application server is not configured to provide log reduction with on-demand reporting, or is not configured to send its logs to a centralized log system, this is a finding.",
            "FixText": "Configure the application server to provide and utilize log reduction with on-demand reporting or configure the application server to send its logs to a centralized log log system that provides log reduction and on-demand reporting functions.",
            "CCI": "V-57527,SV-71803,CCI-001876"
        },
        {
            "VulnID": "V-204760",
            "RuleID": "SV-204760r508029_rule",
            "StigID": "SRG-APP-000206-AS-000145",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000206",
            "RuleTitle": "The application server must identify prohibited mobile code.",
            "Description": "<VulnDiscussion>Mobile code is defined as software modules obtained from remote systems, transferred across a network, and then downloaded and executed on a local system without explicit installation or execution by the recipient.\n\nMobile code technologies include: Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations.\n\nApplication servers must meet policy requirements regarding the deployment and/or use of mobile code. This includes digitally signing applets in order to provide a means for the client to establish application authenticity and prohibit unauthorized code from being used.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Mobile code is defined as software modules obtained from remote systems, transferred across a network, and then downloaded and executed on a local system without explicit installation or execution by the recipient.\n\nMobile code technologies include: Java, JavaScript, ActiveX, PDF, Postscript, Shockwave movies, Flash animations, and VBScript. Usage restrictions and implementation guidance apply to both the selection and use of mobile code installed on organizational servers and mobile code downloaded and executed on individual workstations.\n\nApplication servers must meet policy requirements regarding the deployment and/or use of mobile code. This includes digitally signing applets in order to provide a means for the client to establish application authenticity and prohibit unauthorized code from being used.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to determine if the application server is configured to identify prohibited mobile code.\n\nIf the application server is not configured to identify prohibited mobile code, this is a finding.",
            "FixText": "Configure the application server to identify prohibited mobile code.",
            "CCI": "V-57547,SV-71823,CCI-001166"
        },
        {
            "VulnID": "V-204761",
            "RuleID": "SV-204761r508029_rule",
            "StigID": "SRG-APP-000211-AS-000146",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000211",
            "RuleTitle": "The application server must separate hosted application functionality from application server management functionality.",
            "Description": "<VulnDiscussion>The application server consists of the management interface and hosted applications.  By separating the management interface from hosted applications, the user must authenticate as a privileged user to the management interface before being presented with management functionality.  This prevents non-privileged users from having visibility to functions not available to the user.  By limiting visibility, a compromised non-privileged account does not offer information to the attacker to functionality and information needed to further the attack on the application server.\n\nApplication server management functionality includes functions necessary to administer the application server and requires privileged access via one of the accounts assigned to a management role.  The hosted application and hosted application functionality consists of the assets needed for the application to function, such as the business logic, databases, user authentication, etc.\n\nThe separation of application server administration functionality from hosted application functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, network addresses, network ports, or combinations of these methods, as appropriate.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The application server consists of the management interface and hosted applications.  By separating the management interface from hosted applications, the user must authenticate as a privileged user to the management interface before being presented with management functionality.  This prevents non-privileged users from having visibility to functions not available to the user.  By limiting visibility, a compromised non-privileged account does not offer information to the attacker to functionality and information needed to further the attack on the application server.\n\nApplication server management functionality includes functions necessary to administer the application server and requires privileged access via one of the accounts assigned to a management role.  The hosted application and hosted application functionality consists of the assets needed for the application to function, such as the business logic, databases, user authentication, etc.\n\nThe separation of application server administration functionality from hosted application functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, network addresses, network ports, or combinations of these methods, as appropriate.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to verify that the application server separates admin functionality from hosted application functionality.\n\nIf the application server does not separate application server admin functionality from hosted application functionality, this is a finding.",
            "FixText": "Configure the application server so that admin management functionality and hosted applications are separated.",
            "CCI": "V-35376,SV-46663,CCI-001082"
        },
        {
            "VulnID": "V-204762",
            "RuleID": "SV-204762r508029_rule",
            "StigID": "SRG-APP-000219-AS-000147",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000219",
            "RuleTitle": "The application server must be configured to mutually authenticate connecting proxies, application servers or gateways.",
            "Description": "<VulnDiscussion>Application architecture may sometimes require a configuration where an application server is placed behind a web proxy, an application gateway or communicates directly with another application server. In those instances, the application server hosting the service/application is considered the server. The application server, proxy or application gateway consuming the hosted service is considered a client. Authentication is accomplished via the use of certificates and protocols such as TLS mutual authentication. Authentication must be performed when the proxy is exposed to an untrusted network or when data protection requirements specified in the system security plan mandate the need to establish the identity of the connecting application server, proxy or application gateway.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application architecture may sometimes require a configuration where an application server is placed behind a web proxy, an application gateway or communicates directly with another application server. In those instances, the application server hosting the service/application is considered the server. The application server, proxy or application gateway consuming the hosted service is considered a client. Authentication is accomplished via the use of certificates and protocols such as TLS mutual authentication. Authentication must be performed when the proxy is exposed to an untrusted network or when data protection requirements specified in the system security plan mandate the need to establish the identity of the connecting application server, proxy or application gateway.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation, system security plan and application data protection requirements. \n\nIf the connected web proxy is exposed to an untrusted network or if data protection requirements specified in the system security plan mandate the need to establish the identity of the connecting application server, proxy or application gateway and the application server is not configured to mutually authenticate the application server, proxy server or gateway, this is a finding.",
            "FixText": "Configure the application server to mutually authenticate proxy servers, other application servers and application gateways as specified.",
            "CCI": "V-35381,SV-46668,CCI-001184"
        },
        {
            "VulnID": "V-204763",
            "RuleID": "SV-204763r508029_rule",
            "StigID": "SRG-APP-000220-AS-000148",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000220",
            "RuleTitle": "The application server must invalidate session identifiers upon user logout or other session termination.",
            "Description": "<VulnDiscussion>If communications sessions remain open for extended periods of time even when unused, there is the potential for an adversary to hijack the session and use it to gain access to the device or networks to which it is attached. Terminating sessions after a logout event or after a certain period of inactivity is a method for mitigating the risk of this vulnerability. When a user management session becomes idle, or when a user logs out of the management interface, the application server must terminate the session.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "If communications sessions remain open for extended periods of time even when unused, there is the potential for an adversary to hijack the session and use it to gain access to the device or networks to which it is attached. Terminating sessions after a logout event or after a certain period of inactivity is a method for mitigating the risk of this vulnerability. When a user management session becomes idle, or when a user logs out of the management interface, the application server must terminate the session.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration and organizational policy to determine if the system is configured to terminate administrator sessions upon administrator logout or any other organization- or policy-defined session termination events, such as idle time limit exceeded.\n\nIf the configuration is not set to terminate administrator sessions per defined events, this is a finding.",
            "FixText": "Configure the application server to terminate administrative sessions upon logout or any other organization- or policy-defined session termination events.",
            "CCI": "V-35415,SV-46702,CCI-001185"
        },
        {
            "VulnID": "V-204764",
            "RuleID": "SV-204764r508029_rule",
            "StigID": "SRG-APP-000223-AS-000150",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000223",
            "RuleTitle": "The application server must generate a unique session identifier for each session.",
            "Description": "<VulnDiscussion>Unique session IDs are the opposite of sequentially generated session IDs, which can be easily guessed by an attacker. Unique session identifiers help to reduce predictability of session identifiers. Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.\n\nApplication servers must generate a unique session identifier for each application session so as to prevent session hijacking.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Unique session IDs are the opposite of sequentially generated session IDs, which can be easily guessed by an attacker. Unique session identifiers help to reduce predictability of session identifiers. Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.\n\nApplication servers must generate a unique session identifier for each application session so as to prevent session hijacking.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server session management configuration settings in either the application server management console, application server initialization or application server configuration files to determine if the application server is configured to generate a unique session identifier for each session.\n\nIf the application server is  not configured to generate a unique session identifier for each session, this is a finding.",
            "FixText": "Configure the application server to generate a unique session identifier for each session.",
            "CCI": "V-57549,SV-71825,CCI-001664"
        },
        {
            "VulnID": "V-204765",
            "RuleID": "SV-204765r508029_rule",
            "StigID": "SRG-APP-000223-AS-000151",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000223",
            "RuleTitle": "The application server must recognize only system-generated session identifiers.",
            "Description": "<VulnDiscussion>This requirement focuses on communications protection at the application session, versus network packet level. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted.\n\nUnique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker. Unique session identifiers help to reduce predictability of said identifiers.\n\nUnique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "This requirement focuses on communications protection at the application session, versus network packet level. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted.\n\nUnique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker. Unique session identifiers help to reduce predictability of said identifiers.\n\nUnique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to determine if the application server recognizes only system-generated session identifiers.\n\nIf the application server does not recognize only system-generated session identifiers, this is a finding.",
            "FixText": "Design the application server to recognize only system-generated session identifiers.",
            "CCI": "V-35421,SV-46708,CCI-001664"
        },
        {
            "VulnID": "V-204766",
            "RuleID": "SV-204766r864568_rule",
            "StigID": "SRG-APP-000224-AS-000152",
            "Severity": "high",
            "Cat": "CAT I",
            "Classification": "",
            "GroupTitle": "SRG-APP-000224",
            "RuleTitle": "The application server must generate a unique session identifier using a FIPS 140-2 approved random number generator.",
            "Description": "<VulnDiscussion>The application server will use session IDs to communicate between modules or applications within the application server and between the application server and users.  The session ID allows the application to track the communications along with credentials that may have been used to authenticate users or modules.\n\nUnique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker.  Unique session identifiers help to reduce predictability of said identifiers.\n\nUnique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session.  If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The application server will use session IDs to communicate between modules or applications within the application server and between the application server and users.  The session ID allows the application to track the communications along with credentials that may have been used to authenticate users or modules.\n\nUnique session IDs are the opposite of sequentially generated session IDs which can be easily guessed by an attacker.  Unique session identifiers help to reduce predictability of said identifiers.\n\nUnique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session.  If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration and documentation to determine if the application server uses a FIPS 140-2 approved random number generator to create unique session identifiers.\n\nHave a user log onto the application server to determine if the session IDs generated are random and unique.\n\nIf the application server does not generate unique session identifiers and does not use a FIPS 140-2 random number generator to create the randomness of the session ID, this is a finding.",
            "FixText": "Configure the application server to generate unique session identifiers and to use a FIPS 140-2 random number generator to generate the randomness of the session identifiers.",
            "CCI": "SV-46709,V-35422,CCI-001188"
        },
        {
            "VulnID": "V-204767",
            "RuleID": "SV-204767r508029_rule",
            "StigID": "SRG-APP-000225-AS-000153",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000225",
            "RuleTitle": "The application server must be configured to perform complete application deployments.",
            "Description": "<VulnDiscussion>Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system.\n\nWhen an application is deployed to the application server, if the deployment process does not complete properly and without errors, there is the potential that some application files may not be deployed or may be corrupted and an application error may occur during runtime.\n\nThe application server must be able to perform complete application deployments. A partial deployment can leave the server in an inconsistent state. Application servers may provide a transaction rollback function to address this issue.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Failure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system.\n\nWhen an application is deployed to the application server, if the deployment process does not complete properly and without errors, there is the potential that some application files may not be deployed or may be corrupted and an application error may occur during runtime.\n\nThe application server must be able to perform complete application deployments. A partial deployment can leave the server in an inconsistent state. Application servers may provide a transaction rollback function to address this issue.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration and documentation to ensure the system is configured to perform complete application deployments.\n\nIf the application server is not configured to ensure complete application deployments or provides no rollback functionality, this is a finding.",
            "FixText": "Configure the application server to detect errors that occur during application deployment and to prevent deployment if errors are encountered.",
            "CCI": "SV-46710,V-35423,CCI-001190"
        },
        {
            "VulnID": "V-204768",
            "RuleID": "SV-204768r508029_rule",
            "StigID": "SRG-APP-000225-AS-000154",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000225",
            "RuleTitle": "The application server must provide a clustering capability.",
            "Description": "<VulnDiscussion>This requirement is dependent upon system MAC and confidentiality. If the system MAC and confidentiality levels do not specify redundancy requirements, this requirement is NA.\n\nFailure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. When application failure is encountered, preserving application state facilitates application restart and return to the operational mode of the organization with less disruption of mission/business processes.\n\nClustering of multiple application servers is a common approach to providing fail-safe application availability when system MAC and confidentiality levels require redundancy.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "This requirement is dependent upon system MAC and confidentiality. If the system MAC and confidentiality levels do not specify redundancy requirements, this requirement is NA.\n\nFailure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. When application failure is encountered, preserving application state facilitates application restart and return to the operational mode of the organization with less disruption of mission/business processes.\n\nClustering of multiple application servers is a common approach to providing fail-safe application availability when system MAC and confidentiality levels require redundancy.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "This requirement is dependent upon system MAC and confidentiality.\n\nIf the system MAC and confidentiality levels do not specify redundancy requirements, this requirement is NA.\n\nReview the application server configuration and documentation to ensure the application server is configured to provide clustering functionality.\n\nIf the application server is not configured to provide clustering or some form of failover functionality, this is a finding.",
            "FixText": "This requirement is dependent upon system MAC and confidentiality.\n\nIf the system MAC and confidentiality levels do not specify redundancy requirements, this requirement is NA.\n\nConfigure the application server to provide application failover or participate in an application cluster which provides failover.",
            "CCI": "V-35424,SV-46711,CCI-001190"
        },
        {
            "VulnID": "V-204769",
            "RuleID": "SV-204769r508029_rule",
            "StigID": "SRG-APP-000225-AS-000166",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000225",
            "RuleTitle": "The application server must fail to a secure state if system initialization fails, shutdown fails, or aborts fail.",
            "Description": "<VulnDiscussion>Fail-secure is a condition achieved by the application server in order to ensure that in the event of an operational failure, the system does not enter into an unsecure state where intended security properties no longer hold.  Preserving information system state information also facilitates system restart and return to the operational mode of the organization with less disruption of mission-essential processes.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Fail-secure is a condition achieved by the application server in order to ensure that in the event of an operational failure, the system does not enter into an unsecure state where intended security properties no longer hold.  Preserving information system state information also facilitates system restart and return to the operational mode of the organization with less disruption of mission-essential processes.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server fails to a secure state if system initialization fails, shutdown fails, or aborts fail.\n\nIf the application server cannot be configured to fail securely, this is a finding.",
            "FixText": "Configure the application server to fail to a secure state if system initialization fails, shutdown fails, or aborts fail.",
            "CCI": "V-57553,SV-71829,CCI-001190"
        },
        {
            "VulnID": "V-204770",
            "RuleID": "SV-204770r508029_rule",
            "StigID": "SRG-APP-000231-AS-000133",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000231",
            "RuleTitle": "The application server must protect the confidentiality and integrity of all information at rest.",
            "Description": "<VulnDiscussion>When data is written to digital media such as hard drives, mobile computers, external/removable hard drives, personal digital assistants, flash/thumb drives, etc., there is risk of data loss and data compromise.\n\nFewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. In these situations, it is assumed the physical access controls where the media resides provide adequate protection.\n\nAs part of a defense-in-depth strategy, data owners and DoD consider routinely encrypting information at rest on selected secondary storage devices. The employment of cryptography is at the discretion of the information owner/steward. The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information.\n\nThe strength of mechanisms is commensurate with the classification and sensitivity of the information.\n\nThe application server must directly provide, or provide access to, cryptographic libraries and functionality that allow applications to encrypt data when it is stored.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "When data is written to digital media such as hard drives, mobile computers, external/removable hard drives, personal digital assistants, flash/thumb drives, etc., there is risk of data loss and data compromise.\n\nFewer protection measures are needed for media containing information determined by the organization to be in the public domain, to be publicly releasable, or to have limited or no adverse impact if accessed by other than authorized personnel. In these situations, it is assumed the physical access controls where the media resides provide adequate protection.\n\nAs part of a defense-in-depth strategy, data owners and DoD consider routinely encrypting information at rest on selected secondary storage devices. The employment of cryptography is at the discretion of the information owner/steward. The selection of the cryptographic mechanisms used is based upon maintaining the confidentiality and integrity of the information.\n\nThe strength of mechanisms is commensurate with the classification and sensitivity of the information.\n\nThe application server must directly provide, or provide access to, cryptographic libraries and functionality that allow applications to encrypt data when it is stored.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to ensure the application server is protecting the confidentiality and integrity of all information at rest.\n\nIf the confidentiality and integrity of all information at rest is not protected, this is a finding.",
            "FixText": "Configure the application server to protect the confidentiality and integrity of all information at rest.",
            "CCI": "SV-71831,V-57555,CCI-001199"
        },
        {
            "VulnID": "V-204771",
            "RuleID": "SV-204771r508029_rule",
            "StigID": "SRG-APP-000231-AS-000156",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000231",
            "RuleTitle": "The application server must employ cryptographic mechanisms to ensure confidentiality and integrity of all information at rest when stored off-line.",
            "Description": "<VulnDiscussion>This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system.\n\nApplication servers generate information throughout the course of their use, most notably, log data.  If the data is not encrypted while at rest, the data used later for forensic investigation cannot be guaranteed to be unchanged and cannot be used for prosecution of an attacker.  To accomplish a credible investigation and prosecution, the data integrity and information confidentiality must be guaranteed.\n\nApplication servers must provide the capability to protect all data, especially log data, so as to ensure confidentiality and integrity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "This control is intended to address the confidentiality and integrity of information at rest in non-mobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system.\n\nApplication servers generate information throughout the course of their use, most notably, log data.  If the data is not encrypted while at rest, the data used later for forensic investigation cannot be guaranteed to be unchanged and cannot be used for prosecution of an attacker.  To accomplish a credible investigation and prosecution, the data integrity and information confidentiality must be guaranteed.\n\nApplication servers must provide the capability to protect all data, especially log data, so as to ensure confidentiality and integrity.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to ensure the system is protecting the confidentiality and integrity of all application server data at rest when stored off-line.\n\nIf the application server is not configured to protect all application server data at rest when stored off-line, this is a finding.",
            "FixText": "Configure the application server to employ cryptographic mechanisms to ensure confidentiality and integrity of all application server data at rest when stored off-line.",
            "CCI": "SV-46713,V-35426,CCI-001199"
        },
        {
            "VulnID": "V-204772",
            "RuleID": "SV-204772r508029_rule",
            "StigID": "SRG-APP-000251-AS-000165",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000251",
            "RuleTitle": "The application server must check the validity of all data inputs to the management interface, except those specifically identified by the organization.",
            "Description": "<VulnDiscussion>Invalid user input occurs when a user inserts data or characters into an applications data entry field and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nApplication servers must ensure their management interfaces perform data input validation checks. Input validation consists of evaluating user input and ensuring that only allowed characters are utilized. An example is ensuring that the interfaces are not susceptible to SQL injection attacks.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Invalid user input occurs when a user inserts data or characters into an applications data entry field and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nApplication servers must ensure their management interfaces perform data input validation checks. Input validation consists of evaluating user input and ensuring that only allowed characters are utilized. An example is ensuring that the interfaces are not susceptible to SQL injection attacks.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to determine if the system checks the validity of information inputs to the management interface, except those specifically identified by the organization.\n\nIf the management interface data inputs are not validated, this is a finding.",
            "FixText": "Configure the application server to check the validity of data inputs into the management interface except those specifically identified by the organization.",
            "CCI": "SV-46723,V-35436,CCI-001310"
        },
        {
            "VulnID": "V-204773",
            "RuleID": "SV-204773r508029_rule",
            "StigID": "SRG-APP-000266-AS-000168",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000266",
            "RuleTitle": "The application server must identify potentially security-relevant error conditions.",
            "Description": "<VulnDiscussion>The structure and content of error messages need to be carefully considered by the organization and development team.  Any application providing too much information in error logs and in administrative messages to the screen risks compromising the data and security of the application and system.  The extent to which the application server is able to identify and handle error conditions is guided by organizational policy and operational requirements. Adequate logging levels and system performance capabilities need to be balanced with data protection requirements.\n\nThe structure and content of error messages needs to be carefully considered by the organization and development team.\n\nApplication servers must have the capability to log at various levels which can provide log entries for potential security-related error events.\n\nAn example is the capability for the application server to assign a criticality level to a failed logon attempt error message, a security-related error message being of a higher criticality.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The structure and content of error messages need to be carefully considered by the organization and development team.  Any application providing too much information in error logs and in administrative messages to the screen risks compromising the data and security of the application and system.  The extent to which the application server is able to identify and handle error conditions is guided by organizational policy and operational requirements. Adequate logging levels and system performance capabilities need to be balanced with data protection requirements.\n\nThe structure and content of error messages needs to be carefully considered by the organization and development team.\n\nApplication servers must have the capability to log at various levels which can provide log entries for potential security-related error events.\n\nAn example is the capability for the application server to assign a criticality level to a failed logon attempt error message, a security-related error message being of a higher criticality.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to determine if the system identifies potentially security-relevant error conditions on the server.\n\nIf this function is not performed, this is a finding.",
            "FixText": "Configure the application server to identify potentially security-relevant error conditions on the server.",
            "CCI": "SV-71843,V-57567,CCI-001312"
        },
        {
            "VulnID": "V-204774",
            "RuleID": "SV-204774r508029_rule",
            "StigID": "SRG-APP-000266-AS-000169",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000266",
            "RuleTitle": "The application server must only generate error messages that provide information necessary for corrective actions without revealing sensitive or potentially harmful information in error logs and administrative messages.",
            "Description": "<VulnDiscussion>Any application providing too much information in error logs and in administrative messages to the screen risks compromising the data and security of the application and system. The structure and content of error messages needs to be carefully considered by the organization and development team.\n\nThe application server must not log sensitive information such as passwords, private keys, or other sensitive data. This requirement pertains to logs that are generated by the application server and application server processes, not the applications that may reside on the application server. Those errors are out of the scope of these requirements.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Any application providing too much information in error logs and in administrative messages to the screen risks compromising the data and security of the application and system. The structure and content of error messages needs to be carefully considered by the organization and development team.\n\nThe application server must not log sensitive information such as passwords, private keys, or other sensitive data. This requirement pertains to logs that are generated by the application server and application server processes, not the applications that may reside on the application server. Those errors are out of the scope of these requirements.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review system documentation and logs to determine if the application server writes sensitive information such as passwords or private keys into the logs and administrative messages.\n\nIf the application server writes sensitive or potentially harmful information into the logs and administrative messages, this is a finding.",
            "FixText": "Configure the application server to not write sensitive information into the logs and administrative messages.",
            "CCI": "SV-46727,V-35440,CCI-001312"
        },
        {
            "VulnID": "V-204775",
            "RuleID": "SV-204775r508029_rule",
            "StigID": "SRG-APP-000267-AS-000170",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000267",
            "RuleTitle": "The application server must restrict error messages only to authorized users.",
            "Description": "<VulnDiscussion>If the application provides too much information in error logs and administrative messages to the screen, this could lead to compromise. The structure and content of error messages need to be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.\n\nApplication servers must protect the error messages that are created by the application server. All application server users' accounts are used for the management of the server and the applications residing on the application server. All accounts are assigned to a certain role with corresponding access rights. The application server must restrict access to error messages so only authorized users may view them. Error messages are usually written to logs contained on the file system. The application server will usually create new log files as needed and must take steps to ensure that the proper file permissions are utilized when the log files are created.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "If the application provides too much information in error logs and administrative messages to the screen, this could lead to compromise. The structure and content of error messages need to be carefully considered by the organization and development team. The extent to which the information system is able to identify and handle error conditions is guided by organizational policy and operational requirements.\n\nApplication servers must protect the error messages that are created by the application server. All application server users' accounts are used for the management of the server and the applications residing on the application server. All accounts are assigned to a certain role with corresponding access rights. The application server must restrict access to error messages so only authorized users may view them. Error messages are usually written to logs contained on the file system. The application server will usually create new log files as needed and must take steps to ensure that the proper file permissions are utilized when the log files are created.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration and documentation to determine if the application server will restrict access to error messages so only authorized users may view or otherwise access them.\n\nIf the application server cannot be configured to restrict access to error messages to only authorized users, this is a finding.",
            "FixText": "Configure the application server to restrict access to error messages so only authorized users may view or otherwise access them.",
            "CCI": "SV-46728,V-35441,CCI-001314"
        },
        {
            "VulnID": "V-204776",
            "RuleID": "SV-204776r508029_rule",
            "StigID": "SRG-APP-000290-AS-000174",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000290",
            "RuleTitle": "The application server must use cryptographic mechanisms to protect the integrity of log tools.",
            "Description": "<VulnDiscussion>Protecting the integrity of the tools used for logging purposes is a critical step in ensuring the integrity of log data. Log data includes all information (e.g., log records, log settings, and log reports) needed to successfully log information system activity. \n\nIt is not uncommon for attackers to replace the log tools or inject code into the existing tools for the purpose of providing the capability to hide or erase system activity from the logs. \n\nTo address this risk, log tools must be cryptographically signed in order to provide the capability to identify when the log tools have been modified, manipulated or replaced. An example is a checksum hash of the file or files.\n\nApplication server log tools must use cryptographic mechanisms to protect the integrity of the tools or allow cryptographic protection mechanisms to be applied to their tools.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Protecting the integrity of the tools used for logging purposes is a critical step in ensuring the integrity of log data. Log data includes all information (e.g., log records, log settings, and log reports) needed to successfully log information system activity. \n\nIt is not uncommon for attackers to replace the log tools or inject code into the existing tools for the purpose of providing the capability to hide or erase system activity from the logs. \n\nTo address this risk, log tools must be cryptographically signed in order to provide the capability to identify when the log tools have been modified, manipulated or replaced. An example is a checksum hash of the file or files.\n\nApplication server log tools must use cryptographic mechanisms to protect the integrity of the tools or allow cryptographic protection mechanisms to be applied to their tools.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to determine if the application server log tools have been cryptographically signed to protect the integrity of the tools.\n\nIf the application server log tools have not been cryptographically signed, this is a finding.",
            "FixText": "Configure the application server log tools to be cryptographically signed to protect the integrity of the tools.",
            "CCI": "V-35445,SV-46732,CCI-001496"
        },
        {
            "VulnID": "V-204777",
            "RuleID": "SV-204777r850833_rule",
            "StigID": "SRG-APP-000295-AS-000263",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000295",
            "RuleTitle": "The application server must automatically terminate a user session after organization-defined conditions or trigger events requiring a session disconnect.",
            "Description": "<VulnDiscussion>An attacker can take advantage of user sessions that are left open, thus bypassing the user authentication process.\n\nTo thwart the vulnerability of open and unused user sessions, the application server must be configured to close the sessions when a configured condition or trigger event is met.\n\nSession termination terminates all processes associated with a user's logical session except those processes that are specifically created by the user (i.e., session owner) to continue after the session is terminated.\n\nConditions or trigger events requiring automatic session termination can include, for example, periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "An attacker can take advantage of user sessions that are left open, thus bypassing the user authentication process.\n\nTo thwart the vulnerability of open and unused user sessions, the application server must be configured to close the sessions when a configured condition or trigger event is met.\n\nSession termination terminates all processes associated with a user's logical session except those processes that are specifically created by the user (i.e., session owner) to continue after the session is terminated.\n\nConditions or trigger events requiring automatic session termination can include, for example, periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration settings to determine if the application server is configured to close user sessions after defined conditions or trigger events are met.\n\nIf the application server is not configured or cannot be configured to disconnect users after defined conditions and trigger events are met, this is a finding.",
            "FixText": "Configure the application server to terminate user sessions on defined conditions or trigger events.",
            "CCI": "V-57401,SV-71673,CCI-002361"
        },
        {
            "VulnID": "V-204778",
            "RuleID": "SV-204778r850834_rule",
            "StigID": "SRG-APP-000296-AS-000201",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000296",
            "RuleTitle": "The application server management interface must provide a logout capability for user-initiated communication session.",
            "Description": "<VulnDiscussion>If a user cannot explicitly end an application server management interface session, the session may remain open and be exploited by an attacker; this is referred to as a zombie session.\n\nThe attacker will then have access to the application server management functions without going through the user authentication process.\n\nTo prevent this type of attack, the application server management interface must close user sessions when defined events are met and provide a logout function for users to explicitly close the session and free resources that were in use by the user.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "If a user cannot explicitly end an application server management interface session, the session may remain open and be exploited by an attacker; this is referred to as a zombie session.\n\nThe attacker will then have access to the application server management functions without going through the user authentication process.\n\nTo prevent this type of attack, the application server management interface must close user sessions when defined events are met and provide a logout function for users to explicitly close the session and free resources that were in use by the user.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration settings to determine if the application server management interface provides a logout capability.\n\nIf the application server management interface does not provide a logout capability, this is a finding.",
            "FixText": "Configure the application server management interface to provide a logout capability for the users.",
            "CCI": "V-57403,SV-71675,CCI-002363"
        },
        {
            "VulnID": "V-204779",
            "RuleID": "SV-204779r850835_rule",
            "StigID": "SRG-APP-000297-AS-000188",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000297",
            "RuleTitle": "The application server management interface must display an explicit logout message to users indicating the reliable termination of authenticated communications sessions.",
            "Description": "<VulnDiscussion>Providing a logout capability to the user allows the user to explicitly close a session and free those resources used during the session.\n\nIf a user cannot explicitly end an application session, the session may remain open and be exploited by an attacker; this is referred to as a zombie session.\n\nThe attacker will then have access to the application server management functions without going through the user authentication process.\n\nTo inform the user that the session has been reliably closed, a logout message must be displayed to the user.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Providing a logout capability to the user allows the user to explicitly close a session and free those resources used during the session.\n\nIf a user cannot explicitly end an application session, the session may remain open and be exploited by an attacker; this is referred to as a zombie session.\n\nThe attacker will then have access to the application server management functions without going through the user authentication process.\n\nTo inform the user that the session has been reliably closed, a logout message must be displayed to the user.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration settings to determine if the application server management interface displays a logout message.\n\nIf the application server management interface does not display a logout message, this is a finding.",
            "FixText": "Configure the application server management interface to display an explicit logout message to users.",
            "CCI": "V-57405,SV-71677,CCI-002364"
        },
        {
            "VulnID": "V-204780",
            "RuleID": "SV-204780r850836_rule",
            "StigID": "SRG-APP-000313-AS-000003",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000313",
            "RuleTitle": "The application server must associate organization-defined types of security attributes having organization-defined security attribute values with information in process.",
            "Description": "<VulnDiscussion>The application server provides a framework for applications to communicate between each other to form an overall well-designed application to perform a task.  As the information traverses the application server and the components, the security attributes must be maintained.  Without the association of security attributes to information, there is no basis for the application server or hosted applications to make security-related access control decisions.  The security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing, but either way, it is imperative these assignments are maintained while the data is in process. If the security attributes are lost when the data is being processed, there is the risk of a data compromise.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The application server provides a framework for applications to communicate between each other to form an overall well-designed application to perform a task.  As the information traverses the application server and the components, the security attributes must be maintained.  Without the association of security attributes to information, there is no basis for the application server or hosted applications to make security-related access control decisions.  The security attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing, but either way, it is imperative these assignments are maintained while the data is in process. If the security attributes are lost when the data is being processed, there is the risk of a data compromise.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation to determine if the application associates organization-defined types of security attributes with organization-defined security attribute values to information in process.\n\nIf the application server does not associate the security attributes to information in process or the feature is not implemented, this is a finding.",
            "FixText": "Configure the application server to associate organization-defined types of security attributes having organization-defined security attribute values with information in process.",
            "CCI": "V-57407,SV-71679,CCI-002263"
        },
        {
            "VulnID": "V-204781",
            "RuleID": "SV-204781r850837_rule",
            "StigID": "SRG-APP-000314-AS-000005",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000314",
            "RuleTitle": "The application server must associate organization-defined types of security attributes having organization-defined security attribute values with information in transmission.",
            "Description": "<VulnDiscussion>The application server provides a framework for applications to communicate between each other to form an overall well-designed application to perform a task.  As the information is transmitted, the security attributes must be maintained.  Without the association of security attributes to information, there is no basis for the application to make security-related access control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing, but either way, it is imperative these assignments are maintained while the data is in transmission. If the security attributes are lost when the data is being transmitted, there is the risk of a data compromise.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The application server provides a framework for applications to communicate between each other to form an overall well-designed application to perform a task.  As the information is transmitted, the security attributes must be maintained.  Without the association of security attributes to information, there is no basis for the application to make security-related access control decisions.\n\nSecurity attributes are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information.\n\nOne example includes marking data as classified or FOUO. These security attributes may be assigned manually or during data processing, but either way, it is imperative these assignments are maintained while the data is in transmission. If the security attributes are lost when the data is being transmitted, there is the risk of a data compromise.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation to determine if the application associates organization-defined types of security attributes with organization-defined security attribute values to information in transmission.\n\nIf the application server does not associate the security attributes to information in transmission or the feature is not implemented, this is a finding.",
            "FixText": "Configure the application server to associate organization-defined types of security attributes having organization-defined security attribute values with information in transmission.",
            "CCI": "SV-71681,V-57409,CCI-002264"
        },
        {
            "VulnID": "V-204782",
            "RuleID": "SV-204782r850838_rule",
            "StigID": "SRG-APP-000315-AS-000094",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000315",
            "RuleTitle": "The application server must control remote access methods.",
            "Description": "<VulnDiscussion>Application servers provide remote access capability and must be able to enforce remote access policy requirements or work in conjunction with enterprise tools designed to enforce policy requirements.  Automated monitoring and control of remote access sessions allows organizations to detect cyber attacks and also ensure ongoing compliance with remote access policies by logging connection activities of remote users.\n\nExamples of policy requirements include, but are not limited to, authorizing remote access to the information system, limiting access based on authentication credentials, and monitoring for unauthorized access.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Application servers provide remote access capability and must be able to enforce remote access policy requirements or work in conjunction with enterprise tools designed to enforce policy requirements.  Automated monitoring and control of remote access sessions allows organizations to detect cyber attacks and also ensure ongoing compliance with remote access policies by logging connection activities of remote users.\n\nExamples of policy requirements include, but are not limited to, authorizing remote access to the information system, limiting access based on authentication credentials, and monitoring for unauthorized access.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review organization policy, application server product documentation and configuration to determine if the system enforces the organization's requirements for remote connections.\n\nIf the system is not configured to enforce these requirements, or the remote connection settings are not in accordance with the requirements, this is a finding.",
            "FixText": "Configure the application server to enforce remote connection settings.",
            "CCI": "SV-71685,V-57413,CCI-002314"
        },
        {
            "VulnID": "V-204783",
            "RuleID": "SV-204783r850839_rule",
            "StigID": "SRG-APP-000316-AS-000199",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000316",
            "RuleTitle": "The application server must provide the capability to immediately disconnect or disable remote access to the management interface.",
            "Description": "<VulnDiscussion>Without the ability to immediately disconnect or disable remote access, an attack or other compromise taking progress would not be immediately stopped.\n\nThe application server must have the capability to immediately disconnect current users remotely accessing the management interface and/or disable further remote access. The speed of disconnect or disablement varies based on the criticality of missions/business functions and the need to eliminate immediate or future remote access to organizational information systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Without the ability to immediately disconnect or disable remote access, an attack or other compromise taking progress would not be immediately stopped.\n\nThe application server must have the capability to immediately disconnect current users remotely accessing the management interface and/or disable further remote access. The speed of disconnect or disablement varies based on the criticality of missions/business functions and the need to eliminate immediate or future remote access to organizational information systems.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server product documentation and server configuration to ensure that there is a capability to immediately disconnect or disable remote access to the management interface.\n\nIf there is no capability, this is a finding.",
            "FixText": "Configure the application server to have the capability to immediately disconnect or disable remote access to the management interface.",
            "CCI": "SV-71687,V-57415,CCI-002322"
        },
        {
            "VulnID": "V-204784",
            "RuleID": "SV-204784r850840_rule",
            "StigID": "SRG-APP-000340-AS-000185",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000340",
            "RuleTitle": "The application server must prevent non-privileged users from executing privileged functions to include disabling, circumventing, or altering implemented security safeguards/countermeasures.",
            "Description": "<VulnDiscussion>Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.\n\nRestricting non-privileged users also prevents an attacker, who has gained access to a non-privileged account, from elevating privileges, creating accounts, and performing system checks and maintenance.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Preventing non-privileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges.\n\nRestricting non-privileged users also prevents an attacker, who has gained access to a non-privileged account, from elevating privileges, creating accounts, and performing system checks and maintenance.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to verify that non-privileged users cannot access or execute privileged functions.\n\nHave a user logon as a non-privileged user and attempt to execute privileged functions.\n\nIf the user is capable of executing privileged functions, this is a finding.",
            "FixText": "Configure the application server to deny non-privileged users access to and execution of privileged functions.",
            "CCI": "V-57399,SV-71671,CCI-002235"
        },
        {
            "VulnID": "V-204785",
            "RuleID": "SV-204785r850841_rule",
            "StigID": "SRG-APP-000343-AS-000030",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000343",
            "RuleTitle": "The application server must provide access logging that ensures users who are granted a privileged role (or roles) have their privileged activity logged.",
            "Description": "<VulnDiscussion>In order to be able to provide a forensic history of activity, the application server must ensure users who are granted a privileged role or those who utilize a separate distinct account when accessing privileged functions or data have their actions logged.\n\nIf privileged activity is not logged, no forensic logs can be used to establish accountability for privileged actions that occur on the system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "In order to be able to provide a forensic history of activity, the application server must ensure users who are granted a privileged role or those who utilize a separate distinct account when accessing privileged functions or data have their actions logged.\n\nIf privileged activity is not logged, no forensic logs can be used to establish accountability for privileged actions that occur on the system.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and log configuration to verify the application server logs privileged activity.\n\nIf the application server is not configured to log privileged activity, this is a finding.",
            "FixText": "Configure the application server to log privileged activity.",
            "CCI": "SV-71669,V-57397,CCI-002234"
        },
        {
            "VulnID": "V-204787",
            "RuleID": "SV-204787r850842_rule",
            "StigID": "SRG-APP-000356-AS-000202",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000356",
            "RuleTitle": "The application server must provide centralized management and configuration of the content to be captured in log records generated by all application components.",
            "Description": "<VulnDiscussion>A clustered application server is made up of several servers working together to provide the user a failover and increased computing capability.  To facilitate uniform logging in the event of an incident and later forensic investigation, the record format and logable events need to be uniform.  This can be managed best from a centralized server.\n\nWithout the ability to centrally manage the content captured in the log records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "A clustered application server is made up of several servers working together to provide the user a failover and increased computing capability.  To facilitate uniform logging in the event of an incident and later forensic investigation, the record format and logable events need to be uniform.  This can be managed best from a centralized server.\n\nWithout the ability to centrally manage the content captured in the log records, identification, troubleshooting, and correlation of suspicious behavior would be difficult and could lead to a delayed or incomplete analysis of an ongoing attack.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server is part of a cluster.\n\nIf the application server is not part of a cluster, this requirement is NA.\n\nIf the application server is part of a cluster, verify that the log settings are managed and configured from a centralized management server.\n\nIf the log settings are not centrally managed, this is a finding.",
            "FixText": "Configure the application server to allow centralized management and configuration of the content to be captured in log records.",
            "CCI": "SV-71691,V-57419,CCI-001844"
        },
        {
            "VulnID": "V-204788",
            "RuleID": "SV-204788r850843_rule",
            "StigID": "SRG-APP-000357-AS-000038",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000357",
            "RuleTitle": "The application server must allocate log record storage capacity in accordance with organization-defined log record storage requirements.",
            "Description": "<VulnDiscussion>The proper management of log records not only dictates proper archiving processes and procedures be established, it also requires allocating enough storage space to maintain the logs online for a defined period of time.\n\nIf adequate online log storage capacity is not maintained, intrusion monitoring, security investigations, and forensic analysis can be negatively affected.\n\nIt is important to keep a defined amount of logs online and readily available for investigative purposes. The logs may be stored on the application server until they can be archived to a log system or, in some instances, a Storage Area Networks (SAN).  Regardless of the method used, log record storage capacity must be sufficient to store log data when the data cannot be offloaded to a log system or SAN.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The proper management of log records not only dictates proper archiving processes and procedures be established, it also requires allocating enough storage space to maintain the logs online for a defined period of time.\n\nIf adequate online log storage capacity is not maintained, intrusion monitoring, security investigations, and forensic analysis can be negatively affected.\n\nIt is important to keep a defined amount of logs online and readily available for investigative purposes. The logs may be stored on the application server until they can be archived to a log system or, in some instances, a Storage Area Networks (SAN).  Regardless of the method used, log record storage capacity must be sufficient to store log data when the data cannot be offloaded to a log system or SAN.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server creates log storage to buffer log data until offloading to a log data storage facility.\n\nIf the application server does not allocate storage for log data, this is a finding.",
            "FixText": "Configure the application server to allocate storage for log data before offloading to a log data storage facility.",
            "CCI": "SV-71693,V-57421,CCI-001849"
        },
        {
            "VulnID": "V-204789",
            "RuleID": "SV-204789r850844_rule",
            "StigID": "SRG-APP-000358-AS-000064",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000358",
            "RuleTitle": "The application server must off-load log records onto a different system or media from the system being logged.",
            "Description": "<VulnDiscussion>Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, filenames involved, access control or flow control rules invoked.\n\nOff-loading is a common process in information systems with limited log storage capacity.\n\nCentralized management of log records provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. Application servers and their related components are required to off-load log records onto a different system or media than the system being logged.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information system logging capability is critical for accurate forensic analysis. Log record content that may be necessary to satisfy the requirement of this control includes, but is not limited to, time stamps, source and destination IP addresses, user/process identifiers, event descriptions, application-specific events, success/fail indications, filenames involved, access control or flow control rules invoked.\n\nOff-loading is a common process in information systems with limited log storage capacity.\n\nCentralized management of log records provides for efficiency in maintenance and management of records, as well as the backup and archiving of those records. Application servers and their related components are required to off-load log records onto a different system or media than the system being logged.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Verify the log records are being off-loaded to a separate system or transferred from the application server to a storage location other than the application server itself.\n\nThe system administrator of the device may demonstrate this capability using a log management application, system configuration, or other means.\n\nIf logs are not being off-loaded, this is a finding.",
            "FixText": "Configure the application server to off-load the logs to a remote log or management server.",
            "CCI": "SV-71695,V-57423,CCI-001851"
        },
        {
            "VulnID": "V-204790",
            "RuleID": "SV-204790r850845_rule",
            "StigID": "SRG-APP-000359-AS-000065",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000359",
            "RuleTitle": "The application server must provide an immediate warning to the SA and ISSO, at a minimum, when allocated log record storage volume reaches 75% of maximum log record storage capacity.",
            "Description": "<VulnDiscussion>It is critical for the appropriate personnel to be aware if a system is at risk of failing to process logs as required.  Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  Notification of the storage condition will allow administrators to take actions so that logs are not lost.  This requirement can be met by configuring the application server to utilize a dedicated logging tool that meets this requirement.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process logs as required.  Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  Notification of the storage condition will allow administrators to take actions so that logs are not lost.  This requirement can be met by configuring the application server to utilize a dedicated logging tool that meets this requirement.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the configuration settings to determine if the application server logging system provides a warning to the SA and ISSO when 75% of allocated log record storage volume is reached.\n\nIf designated alerts are not sent, or the application server is not configured to use a dedicated logging tool that meets this requirement, this is a finding.",
            "FixText": "Configure the application server to provide an alert to the SA and ISSO when allocated log record storage volume reaches 75% of maximum log record storage capacity.",
            "CCI": "SV-71699,V-57427,CCI-001855"
        },
        {
            "VulnID": "V-204791",
            "RuleID": "SV-204791r850846_rule",
            "StigID": "SRG-APP-000360-AS-000066",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000360",
            "RuleTitle": "The application server must provide an immediate real-time alert to authorized users of all log failure events requiring real-time alerts.",
            "Description": "<VulnDiscussion>It is critical for the appropriate personnel to be aware if a system is at risk of failing to process logs as required.  Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  Notification of the failure event will allow administrators to take actions so that logs are not lost.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process logs as required.  Log processing failures include software/hardware errors, failures in the log capturing mechanisms, and log storage capacity being reached or exceeded.  Notification of the failure event will allow administrators to take actions so that logs are not lost.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the configuration settings to determine if the application server log system provides a real-time alert to authorized users when log failure events occur requiring real-time alerts.\n\nIf designated alerts are not sent to authorized users, this is a finding.",
            "FixText": "Configure the application server to provide a real-time alert to authorized users when log failure events occur that require real-time alerts.",
            "CCI": "SV-71701,V-57429,CCI-001858"
        },
        {
            "VulnID": "V-204792",
            "RuleID": "SV-204792r850847_rule",
            "StigID": "SRG-APP-000371-AS-000077",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000371",
            "RuleTitle": "The application server must compare internal application server clocks at least every 24 hours with an authoritative time source.",
            "Description": "<VulnDiscussion>Determining the correct time a particular application event occurred on a system is critical when conducting forensic analysis and investigating system events.\n\nSynchronization of system clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. To meet this requirement, the organization will define an authoritative time source and have each system compare its internal clock at least every 24 hours.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Determining the correct time a particular application event occurred on a system is critical when conducting forensic analysis and investigating system events.\n\nSynchronization of system clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. To meet this requirement, the organization will define an authoritative time source and have each system compare its internal clock at least every 24 hours.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and confirm that the application server compares internal application server clocks at least every 24 hours with an authoritative time source.\n\nIf the application server does not compare internal application server clocks to an authoritative source or if the frequency is greater than every 24 hours, this is a finding.",
            "FixText": "Configure the application server to compare internal application server clocks at least every 24 hours with an authoritative time source.",
            "CCI": "SV-71707,V-57435,CCI-001891"
        },
        {
            "VulnID": "V-204793",
            "RuleID": "SV-204793r850848_rule",
            "StigID": "SRG-APP-000372-AS-000212",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000372",
            "RuleTitle": "The application server must synchronize internal application server clocks to an authoritative time source when the time difference is greater than the organization-defined time period.",
            "Description": "<VulnDiscussion>Determining the correct time a particular application event occurred on a system is critical when conducting forensic analysis and investigating system events.\n\nSynchronization of internal application server clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. To meet this requirement, the organization will define an authoritative time source and have each system synchronize when the time difference is greater than a defined time period.  The industry standard for the threshold is 1ms.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Determining the correct time a particular application event occurred on a system is critical when conducting forensic analysis and investigating system events.\n\nSynchronization of internal application server clocks is needed in order to correctly correlate the timing of events that occur across multiple systems. To meet this requirement, the organization will define an authoritative time source and have each system synchronize when the time difference is greater than a defined time period.  The industry standard for the threshold is 1ms.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server is configured to reset internal information clocks when the difference is greater than a defined threshold with an authoritative time source.\n\nIf the application server cannot synchronize internal application server clocks to the authoritative time source when the time difference is greater than the organization-defined time period, this is a finding.",
            "FixText": "Configure the application server to reset internal information system clocks when the time difference is greater than a defined time period with the authoritative time source.",
            "CCI": "SV-71709,V-57437,CCI-002046"
        },
        {
            "VulnID": "V-204794",
            "RuleID": "SV-204794r850849_rule",
            "StigID": "SRG-APP-000374-AS-000210",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000374",
            "RuleTitle": "The application server must record time stamps for log records that can be mapped to Coordinated Universal Time (UTC) or Greenwich Mean Time (GMT).",
            "Description": "<VulnDiscussion>If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.\n\nTime stamps generated by the application include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.\n\nTime stamps generated by the application include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration files to determine if time stamps for log records can be mapped to UTC or GMT.\n\nIf the time stamp cannot be mapped to UTC or GMT, this is a finding.",
            "FixText": "Configure the application server to use time stamps for log records that can easily be mapped to UTC or GMT.",
            "CCI": "SV-71703,V-57431,CCI-001890"
        },
        {
            "VulnID": "V-204795",
            "RuleID": "SV-204795r850850_rule",
            "StigID": "SRG-APP-000375-AS-000211",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000375",
            "RuleTitle": "The application server must record time stamps for log records that meet a granularity of one second for a minimum degree of precision.",
            "Description": "<VulnDiscussion>To investigate an incident, the log records should be easily put into chronological order.  Without sufficient granularity of time stamps, the chronological order cannot be determined.\n\nTime stamps generated by the application server include date and time.  Granularity of time measurements refers to the degree of synchronization between information system clocks and reference clocks.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "To investigate an incident, the log records should be easily put into chronological order.  Without sufficient granularity of time stamps, the chronological order cannot be determined.\n\nTime stamps generated by the application server include date and time.  Granularity of time measurements refers to the degree of synchronization between information system clocks and reference clocks.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration files to determine if time stamps for log records meet a granularity of one second.\n\nIf the time stamp cannot generate to a one-second granularity, this is a finding.",
            "FixText": "Configure the application server to use time stamps for log records that can meet a granularity of one second.",
            "CCI": "V-57433,SV-71705,CCI-001889"
        },
        {
            "VulnID": "V-204796",
            "RuleID": "SV-204796r850851_rule",
            "StigID": "SRG-APP-000380-AS-000088",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000380",
            "RuleTitle": "The application server must enforce access restrictions associated with changes to application server configuration.",
            "Description": "<VulnDiscussion>When dealing with access restrictions pertaining to change control, it should be noted that any changes to the software, and/or application server configuration can potentially have significant effects on the overall security of the system.\n\nAccess restrictions for changes also include application software libraries.\n\nIf the application server provides automatic code deployment capability, (where updates to applications hosted on the application server are automatically performed, usually by the developers' IDE tool), it must also provide a capability to restrict the use of automatic application deployment. Automatic code deployments are allowable in a development environment, but not in production.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "When dealing with access restrictions pertaining to change control, it should be noted that any changes to the software, and/or application server configuration can potentially have significant effects on the overall security of the system.\n\nAccess restrictions for changes also include application software libraries.\n\nIf the application server provides automatic code deployment capability, (where updates to applications hosted on the application server are automatically performed, usually by the developers' IDE tool), it must also provide a capability to restrict the use of automatic application deployment. Automatic code deployments are allowable in a development environment, but not in production.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the system employs mechanisms to enforce restrictions on application server configuration changes.\n\nConfiguration changes include, but are not limited to, automatic code deployments, software library updates, and changes to configuration settings within the application server.\n\nIf the application server does not enforce access restrictions for configuration changes, this is a finding.",
            "FixText": "Configure the application server to enforce access restrictions associated with changes to the application server configuration to include code deployment, library updates, and changes to application server configuration settings.",
            "CCI": "V-57491,SV-71767,CCI-001813"
        },
        {
            "VulnID": "V-204797",
            "RuleID": "SV-204797r850852_rule",
            "StigID": "SRG-APP-000381-AS-000089",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000381",
            "RuleTitle": "The application server must log the enforcement actions used to restrict access associated with changes to the application server.",
            "Description": "<VulnDiscussion>Without logging the enforcement of access restrictions against changes to the application server configuration, it will be difficult to identify attempted attacks, and a log trail will not be available for forensic investigation for after-the-fact actions.  Configuration changes may occur to any of the modules within the application server through the management interface, but logging of actions to the configuration of a module outside the application server is not logged.\n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Log items may consist of lists of actions blocked by access restrictions or changes identified after the fact.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Without logging the enforcement of access restrictions against changes to the application server configuration, it will be difficult to identify attempted attacks, and a log trail will not be available for forensic investigation for after-the-fact actions.  Configuration changes may occur to any of the modules within the application server through the management interface, but logging of actions to the configuration of a module outside the application server is not logged.\n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Log items may consist of lists of actions blocked by access restrictions or changes identified after the fact.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Check the application server documentation and logs to determine if enforcement actions used to restrict access associated with changes to the application server are logged.\n\nIf these actions are not logged, this is a finding.",
            "FixText": "Configure the application server to log the enforcement actions used to restrict access associated with changes to the application server.",
            "CCI": "V-57493,SV-71769,CCI-001814"
        },
        {
            "VulnID": "V-204798",
            "RuleID": "SV-204798r850853_rule",
            "StigID": "SRG-APP-000389-AS-000253",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000389",
            "RuleTitle": "The application server must require users to re-authenticate when organization-defined circumstances or situations require re-authentication.",
            "Description": "<VulnDiscussion>Without re-authentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user re-authenticate.\n\nIn addition to the re-authentication requirements associated with session locks, the application server security model may require re-authentication of individuals in other situations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change; \n(ii) When roles change; \n(iii) When security categories of information systems change; \n(iv) When the execution of privileged functions occurs; \n(v) After a fixed period of time; or \n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring re-authentication are privilege escalation and role changes.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Without re-authentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user re-authenticate.\n\nIn addition to the re-authentication requirements associated with session locks, the application server security model may require re-authentication of individuals in other situations, including (but not limited to) the following circumstances:\n\n(i) When authenticators change; \n(ii) When roles change; \n(iii) When security categories of information systems change; \n(iv) When the execution of privileged functions occurs; \n(v) After a fixed period of time; or \n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring re-authentication are privilege escalation and role changes.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server requires a user to re-authenticate when organization-defined circumstances or situations are met.\n\nIf the application server does not require a user to re-authenticate when organization-defined circumstances or situations are met, this is a finding.",
            "FixText": "Configure the application server to require a user to re-authenticate when organization-defined circumstances or situations are met.",
            "CCI": "V-57523,SV-71799,CCI-002038"
        },
        {
            "VulnID": "V-204799",
            "RuleID": "SV-204799r850854_rule",
            "StigID": "SRG-APP-000390-AS-000254",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000390",
            "RuleTitle": "The application server must require devices to re-authenticate when organization-defined circumstances or situations require re-authentication.",
            "Description": "<VulnDiscussion>Without re-authenticating devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nIn addition to the re-authentication requirements associated with session locks, organizations may require re-authentication of devices, including (but not limited to), the following other situations.\n\n(i) When authenticators change; \n(ii) When roles change; \n(iii) When security categories of information systems change; \n(iv) After a fixed period of time; or \n(v) Periodically.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Without re-authenticating devices, unidentified or unknown devices may be introduced, thereby facilitating malicious activity.\n\nIn addition to the re-authentication requirements associated with session locks, organizations may require re-authentication of devices, including (but not limited to), the following other situations.\n\n(i) When authenticators change; \n(ii) When roles change; \n(iii) When security categories of information systems change; \n(iv) After a fixed period of time; or \n(v) Periodically.\n\nFor distributed architectures (e.g., service-oriented architectures), the decisions regarding the validation of identification claims may be made by services separate from the services acting on those decisions. In such situations, it is necessary to provide the identification decisions (as opposed to the actual identifiers) to the services that need to act on those decisions.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server requires devices to re-authenticate when organization-defined circumstances or situations require re-authentication.\n\nIf the application server does not require a device to re-authenticate, this is a finding.",
            "FixText": "Configure the application server to require devices to re-authenticate when organization-defined circumstances or situations require re-authentication.",
            "CCI": "V-57525,SV-71801,CCI-002039"
        },
        {
            "VulnID": "V-204800",
            "RuleID": "SV-204800r864569_rule",
            "StigID": "SRG-APP-000391-AS-000239",
            "Severity": "high",
            "Cat": "CAT I",
            "Classification": "",
            "GroupTitle": "SRG-APP-000391",
            "RuleTitle": "The application server must accept Personal Identity Verification (PIV) credentials to access the management interface.",
            "Description": "<VulnDiscussion>The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.\n\nPIV credentials are only used in an unclassified environment.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as its use as a primary component of layered protection for national security systems.\n\nThe application server must support the use of PIV credentials to access the management interface and perform management functions.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The use of PIV credentials facilitates standardization and reduces the risk of unauthorized access.\n\nPIV credentials are only used in an unclassified environment.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as its use as a primary component of layered protection for national security systems.\n\nThe application server must support the use of PIV credentials to access the management interface and perform management functions.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to ensure the application server accepts PIV credentials to the management interface.\n\nIf PIV credentials are not accepted, this is a finding.",
            "FixText": "Configure the application server to accept PIV credentials to access the management interface.",
            "CCI": "V-57503,SV-71779,CCI-001953"
        },
        {
            "VulnID": "V-204801",
            "RuleID": "SV-204801r864570_rule",
            "StigID": "SRG-APP-000392-AS-000240",
            "Severity": "high",
            "Cat": "CAT I",
            "Classification": "",
            "GroupTitle": "SRG-APP-000392",
            "RuleTitle": "The application server must electronically verify Personal Identity Verification (PIV) credentials for access to the management interface.",
            "Description": "<VulnDiscussion>The use of Personal Identity Verification (PIV) credentials facilitates standardization and reduces the risk of unauthorized access.\n\nPIV credentials are only used in an unclassified environment.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as its use as a primary component of layered protection for national security systems.\n\nThe application server must electronically verify the use of PIV credentials to access the management interface and perform management functions.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The use of Personal Identity Verification (PIV) credentials facilitates standardization and reduces the risk of unauthorized access.\n\nPIV credentials are only used in an unclassified environment.\n\nDoD has mandated the use of the CAC to support identity management and personal authentication for systems covered under HSPD 12, as well as its use as a primary component of layered protection for national security systems.\n\nThe application server must electronically verify the use of PIV credentials to access the management interface and perform management functions.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to ensure the application server electronically verifies PIV credentials to the management interface.\n\nIf PIV credentials are not electronically verified, this is a finding.",
            "FixText": "Configure the application server to electronically verify PIV credentials to access the management interface.",
            "CCI": "V-57505,SV-71781,CCI-001954"
        },
        {
            "VulnID": "V-204804",
            "RuleID": "SV-204804r850857_rule",
            "StigID": "SRG-APP-000400-AS-000246",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000400",
            "RuleTitle": "The application server must prohibit the use of cached authenticators after an organization-defined time period.",
            "Description": "<VulnDiscussion>When the application server is using PKI authentication, a local revocation cache must be stored for instances when the revocation cannot be authenticated through the network, but if cached authentication information is out of date, the validity of the authentication information may be questionable.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "When the application server is using PKI authentication, a local revocation cache must be stored for instances when the revocation cannot be authenticated through the network, but if cached authentication information is out of date, the validity of the authentication information may be questionable.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation to ensure the application server prohibits the use of cached authenticators after an organization-defined timeframe.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to prohibit the use of cached authenticators after an organization-defined timeframe.",
            "CCI": "SV-71789,V-57513,CCI-002007"
        },
        {
            "VulnID": "V-204805",
            "RuleID": "SV-204805r850858_rule",
            "StigID": "SRG-APP-000401-AS-000243",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000401",
            "RuleTitle": "The application server, for PKI-based authentication, must implement a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.",
            "Description": "<VulnDiscussion>The cornerstone of the PKI is the private key used to encrypt or digitally sign information. The key by itself is a cryptographic value that does not contain specific user information.\n\nApplication servers must provide the capability to utilize and meet requirements of the DoD Enterprise PKI infrastructure for application authentication, but without configuring a local cache of revocation data, there is the potential to allow access to users who are no longer authorized (users with revoked certificates) when access through the network to the CA is not available.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The cornerstone of the PKI is the private key used to encrypt or digitally sign information. The key by itself is a cryptographic value that does not contain specific user information.\n\nApplication servers must provide the capability to utilize and meet requirements of the DoD Enterprise PKI infrastructure for application authentication, but without configuring a local cache of revocation data, there is the potential to allow access to users who are no longer authorized (users with revoked certificates) when access through the network to the CA is not available.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation to ensure the application server provides a PKI integration capability that implements a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.\n\nIf the application server is not configured to meet this requirement, this is a finding.",
            "FixText": "Configure the application server to implement a local cache of revocation data to support path discovery and validation in case of the inability to access revocation information via the network.",
            "CCI": "V-57511,SV-71787,CCI-001991"
        },
        {
            "VulnID": "V-204806",
            "RuleID": "SV-204806r850859_rule",
            "StigID": "SRG-APP-000402-AS-000247",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000402",
            "RuleTitle": "The application server must accept Personal Identity Verification (PIV) credentials from other federal agencies to access the management interface.",
            "Description": "<VulnDiscussion>Personal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.  PIV credentials are only used in an unclassified environment.\n\nAccess may be denied to authorized users if federal agency PIV credentials are not accepted to access the management interface.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Personal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.  PIV credentials are only used in an unclassified environment.\n\nAccess may be denied to authorized users if federal agency PIV credentials are not accepted to access the management interface.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server accepts PIV credentials from other federal agencies to access the management interface.\n\nIf the application server does not accept other federal agency PIV credentials to access the management interface, this is a finding.",
            "FixText": "Configure the application server to accept PIV credentials from other federal agencies to access the management interface.",
            "CCI": "V-57515,SV-71791,CCI-002009"
        },
        {
            "VulnID": "V-204807",
            "RuleID": "SV-204807r850860_rule",
            "StigID": "SRG-APP-000403-AS-000248",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000403",
            "RuleTitle": "The application server must electronically verify Personal Identity Verification (PIV) credentials from other federal agencies to access the management interface.",
            "Description": "<VulnDiscussion>Personal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.  PIV credentials are only used in an unclassified environment.\n\nIf PIV credentials are not electronically verified before accessing the management interface, unauthorized users may gain access to the system and data the user has not been granted access to.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Personal Identity Verification (PIV) credentials are those credentials issued by federal agencies that conform to FIPS Publication 201 and supporting guidance documents. OMB Memorandum 11-11 requires federal agencies to continue implementing the requirements specified in HSPD-12 to enable agency-wide use of PIV credentials.  PIV credentials are only used in an unclassified environment.\n\nIf PIV credentials are not electronically verified before accessing the management interface, unauthorized users may gain access to the system and data the user has not been granted access to.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "The CAC is the standard DoD authentication token;the PIV is the standard authentication token used by federal/civilian agencies.\n \nIf access to the application server is limited to DoD personnel accessing the system via CAC; and PIV access is not warranted or allowed as per the system security plan, the PIV requirement is NA.\n\nReview the application server documentation and configuration to determine if the application server electronically verifies PIV credentials from other federal agencies to access the management interface.\n\nIf the application server does not electronically verify other federal agency PIV credentials to access the management interface, this is a finding.",
            "FixText": "Configure the unclassified application server to electronically verify PIV credentials from other federal agencies before granting access to the management interface.",
            "CCI": "SV-71793,V-57517,CCI-002010"
        },
        {
            "VulnID": "V-204808",
            "RuleID": "SV-204808r850861_rule",
            "StigID": "SRG-APP-000404-AS-000249",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000404",
            "RuleTitle": "The application server must accept FICAM-approved third-party credentials.",
            "Description": "<VulnDiscussion>Access may be denied to legitimate users if FICAM-approved third-party credentials are not accepted.\n\nThis requirement typically applies to organizational information systems that are accessible to non-federal government agencies and other partners. This allows federal government relying parties to trust such credentials at their approved assurance levels.\n\nThird-party credentials are those credentials issued by non-federal government entities approved by the Federal Identity, Credential, and Access Management (FICAM) Trust Framework Solutions initiative.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Access may be denied to legitimate users if FICAM-approved third-party credentials are not accepted.\n\nThis requirement typically applies to organizational information systems that are accessible to non-federal government agencies and other partners. This allows federal government relying parties to trust such credentials at their approved assurance levels.\n\nThird-party credentials are those credentials issued by non-federal government entities approved by the Federal Identity, Credential, and Access Management (FICAM) Trust Framework Solutions initiative.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server accepts FICAM-approved third-party credentials.\n\nIf the application server does not accept FICAM-approved third-party credentials, this is a finding.",
            "FixText": "Configure the application server to accept FICAM-approved third-party credentials.",
            "CCI": "SV-71795,V-57519,CCI-002011"
        },
        {
            "VulnID": "V-204809",
            "RuleID": "SV-204809r850862_rule",
            "StigID": "SRG-APP-000405-AS-000250",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000405",
            "RuleTitle": "The application server must conform to FICAM-issued profiles.",
            "Description": "<VulnDiscussion>Without conforming to FICAM-issued profiles, the information system may not be interoperable with FICAM-authentication protocols, such as SAML 2.0 and OpenID 2.0.\n\nThis requirement addresses open identity management standards.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Without conforming to FICAM-issued profiles, the information system may not be interoperable with FICAM-authentication protocols, such as SAML 2.0 and OpenID 2.0.\n\nThis requirement addresses open identity management standards.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server conforms to FICAM-issued profiles.\n\nIf the application server does not conform to FICAM-issued profiles, this is a finding.",
            "FixText": "Configure the application server to conform to FICAM-issued profiles.",
            "CCI": "SV-71797,V-57521,CCI-002014"
        },
        {
            "VulnID": "V-204811",
            "RuleID": "SV-204811r850863_rule",
            "StigID": "SRG-APP-000427-AS-000264",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000427",
            "RuleTitle": "The application server must only allow the use of DoD PKI-established certificate authorities for verification of the establishment of protected sessions.",
            "Description": "<VulnDiscussion>Untrusted Certificate Authorities (CA) can issue certificates, but they may be issued by organizations or individuals that seek to compromise DoD systems or by organizations with insufficient security controls. If the CA used for verifying the certificate is not a DoD-approved CA, trust of this CA has not been established.\n\nThe DoD will only accept PKI certificates obtained from a DoD-approved internal or external certificate authority. Reliance on CAs for the establishment of secure sessions includes, for example, the use of SSL/TLS certificates.  The application server must only allow the use of DoD PKI-established certificate authorities for verification.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Untrusted Certificate Authorities (CA) can issue certificates, but they may be issued by organizations or individuals that seek to compromise DoD systems or by organizations with insufficient security controls. If the CA used for verifying the certificate is not a DoD-approved CA, trust of this CA has not been established.\n\nThe DoD will only accept PKI certificates obtained from a DoD-approved internal or external certificate authority. Reliance on CAs for the establishment of secure sessions includes, for example, the use of SSL/TLS certificates.  The application server must only allow the use of DoD PKI-established certificate authorities for verification.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server only allows the use of DoD PKI-established certificate authorities.\n\nIf the application server allows other certificate authorities for verification, this is a finding.",
            "FixText": "Configure the application server to allow the use of DoD PKI-established certificate authorities for verification of the establishment of protected sessions.",
            "CCI": "SV-71827,V-57551,CCI-002470"
        },
        {
            "VulnID": "V-204812",
            "RuleID": "SV-204812r850864_rule",
            "StigID": "SRG-APP-000428-AS-000265",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000428",
            "RuleTitle": "The application server must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.",
            "Description": "<VulnDiscussion>Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an application server.  Alternative physical protection measures include protected distribution systems.\n\nIn order to prevent unauthorized disclosure or modification of the information, application servers must protect data at rest by using cryptographic mechanisms.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an application server.  Alternative physical protection measures include protected distribution systems.\n\nIn order to prevent unauthorized disclosure or modification of the information, application servers must protect data at rest by using cryptographic mechanisms.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server implements cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.\n\nIf the application server does not implement cryptographic mechanisms to prevent unauthorized modification, this is a finding.",
            "FixText": "Configure the application server to implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest on organization-defined information system components.",
            "CCI": "SV-71833,V-57557,CCI-002475"
        },
        {
            "VulnID": "V-204813",
            "RuleID": "SV-204813r850865_rule",
            "StigID": "SRG-APP-000429-AS-000157",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000429",
            "RuleTitle": "The application must implement cryptographic mechanisms to prevent unauthorized disclosure of organization-defined information at rest on organization-defined information system components.",
            "Description": "<VulnDiscussion>Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an application server.  Alternative physical protection measures include protected distribution systems.\n\nIn order to prevent unauthorized disclosure or modification of the information, application servers must protect data at rest by using cryptographic mechanisms.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an application server.  Alternative physical protection measures include protected distribution systems.\n\nIn order to prevent unauthorized disclosure or modification of the information, application servers must protect data at rest by using cryptographic mechanisms.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server implements cryptographic mechanisms to prevent unauthorized disclosure of organization-defined information at rest on organization-defined information system components.\n\nIf the application server does not implement cryptographic mechanisms to prevent unauthorized disclosure, this is a finding.",
            "FixText": "Configure the application server to implement cryptographic mechanisms to prevent unauthorized disclosure of organization-defined information at rest on organization-defined information system components.",
            "CCI": "V-57559,SV-71835,CCI-002476"
        },
        {
            "VulnID": "V-204814",
            "RuleID": "SV-204814r850866_rule",
            "StigID": "SRG-APP-000435-AS-000069",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000435",
            "RuleTitle": "The application server, when a MAC I system, must be in a high-availability (HA) cluster.",
            "Description": "<VulnDiscussion>A MAC I system is a system that handles data vital to the organization's operational readiness or effectiveness of deployed or contingency forces.  A MAC I system must maintain the highest level of integrity and availability.  By HA clustering the application server, the hosted application and data are given a platform that is load-balanced and provided high-availability.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "A MAC I system is a system that handles data vital to the organization's operational readiness or effectiveness of deployed or contingency forces.  A MAC I system must maintain the highest level of integrity and availability.  By HA clustering the application server, the hosted application and data are given a platform that is load-balanced and provided high-availability.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "If the application server is not a MAC I system, this requirement is NA.\n\nReview the application server documentation and configuration to determine if the application server is part of an HA cluster.\n\nIf the application server is not part of an HA cluster, this is a finding.",
            "FixText": "If the application server is not a MAC I system, this requirement is NA.\n\nConfigure the application server to be part of an HA cluster.",
            "CCI": "SV-71807,V-57531,CCI-002385"
        },
        {
            "VulnID": "V-204815",
            "RuleID": "SV-204815r850867_rule",
            "StigID": "SRG-APP-000435-AS-000163",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000435",
            "RuleTitle": "The application server must protect against or limit the effects of all types of Denial of Service (DoS) attacks by employing organization-defined security safeguards.",
            "Description": "<VulnDiscussion>DoS is a condition when a resource is not available for legitimate users.  When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.  To reduce the possibility or effect of a DoS, the application server must employ defined security safeguards.  These safeguards will be determined by the placement of the application server and the type of applications being hosted within the application server framework.\n\nThere are many examples of technologies that exist to limit or, in some cases, eliminate the effects of DoS attacks (e.g., limiting processes or restricting the number of sessions the application opens at one time). Employing increased capacity and bandwidth, combined with service redundancy or clustering, may reduce the susceptibility to some DoS attacks.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "DoS is a condition when a resource is not available for legitimate users.  When this occurs, the organization either cannot accomplish its mission or must operate at degraded capacity.  To reduce the possibility or effect of a DoS, the application server must employ defined security safeguards.  These safeguards will be determined by the placement of the application server and the type of applications being hosted within the application server framework.\n\nThere are many examples of technologies that exist to limit or, in some cases, eliminate the effects of DoS attacks (e.g., limiting processes or restricting the number of sessions the application opens at one time). Employing increased capacity and bandwidth, combined with service redundancy or clustering, may reduce the susceptibility to some DoS attacks.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server can protect against or limit the effects of all types of Denial of Service (DoS) attacks by employing defined security safeguards.\n\nIf the application server cannot be configured to protect against or limit the effects of all types of DoS, this is a finding.",
            "FixText": "Configure the application server to protect against or limit the effects of all types of Denial of Service (DoS) attacks by employing defined security safeguards.",
            "CCI": "V-57529,SV-71805,CCI-002385"
        },
        {
            "VulnID": "V-204816",
            "RuleID": "SV-204816r850868_rule",
            "StigID": "SRG-APP-000439-AS-000155",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000439",
            "RuleTitle": "The application server must protect the confidentiality and integrity of transmitted information through the use of an approved TLS version.",
            "Description": "<VulnDiscussion>Preventing the disclosure of transmitted information requires that the application server take measures to employ some form of cryptographic mechanism in order to protect the information during transmission.  This is usually achieved through the use of Transport Layer Security (TLS).\n\nTransmission of data can take place between the application server and a large number of devices/applications external to the application server.  Examples are a web client used by a user, a backend database, a log server, or other application servers in an application server cluster.\n\nIf data is transmitted unencrypted, the data then becomes vulnerable to disclosure.  The disclosure may reveal user identifier/password combinations, website code revealing business logic, or other user personal information.\n\nTLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Preventing the disclosure of transmitted information requires that the application server take measures to employ some form of cryptographic mechanism in order to protect the information during transmission.  This is usually achieved through the use of Transport Layer Security (TLS).\n\nTransmission of data can take place between the application server and a large number of devices/applications external to the application server.  Examples are a web client used by a user, a backend database, a log server, or other application servers in an application server cluster.\n\nIf data is transmitted unencrypted, the data then becomes vulnerable to disclosure.  The disclosure may reveal user identifier/password combinations, website code revealing business logic, or other user personal information.\n\nTLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and deployed configuration to determine which version of TLS is being used.\n\nIf the application server is not using TLS to maintain the confidentiality and integrity of transmitted information or non-FIPS-approved SSL versions are enabled, this is a finding.",
            "FixText": "Configure the application server to use a FIPS-2 approved TLS version to maintain the confidentiality and integrity of transmitted information and to disable all non-FIPS-approved SSL versions.",
            "CCI": "V-57533,SV-71809,CCI-002418"
        },
        {
            "VulnID": "V-204817",
            "RuleID": "SV-204817r850869_rule",
            "StigID": "SRG-APP-000439-AS-000274",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000439",
            "RuleTitle": "The application server must remove all export ciphers to protect the confidentiality and integrity of transmitted information.",
            "Description": "<VulnDiscussion>During the initial setup of a Transport Layer Security (TLS) connection to the application server, the client sends a list of supported cipher suites in order of preference.  The application server will reply with the cipher suite it will use for communication from the client list.  If an attacker can intercept the submission of cipher suites to the application server and place, as the preferred cipher suite, a weak export suite, the encryption used for the session becomes easy for the attacker to break, often within minutes to hours.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "During the initial setup of a Transport Layer Security (TLS) connection to the application server, the client sends a list of supported cipher suites in order of preference.  The application server will reply with the cipher suite it will use for communication from the client list.  If an attacker can intercept the submission of cipher suites to the application server and place, as the preferred cipher suite, a weak export suite, the encryption used for the session becomes easy for the attacker to break, often within minutes to hours.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and deployed configuration to determine if export ciphers are removed.\n\nIf the application server does not have the export ciphers removed, this is a finding.",
            "FixText": "Configure the application server to have export ciphers removed.",
            "CCI": "SV-75833,V-61351,CCI-002418"
        },
        {
            "VulnID": "V-204818",
            "RuleID": "SV-204818r850870_rule",
            "StigID": "SRG-APP-000440-AS-000167",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000440",
            "RuleTitle": "The application server must employ approved cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission.",
            "Description": "<VulnDiscussion>Preventing the disclosure or modification of transmitted information requires that application servers take measures to employ approved cryptography in order to protect the information during transmission over the network. This is usually achieved through the use of Transport Layer Security (TLS), SSL VPN, or IPSec tunnel.\n\nIf data in transit is unencrypted, it is vulnerable to disclosure and modification. If approved cryptographic algorithms are not used, encryption strength cannot be assured.\n\nTLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Preventing the disclosure or modification of transmitted information requires that application servers take measures to employ approved cryptography in order to protect the information during transmission over the network. This is usually achieved through the use of Transport Layer Security (TLS), SSL VPN, or IPSec tunnel.\n\nIf data in transit is unencrypted, it is vulnerable to disclosure and modification. If approved cryptographic algorithms are not used, encryption strength cannot be assured.\n\nTLS must be enabled and non-FIPS-approved SSL versions must be disabled.  NIST SP 800-52 specifies the preferred configurations for government systems.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation and configuration to determine if the application server employs approved cryptographic mechanisms to prevent unauthorized disclosure of information and/or detect changes to information during transmission.\n\nIf the application server does not employ approved cryptographic mechanisms, this is a finding.",
            "FixText": "Configure the application server to use AES 128 or AES 256 encryption for data in transit.",
            "CCI": "V-57535,SV-71811,CCI-002421"
        },
        {
            "VulnID": "V-204819",
            "RuleID": "SV-204819r850871_rule",
            "StigID": "SRG-APP-000441-AS-000258",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000441",
            "RuleTitle": "The application server must maintain the confidentiality and integrity of information during preparation for transmission.",
            "Description": "<VulnDiscussion>Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nAn example of this would be an SMTP queue.  This queue may be part of the application server so error messages from the server can be sent to system administrators, or SMTP functionality can be added to hosted applications by developers.\n\nAny modules used by the application server that queue data before transmission must maintain the confidentiality and integrity of the information before the data is transmitted.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nAn example of this would be an SMTP queue.  This queue may be part of the application server so error messages from the server can be sent to system administrators, or SMTP functionality can be added to hosted applications by developers.\n\nAny modules used by the application server that queue data before transmission must maintain the confidentiality and integrity of the information before the data is transmitted.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and deployed configuration to determine if the application server maintains the confidentiality and integrity of information during preparation before transmission.\n\nIf the confidentiality and integrity is not maintained, this is a finding.",
            "FixText": "Configure the application server to maintain the confidentiality and integrity of information during preparation for transmission.",
            "CCI": "V-57537,SV-71813,CCI-002420"
        },
        {
            "VulnID": "V-204820",
            "RuleID": "SV-204820r850872_rule",
            "StigID": "SRG-APP-000442-AS-000259",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000442",
            "RuleTitle": "The application server must maintain the confidentiality and integrity of information during reception.",
            "Description": "<VulnDiscussion>Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking.  These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nProtecting the confidentiality and integrity of received information requires that application servers take measures to employ approved cryptography in order to protect the information during transmission over the network. This is usually achieved through the use of Transport Layer Security (TLS), SSL VPN, or IPSEC tunnel.\n\nThe application server must utilize approved encryption when receiving transmitted data.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking.  These unauthorized disclosures or modifications compromise the confidentiality or integrity of the information.\n\nProtecting the confidentiality and integrity of received information requires that application servers take measures to employ approved cryptography in order to protect the information during transmission over the network. This is usually achieved through the use of Transport Layer Security (TLS), SSL VPN, or IPSEC tunnel.\n\nThe application server must utilize approved encryption when receiving transmitted data.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server configuration to determine if the server is using a transmission method that maintains the confidentiality and integrity of information during reception.\n\nIf a transmission method is not being used that maintains the confidentiality and integrity of the data during reception, this is a finding.",
            "FixText": "Configure the application server to utilize a transmission method that maintains the confidentiality and integrity of information during reception.",
            "CCI": "V-57539,SV-71815,CCI-002422"
        },
        {
            "VulnID": "V-204821",
            "RuleID": "SV-204821r850873_rule",
            "StigID": "SRG-APP-000447-AS-000273",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000447",
            "RuleTitle": "The application server must behave in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.",
            "Description": "<VulnDiscussion>Invalid user input occurs when a user inserts data or characters into an applications data entry field and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nApplication servers must ensure their management interfaces perform data input validation checks.  When invalid data is entered, the application server must behave in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.  An example of a predictable behavior is trapping the data, logging the invalid data for forensic analysis if necessary, and continuing operation in a safe and secure manner.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Invalid user input occurs when a user inserts data or characters into an applications data entry field and the application is unprepared to process that data. This results in unanticipated application behavior potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nApplication servers must ensure their management interfaces perform data input validation checks.  When invalid data is entered, the application server must behave in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.  An example of a predictable behavior is trapping the data, logging the invalid data for forensic analysis if necessary, and continuing operation in a safe and secure manner.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to determine if the management interface behaves in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.\n\nIf the application server does not meet this requirement, this is a finding.",
            "FixText": "Configure the application server management interface to behave in a predictable and documented manner that reflects organizational and system objectives when invalid inputs are received.",
            "CCI": "V-57565,SV-71841,CCI-002754"
        },
        {
            "VulnID": "V-204822",
            "RuleID": "SV-204822r850874_rule",
            "StigID": "SRG-APP-000454-AS-000268",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000454",
            "RuleTitle": "The application server must remove organization-defined software components after updated versions have been installed.",
            "Description": "<VulnDiscussion>Installation of patches and updates is performed when there are errors or security vulnerabilities in the current release of the software.  When previous versions of software components are not removed from the application server after updates have been installed, an attacker may use the older components to exploit the system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Installation of patches and updates is performed when there are errors or security vulnerabilities in the current release of the software.  When previous versions of software components are not removed from the application server after updates have been installed, an attacker may use the older components to exploit the system.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if organization-defined software components are removed after updated versions have been installed.\n\nIf organization-defined software components are not removed after updated versions have been installed, this is a finding.",
            "FixText": "Configure the application server to remove organization-defined software components after updated versions have been installed.",
            "CCI": "SV-71839,V-57563,CCI-002617"
        },
        {
            "VulnID": "V-204823",
            "RuleID": "SV-204823r850875_rule",
            "StigID": "SRG-APP-000456-AS-000266",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000456",
            "RuleTitle": "The application server must install security-relevant software updates within the time period directed by an authoritative source (e.g. IAVM, CTOs, DTMs, and STIGs).",
            "Description": "<VulnDiscussion>Security flaws with software applications are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes) to production systems after thorough testing of the patches within a lab environment. Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Security flaws with software applications are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes) to production systems after thorough testing of the patches within a lab environment. Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server checks with a patch management system to install security-relevant software updates within a timeframe directed by an authoritative source.\n\nIf the application server does not install security-relevant patches within the time period directed by the authoritative source, this is a finding.",
            "FixText": "Configure the application server to use a patch management system to ensure security-relevant updates are installed within the time period directed by the authoritative source.",
            "CCI": "SV-71837,V-57561,CCI-002605"
        },
        {
            "VulnID": "V-204824",
            "RuleID": "SV-204824r508029_rule",
            "StigID": "SRG-APP-000495-AS-000220",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000495",
            "RuleTitle": "The application server must generate log records when successful/unsuccessful attempts to modify privileges occur.",
            "Description": "<VulnDiscussion>Changing privileges of a subject/object may cause a subject/object to gain or lose capabilities.  When successful/unsuccessful changes are made, the event needs to be logged.  By logging the event, the modification or attempted modification can be investigated to determine if it was performed inadvertently or maliciously.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Changing privileges of a subject/object may cause a subject/object to gain or lose capabilities.  When successful/unsuccessful changes are made, the event needs to be logged.  By logging the event, the modification or attempted modification can be investigated to determine if it was performed inadvertently or maliciously.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and the system configuration to determine if the application server generates log records when successful/unsuccessful attempts are made to modify privileges.\n\nIf log records are not generated, this is a finding.",
            "FixText": "Configure the application server to generate log records when privileges are successfully or unsuccessfully modified.",
            "CCI": "SV-71711,V-57439,CCI-000172"
        },
        {
            "VulnID": "V-204825",
            "RuleID": "SV-204825r508029_rule",
            "StigID": "SRG-APP-000499-AS-000224",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000499",
            "RuleTitle": "The application server must generate log records when successful/unsuccessful attempts to delete privileges occur.",
            "Description": "<VulnDiscussion>Deleting privileges of a subject/object may cause a subject/object to gain or lose capabilities.  When successful and unsuccessful privilege deletions are made, the events need to be logged.  By logging the event, the modification or attempted modification can be investigated to determine if it was performed inadvertently or maliciously.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Deleting privileges of a subject/object may cause a subject/object to gain or lose capabilities.  When successful and unsuccessful privilege deletions are made, the events need to be logged.  By logging the event, the modification or attempted modification can be investigated to determine if it was performed inadvertently or maliciously.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and the system configuration to determine if the application server generates log records when successful and unsuccessful attempts are made to delete privileges.\n\nIf log records are not generated, this is a finding.",
            "FixText": "Configure the application server to generate log records when privileges are successfully or unsuccessfully deleted.",
            "CCI": "SV-71713,V-57441,CCI-000172"
        },
        {
            "VulnID": "V-204826",
            "RuleID": "SV-204826r508029_rule",
            "StigID": "SRG-APP-000503-AS-000228",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000503",
            "RuleTitle": "The application server must generate log records when successful/unsuccessful logon attempts occur.",
            "Description": "<VulnDiscussion>Logging the access to the application server allows the system administrators to monitor user accounts.  By logging successful/unsuccessful logons, the system administrator can determine if an account is compromised (e.g., frequent logons) or is in the process of being compromised (e.g., frequent failed logons) and can take actions to thwart the attack.\n\nLogging successful logons can also be used to determine accounts that are no longer in use.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Logging the access to the application server allows the system administrators to monitor user accounts.  By logging successful/unsuccessful logons, the system administrator can determine if an account is compromised (e.g., frequent logons) or is in the process of being compromised (e.g., frequent failed logons) and can take actions to thwart the attack.\n\nLogging successful logons can also be used to determine accounts that are no longer in use.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review product documentation and the system configuration to determine if the application server generates log records on successful and unsuccessful logon attempts by users.\n\nIf logon attempts do not generate log records, this is a finding.",
            "FixText": "Configure the application server to generate log records when successful/unsuccessful logon attempts are made by users.",
            "CCI": "SV-71715,V-57443,CCI-000172"
        },
        {
            "VulnID": "V-204827",
            "RuleID": "SV-204827r508029_rule",
            "StigID": "SRG-APP-000504-AS-000229",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000504",
            "RuleTitle": "The application server must generate log records for privileged activities.",
            "Description": "<VulnDiscussion>Without generating log records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.\n\nPrivileged activities would occur through the management interface.  This interface can be web-based or can be command line utilities.  Whichever method is utilized by the application server, these activities must be logged.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Without generating log records that are specific to the security and mission needs of the organization, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.\n\nPrivileged activities would occur through the management interface.  This interface can be web-based or can be command line utilities.  Whichever method is utilized by the application server, these activities must be logged.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and the system configuration to determine if the application server generates log records for privileged activities.\n\nIf log records are not generated for privileged activities, this is a finding.",
            "FixText": "Configure the application server to generate log records for privileged activities.",
            "CCI": "V-57445,SV-71717,CCI-000172"
        },
        {
            "VulnID": "V-204828",
            "RuleID": "SV-204828r508029_rule",
            "StigID": "SRG-APP-000505-AS-000230",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000505",
            "RuleTitle": "The application must generate log records showing starting and ending times for user access to the application server management interface.",
            "Description": "<VulnDiscussion>Determining when a user has accessed the management interface is important to determine the timeline of events when a security incident occurs.  Generating these events, especially if the management interface is accessed via a stateless protocol like HTTP, the log events will be generated when the user performs a logon (start) and when the user performs a logoff (end).  Without these events, the user and later investigators cannot determine the sequence of events and therefore cannot determine what may have happened and by whom it may have been done.\n\nThe generation of start and end times within log events allow the user to perform their due diligence in the event of a security breach.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Determining when a user has accessed the management interface is important to determine the timeline of events when a security incident occurs.  Generating these events, especially if the management interface is accessed via a stateless protocol like HTTP, the log events will be generated when the user performs a logon (start) and when the user performs a logoff (end).  Without these events, the user and later investigators cannot determine the sequence of events and therefore cannot determine what may have happened and by whom it may have been done.\n\nThe generation of start and end times within log events allow the user to perform their due diligence in the event of a security breach.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and the system configuration to determine if the application server generates log records showing starting and ending times for user access to the management interface.\n\nIf log records are not generated showing starting and ending times of user access to the management interface, this is a finding.",
            "FixText": "Configure the application server to generate log records showing starting and ending times of user access to the management interface.",
            "CCI": "SV-71757,V-57481,CCI-000172"
        },
        {
            "VulnID": "V-204829",
            "RuleID": "SV-204829r508029_rule",
            "StigID": "SRG-APP-000506-AS-000231",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000506",
            "RuleTitle": "The application server must generate log records when concurrent logons from different workstations occur to the application server management interface.",
            "Description": "<VulnDiscussion>Being able to work on a system through multiple views into the application allows a user to work more efficiently and more accurately.  Before environments with windowing capabilities or multiple desktops, a user would log onto the application from different workstations or terminals.  With today's workstations, this is no longer necessary and may signal a compromised session or user account.\n\nWhen concurrent logons are made from different workstations to the management interface, a log record needs to be generated.  This allows the system administrator to investigate the incident and to be aware of the incident.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Being able to work on a system through multiple views into the application allows a user to work more efficiently and more accurately.  Before environments with windowing capabilities or multiple desktops, a user would log onto the application from different workstations or terminals.  With today's workstations, this is no longer necessary and may signal a compromised session or user account.\n\nWhen concurrent logons are made from different workstations to the management interface, a log record needs to be generated.  This allows the system administrator to investigate the incident and to be aware of the incident.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and the system configuration to determine if the application server generates log records showing concurrent logons from different workstations to the management interface.\n\nIf concurrent logons from different workstations are not logged, this is a finding.",
            "FixText": "Configure the application server to generate log records showing concurrent logons from different workstations to the management interface.",
            "CCI": "SV-71759,V-57483,CCI-000172"
        },
        {
            "VulnID": "V-204830",
            "RuleID": "SV-204830r508029_rule",
            "StigID": "SRG-APP-000509-AS-000234",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000509",
            "RuleTitle": "The application server must generate log records for all account creations, modifications, disabling, and termination events.",
            "Description": "<VulnDiscussion>The maintenance of user accounts is a key activity within the system to determine access and privileges.  Through changes to accounts, an attacker can create an account for persistent access, modify an account to elevate privileges or terminate/disable an account(s) to cause a DoS for user(s).  To be able to track and investigate these actions, log records must be generated for any account modification functions.\n\nApplication servers either provide a local user store, or they can integrate with enterprise user stores like LDAP.  As such, the application server must be able to generate log records on account creation, modification, disabling, and termination.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "The maintenance of user accounts is a key activity within the system to determine access and privileges.  Through changes to accounts, an attacker can create an account for persistent access, modify an account to elevate privileges or terminate/disable an account(s) to cause a DoS for user(s).  To be able to track and investigate these actions, log records must be generated for any account modification functions.\n\nApplication servers either provide a local user store, or they can integrate with enterprise user stores like LDAP.  As such, the application server must be able to generate log records on account creation, modification, disabling, and termination.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and the system configuration to determine if the application server generates log records when accounts are created, modified, disabled, or terminated.\n\nIf the application server does not generate log records for account creation, modification, disabling, and termination, this is a finding.",
            "FixText": "Configure the application server to generate log records when accounts are created, modified, disabled, or terminated.",
            "CCI": "SV-71761,V-57485,CCI-000172"
        },
        {
            "VulnID": "V-204831",
            "RuleID": "SV-204831r850876_rule",
            "StigID": "SRG-APP-000514-AS-000136",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000514",
            "RuleTitle": "Application servers must use NIST-approved or NSA-approved key management technology and processes.",
            "Description": "<VulnDiscussion>An asymmetric encryption key must be protected during transmission. The public portion of an asymmetric key pair can be freely distributed without fear of compromise, and the private portion of the key must be protected. The application server will provide software libraries that applications can programmatically utilize to encrypt and decrypt information. These application server libraries must use NIST-approved or NSA-approved key management technology and processes when producing, controlling, or distributing symmetric and asymmetric keys.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "An asymmetric encryption key must be protected during transmission. The public portion of an asymmetric key pair can be freely distributed without fear of compromise, and the private portion of the key must be protected. The application server will provide software libraries that applications can programmatically utilize to encrypt and decrypt information. These application server libraries must use NIST-approved or NSA-approved key management technology and processes when producing, controlling, or distributing symmetric and asymmetric keys.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server configuration and the NIST FIPS certificate to validate the application server uses NIST-approved or NSA-approved key management technology and processes when producing, controlling or distributing symmetric and asymmetric keys.\n\nIf the application server does not use this NIST-approved or NSA-approved key management technology and processes, this is a finding.",
            "FixText": "Configure the application server to utilize NIST-approved or NSA-approved key management technology when the application server produces, controls, and distributes symmetric and asymmetric cryptographic keys.",
            "CCI": "V-57543,SV-71819,CCI-002450"
        },
        {
            "VulnID": "V-204832",
            "RuleID": "SV-204832r850877_rule",
            "StigID": "SRG-APP-000514-AS-000137",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000514",
            "RuleTitle": "The application server must use DoD- or CNSS-approved PKI Class 3 or Class 4 certificates.",
            "Description": "<VulnDiscussion>Class 3 PKI certificates are used for servers and software signing rather than for identifying individuals. Class 4 certificates are used for business-to-business transactions. Utilizing unapproved certificates not issued or approved by DoD or CNS creates an integrity risk. The application server must utilize approved DoD or CNS Class 3 or Class 4 certificates for software signing and business-to-business transactions.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Class 3 PKI certificates are used for servers and software signing rather than for identifying individuals. Class 4 certificates are used for business-to-business transactions. Utilizing unapproved certificates not issued or approved by DoD or CNS creates an integrity risk. The application server must utilize approved DoD or CNS Class 3 or Class 4 certificates for software signing and business-to-business transactions.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server configuration to determine if the application server utilizes approved PKI Class 3 or Class 4 certificates.\n\nIf the application server is not configured to use approved DoD or CNS certificates, this is a finding.",
            "FixText": "Configure the application server to use DoD- or CNSS-approved Class 3 or Class 4 PKI certificates.",
            "CCI": "SV-71821,V-57545,CCI-002450"
        },
        {
            "VulnID": "V-204833",
            "RuleID": "SV-204833r850878_rule",
            "StigID": "SRG-APP-000515-AS-000203",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000515",
            "RuleTitle": "The application server must, at a minimum, transfer the logs of interconnected systems in real time, and transfer the logs of standalone systems weekly.",
            "Description": "<VulnDiscussion>Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  Protecting log data is important during a forensic investigation to ensure investigators can track and understand what may have occurred.  Off-loading should be set up as a scheduled task but can be configured to be run manually, if other processes during the off-loading are manual.\n\nOff-loading is a common process in information systems with limited log storage capacity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Information stored in one location is vulnerable to accidental or incidental deletion or alteration.  Protecting log data is important during a forensic investigation to ensure investigators can track and understand what may have occurred.  Off-loading should be set up as a scheduled task but can be configured to be run manually, if other processes during the off-loading are manual.\n\nOff-loading is a common process in information systems with limited log storage capacity.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Verify the log records are being off-loaded, at a minimum of real time for interconnected systems and weekly for standalone systems.\n\nIf the application server is not meeting these requirements, this is a finding.",
            "FixText": "Configure the application server to off-load interconnected systems in real time and standalone systems weekly.",
            "CCI": "SV-71697,V-57425,CCI-001851"
        },
        {
            "VulnID": "V-204834",
            "RuleID": "SV-204834r508029_rule",
            "StigID": "SRG-APP-000516-AS-000237",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000516",
            "RuleTitle": "The application server must be configured in accordance with the security configuration settings based on DoD security configuration or implementation guidance, including STIGs, NSA configuration guides, CTOs, and DTMs.",
            "Description": "<VulnDiscussion>Configuring the application to implement organization-wide security implementation guides and security checklists ensures compliance with federal standards and establishes a common security baseline across DoD that reflects the most restrictive security posture consistent with operational requirements.\n\nConfiguration settings are the set of parameters that can be changed that affect the security posture and/or functionality of the system. Security-related parameters are those parameters impacting the security state of the application, including the parameters required to satisfy other security control requirements.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Configuring the application to implement organization-wide security implementation guides and security checklists ensures compliance with federal standards and establishes a common security baseline across DoD that reflects the most restrictive security posture consistent with operational requirements.\n\nConfiguration settings are the set of parameters that can be changed that affect the security posture and/or functionality of the system. Security-related parameters are those parameters impacting the security state of the application, including the parameters required to satisfy other security control requirements.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review the application server documentation and configuration to determine if the application server is configured in accordance with the security configuration settings based on DoD security configuration or implementation guidance, including STIGs, NSA configuration guides, CTOs, and DTMs.\n\nIf the application server is not configured in accordance with security configuration settings, this is a finding.",
            "FixText": "Configure the application server to be in accordance with the security configuration settings based on DoD security configuration or implementation guidance, including STIGs, NSA configuration guides, CTOs, and DTMs.",
            "CCI": "SV-71775,V-57499,CCI-000366"
        },
        {
            "VulnID": "V-240925",
            "RuleID": "SV-240925r850880_rule",
            "StigID": "SRG-APP-000416-AS-000140",
            "Severity": "medium",
            "Cat": "CAT II",
            "Classification": "",
            "GroupTitle": "SRG-APP-000416",
            "RuleTitle": "The application server must implement NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.",
            "Description": "<VulnDiscussion>Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.\n\nNSA has developed Type 1 algorithms for protecting classified information. The Committee on National Security Systems (CNSS) National Information Assurance Glossary (CNSS Instruction No. 4009) defines Type 1 products as:\n\n\"Cryptographic equipment, assembly or component classified or certified by NSA for encrypting and decrypting classified and sensitive national security information when appropriately keyed. Developed using established NSA business processes and containing NSA-approved algorithms \nare used to protect systems requiring the most stringent protection mechanisms.\" \n\nNSA-approved cryptography is required to be used for classified information system processing.\n\nThe application server must utilize NSA-approved encryption modules when protecting classified data. This means using AES and other approved encryption modules.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>",
            "VulnDiscussion": "Cryptography is only as strong as the encryption modules/algorithms employed to encrypt the data. Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data.\n\nNSA has developed Type 1 algorithms for protecting classified information. The Committee on National Security Systems (CNSS) National Information Assurance Glossary (CNSS Instruction No. 4009) defines Type 1 products as:\n\n\"Cryptographic equipment, assembly or component classified or certified by NSA for encrypting and decrypting classified and sensitive national security information when appropriately keyed. Developed using established NSA business processes and containing NSA-approved algorithms \nare used to protect systems requiring the most stringent protection mechanisms.\" \n\nNSA-approved cryptography is required to be used for classified information system processing.\n\nThe application server must utilize NSA-approved encryption modules when protecting classified data. This means using AES and other approved encryption modules.",
            "FalsePositives": "",
            "FalseNegatives": "",
            "Documentable": "false",
            "Mitigations": "",
            "SeverityOverrideGuidance": "",
            "PotentialImpacts": "",
            "ThirdPartyTools": "",
            "MitigationControl": "",
            "Responsibility": "",
            "IAControls": "",
            "CheckText": "Review application server documentation to verify that the application server is using NSA-approved cryptography to protect classified data and applications resident on the device.\n\nIf the application server is not using NSA-approved cryptography for classified data and applications, this is a finding.",
            "FixText": "Configure the application server to utilize NSA-approved cryptography to protect classified information.",
            "CCI": "SV-71817,V-57541,CCI-002450"
        }
    ]
}