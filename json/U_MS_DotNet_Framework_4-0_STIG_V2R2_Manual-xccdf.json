{"Title": "Microsoft DotNet Framework 4.0 Security Technical Implementation Guide", "Description": "This Security Technical Implementation Guide is published as a tool to improve the security of Department of Defense (DoD) information systems. The requirements are derived from the National Institute of Standards and Technology (NIST) 800-53 and related documents. Comments or proposed revisions to this document should be sent via email to the following address: disa.stig_spt@mail.mil.", "Version": "2", "Release": "2 ", "BenchmarkDate": "27 Oct 2022", "ReleaseInfo": "Release: 2 Benchmark Date: 27 Oct 2022", "Source": "STIG.DOD.MIL", "Notice": "terms-of-use", "Rules": [{"VulnID": "V-225223", "RuleID": "SV-225223r615940_rule", "StigID": "APPNET0031", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000175", "RuleTitle": "Digital signatures assigned to strongly named assemblies must be verified.", "Description": "<VulnDiscussion>A strong name consists of the assembly's identity, simple text name, version number, and culture information (if provided)\u2014plus a public key and a digital signature.  Strong names serve to identify the author of the code.  If digital signatures used to sign strong name assemblies are not verified, any self signed code can be impersonated.  This can lead to a loss of system integrity. </VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "A strong name consists of the assembly's identity, simple text name, version number, and culture information (if provided)\u2014plus a public key and a digital signature.  Strong names serve to identify the author of the code.  If digital signatures used to sign strong name assemblies are not verified, any self signed code can be impersonated.  This can lead to a loss of system integrity. ", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Use regedit to review the Windows registry key \nHKLM\\Software\\Microsoft\\StrongName\\Verification. \nThere should be no assemblies or hash values listed under this registry key. If the StrongName\\Verification key does not exist, this is not a finding.\n\nIf there are assemblies or hash values listed in this key, each value represents a distinct application assembly that does not have the application strong name verified.  \n\nIf any assemblies are listed as omitting strong name verification in a production environment, this is a finding.\n\nIf any assemblies are listed as omitting strong name verification in a development or test environment and the IAO has not provided documented approvals, this is a finding.", "FixText": "Use regedit to remove the values stored in Windows registry key HKLM\\Software\\Microsoft\\StrongName\\Verification. There should be no assemblies or hash values listed under this registry key.\n\nAll assemblies must require strong name verification in a production environment.\n\nStrong name assemblies that do not require verification in a development or test environment must have documented approvals from the IAO.", "CCI": "SV-7438,V-7055,CCI-000185"}, {"VulnID": "V-225224", "RuleID": "SV-225224r615940_rule", "StigID": "APPNET0046", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000175", "RuleTitle": "The Trust Providers Software Publishing State must be set to 0x23C00.", "Description": "<VulnDiscussion>Microsoft Windows operating systems provide a feature called Authenticode.  Authenticode technology and its underlying code signing mechanisms serve to provide a structure to identify software publishers and ensure that software applications have not been tampered with.  Authenticode technology relies on digital certificates and is based on Public Key Cryptography Standards (PKCS) #7 (encrypted key specification), PKCS #10 (certificate request formats), X.509 (certificate specification), and Secure Hash Algorithm (SHA) and MD5 hash algorithms.\n\nThe manner in which the Authenticode technology validates a certificate and determines what is considered a valid certificate can be modified to meet the mission of the Microsoft Windows system.  Each facade of certificate validation is controlled through the bits that makeup the hexadecimal value for the Authenticode setting.  An improper setting will allow non-valid certificates to be accepted and can put the integrity of the system into jeopardy.\n\nThe hexadecimal value of 0x23C00 will implement the following certificate enforcement policy:\n- Trust the Test Root = FALSE\n- Use expiration date on certificates = TRUE\n- Check the revocation list = TRUE\n- Offline revocation server OK (Individual) = TRUE\n- Offline revocation server OK (Commercial) = TRUE\n- Java offline revocation server OK (Individual) = TRUE\n- Java offline revocation server OK (Commercial) = TRUE\n- Invalidate version 1 signed objects = FALSE\n- Check the revocation list on Time Stamp Signer = FALSE\n- Only trust items found in the Trust DB = FALSE</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Microsoft Windows operating systems provide a feature called Authenticode.  Authenticode technology and its underlying code signing mechanisms serve to provide a structure to identify software publishers and ensure that software applications have not been tampered with.  Authenticode technology relies on digital certificates and is based on Public Key Cryptography Standards (PKCS) #7 (encrypted key specification), PKCS #10 (certificate request formats), X.509 (certificate specification), and Secure Hash Algorithm (SHA) and MD5 hash algorithms.\n\nThe manner in which the Authenticode technology validates a certificate and determines what is considered a valid certificate can be modified to meet the mission of the Microsoft Windows system.  Each facade of certificate validation is controlled through the bits that makeup the hexadecimal value for the Authenticode setting.  An improper setting will allow non-valid certificates to be accepted and can put the integrity of the system into jeopardy.\n\nThe hexadecimal value of 0x23C00 will implement the following certificate enforcement policy:\n- Trust the Test Root = FALSE\n- Use expiration date on certificates = TRUE\n- Check the revocation list = TRUE\n- Offline revocation server OK (Individual) = TRUE\n- Offline revocation server OK (Commercial) = TRUE\n- Java offline revocation server OK (Individual) = TRUE\n- Java offline revocation server OK (Commercial) = TRUE\n- Invalidate version 1 signed objects = FALSE\n- Check the revocation list on Time Stamp Signer = FALSE\n- Only trust items found in the Trust DB = FALSE", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If the system or application being reviewed is SIPR based, this finding is NA.\n\nThis check must be performed for each user on the system. \n\nUse regedit to locate \"HKEY_USER\\[UNIQUE USER SID VALUE]\\Software\\Microsoft\\Windows\\CurrentVersion\\WinTrust\\Trust Providers\\Software Publishing\\State\".  \n\nIf the State value for any user is not set to the hexadecimal value of 0x23C00, this is a finding.", "FixText": "This fix must be performed for each user on the system.\n\nUsing regedit, change the hexadecimal value of the \"HKEY_USER\\[UNIQUE USER SID VALUE]\\Software\\Microsoft\\Windows\\CurrentVersion\\WinTrust\\Trust Providers\\Software Publishing\\State\" registry key to 0x23C00.", "CCI": "SV-7444,V-7061,CCI-000185"}, {"VulnID": "V-225225", "RuleID": "SV-225225r615940_rule", "StigID": "APPNET0048", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000175", "RuleTitle": "Developer certificates used with the .NET Publisher Membership Condition must be approved by the IAO.", "Description": "<VulnDiscussion>A .Net assembly will satisfy the Publisher Membership Condition if it is signed with a software publisher\u2019s Authenticode X.509v3 digital certificate that can be verified by the Windows operating system as having a chain of trust that leads to a trusted root certificate stored in the user\u2019s certificate store. The  Publisher Membership Condition can be used to identify an organization, developer, vendor, or other entity as the ultimate source of the assembly, even if the code itself was obtained from a third party, such as a mirror site.  Access to system resources, such as file systems or printers, may then be granted to the assembly based on the trust relationship with the identified entity.\n\nCertificates used to sign assemblies so the Publisher Member Condition may be applied must originate from a trusted source.  Using a certificate that is not from a trusted source could potentially violate  system integrity and confidentiality.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "A .Net assembly will satisfy the Publisher Membership Condition if it is signed with a software publisher\u2019s Authenticode X.509v3 digital certificate that can be verified by the Windows operating system as having a chain of trust that leads to a trusted root certificate stored in the user\u2019s certificate store. The  Publisher Membership Condition can be used to identify an organization, developer, vendor, or other entity as the ultimate source of the assembly, even if the code itself was obtained from a third party, such as a mirror site.  Access to system resources, such as file systems or printers, may then be granted to the assembly based on the trust relationship with the identified entity.\n\nCertificates used to sign assemblies so the Publisher Member Condition may be applied must originate from a trusted source.  Using a certificate that is not from a trusted source could potentially violate  system integrity and confidentiality.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Caspol.exe is a Microsoft tool used for working with .Net policy.  Use caspol.exe to list the code groups and any publisher membership conditions.\n\nThe location of the caspol utility is dependent upon the system architecture of the system running .Net. \n\nFor 32 bit systems, caspol.exe is located at %SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319.\n \nFor 64 bit systems, caspol.exe is located at %SYSTEMROOT%\\Microsoft.NET\\Framework64\\v4.0.30319.  \n\nExample:\n\ncd %SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319\n\nTo check code groups for the machine, run the following command.\n\ncaspol.exe -m -lg\n\nSample Results:\nMicrosoft (R) .NET Framework CasPol 4.0.30319.1\nCopyright (c) Microsoft Corporation.  All rights reserved.\n\nPolicy change prompt is ON\n\nLevel = Machine\n\nCode Groups:\n\n1.  All code: Nothing\n   1.1.  Zone - MyComputer: FullTrust (LevelFinal)\n      1.1.1.  StrongName - 002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293: FullTrust\n      1.1.2.  StrongName - 00000000000000000400000000000000: FullTrust\n   1.2.  Zone - Intranet: LocalIntranet\n      1.2.1.  All code: Same site Web\n      1.2.2.  All code: Same directory FileIO - 'Read, PathDiscovery'\n   1.3.  Zone - Internet: Internet\n      1.3.1.  All code: Same site Web\n   1.4.  Zone - Untrusted: Nothing\n   1.5.  (First Match) Zone - Trusted: Internet\n      1.5.1.  All code: Same site Web\n   1.6.  Publisher - 30818902818100E47B359ACC061D70C237B572FA276C9854CFABD469DFB74E77D026630BEE2A0C2F8170A823AE69FDEB65704D7FD446DEFEF1F6BA12B6ACBDB1BFA7B9B595AB9A40636467CFF7C73F198B53A9A7CF177F6E7896EBC591DD3003C5992A266C0AD9FBEE4E2A056BE7F7ED154D806F7965F83B0AED616C192C6416CFCB46FC2F5CFD0203010001: FullTrust\nSuccess\n\nSection 1.6 above indicates the presence of a publishers key that meets the Publishers Membership Condition and is also given full trust. \n\nIf the Publisher Membership Condition is used on a non-default Code Group and the use of that publisher's certificate is not documented and approved by the IAO, this is a finding.", "FixText": "Trust must be established when utilizing Publishers Membership Condition.  All publishers' certificates must have documented approvals from the IAO.", "CCI": "SV-7446,V-7063,CCI-000185"}, {"VulnID": "V-225226", "RuleID": "SV-225226r615940_rule", "StigID": "APPNET0052", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000176", "RuleTitle": "Encryption keys used for the .NET Strong Name Membership Condition must be protected.", "Description": "<VulnDiscussion>The Strong Name Membership condition requires that member assemblies be defined with Strong Names.  A strong name consists of the assembly's identity, simple text name, version number, and culture information (if provided) \u2014 plus a public key and a digital signature.  If assemblies do not have a strong name assigned, the assembly cannot be unique and the author of the code cannot be uniquely identified.  In order to create the strong name, the developer must use a cryptographic key pair to sign the assembly.  If the developer does not protect the key, the key can be stolen and used to sign any application, including malware applications.  This could adversely affect application integrity and confidentiality.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The Strong Name Membership condition requires that member assemblies be defined with Strong Names.  A strong name consists of the assembly's identity, simple text name, version number, and culture information (if provided) \u2014 plus a public key and a digital signature.  If assemblies do not have a strong name assigned, the assembly cannot be unique and the author of the code cannot be uniquely identified.  In order to create the strong name, the developer must use a cryptographic key pair to sign the assembly.  If the developer does not protect the key, the key can be stolen and used to sign any application, including malware applications.  This could adversely affect application integrity and confidentiality.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If the application is a COTS product, the requirement is Not Applicable (NA).\n\nCaspol.exe is a Microsoft tool used for working with .Net policy.  Use caspol.exe to list the code groups and any publisher membership conditions.\n\nThe location of the caspol utility is dependent upon the system architecture of the system running .Net. \n\nFor 32 bit systems, caspol.exe is located at %SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319.\n \nFor 64 bit systems, caspol.exe is located at %SYSTEMROOT%\\Microsoft.NET\\Framework64\\v4.0.30319.  \n\nExample:\n\ncd %SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319\n\nTo check code groups, run the following command:\n\ncaspol.exe -all -lg\n\nSample response:\nMicrosoft (R) .NET Framework CasPol 4.0.30319.1\n\nSecurity is ON\nExecution checking is ON\nPolicy change prompt is ON\n\nLevel = Machine\n\nCode Groups:\n\n1.  All code: Nothing\n   1.1.  Zone - MyComputer: FullTrust (LevelFinal)\n      1.1.1.  StrongName - 002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293: FullTrust\n      1.1.2.  StrongName - 00000000000000000400000000000000: FullTrust\n   1.2.  Zone - Intranet: LocalIntranet\n      1.2.1.  All code: Same site Web\n      1.2.2.  All code: Same directory FileIO - 'Read, PathDiscovery'\n   1.3.  Zone - Internet: Internet\n      1.3.1.  All code: Same site Web\n   1.4.  Zone - Untrusted: Nothing\n   1.5.  (First Match) Zone - Trusted: Internet\n      1.5.1.  All code: Same site Web\n   1.6.  Publisher - 30818902818100E47B359ACC061D70C237B572FA276C9854CFABD469DFB74E77D026630BEE2A0C2F8170A823AE69FDEB65704D7FD446DEFEF1F6BA12B6ACBDB1BFA7B9B595AB9A40636467CFF7C73F198B53A9A7CF177F6E7896EBC591DD3003C5992A266C0AD9FBEE4E2A056BE7F7ED154D806F7965F83B0AED616C192C6416CFCB46FC2F5CFD0203010001: FullTrust\nSuccess\n\nAn assembly will satisfy the StrongName Membership Condition if its metadata contains the strongly identifying data associated with the specified strong name. At the least, this means it has been digitally signed with the private key associated with the public key recorded in the policy.\n\nThe presence of the encryption key values in the StrongName field indicates the use of StrongName Membership Condition. \n\nIf a Strong Name Membership Condition is assigned to a non-default Code Group the private key must be adequately protected by the software developer or the entity responsible for signing the assemblies. \n\nAsk the Systems Programmer how the private keys are protected. \n\nPrivate keys are simply values stored as strings of data.  Keys can be stored in files on the file system or in a centralized data repository. \n\nAdequate protection methods include, but are not limited to:\n\n - utilizing centralized key management;\n - using strict file permissions to limit access; and\n - tying strong pass phrases to the key.\n\nIf the private key used to sign the assembly is not adequately protected, this is a finding.", "FixText": "Ask the Systems Programmer how the private keys used to sign the assembly are protected. \n\nPrivate keys are simply values stored as strings of data.  Keys can be stored in files on the file system or in a centralized data repository. \n\nAdequate protection methods include, but are not limited to:\n\n - utilizing centralized key management;\n - using strict file permissions to limit access; and\n - tying strong pass phrases to the key.\n\nThe private key(s) used to sign the assembly must be protected.  Utilize centralized key management or strict file permissions along with strong pass phrases and/or other well established industry practices for managing and controlling access to private keys.", "CCI": "SV-7450,V-7067,CCI-000186"}, {"VulnID": "V-225227", "RuleID": "SV-225227r615940_rule", "StigID": "APPNET0055", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000120", "RuleTitle": "CAS and policy configuration files must be backed up.", "Description": "<VulnDiscussion>A successful disaster recovery plan requires that CAS policy and CAS policy configuration files are identified and included in systems disaster backup and recovery events.  Documentation regarding the location of system and application specific CAS policy configuration files and the frequency in which backups occur is required.  If these files are not identified and the information is not documented, there is the potential that critical application configuration files may not be included in disaster recovery events which could lead to an availability risk.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "A successful disaster recovery plan requires that CAS policy and CAS policy configuration files are identified and included in systems disaster backup and recovery events.  Documentation regarding the location of system and application specific CAS policy configuration files and the frequency in which backups occur is required.  If these files are not identified and the information is not documented, there is the potential that critical application configuration files may not be included in disaster recovery events which could lead to an availability risk.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Ask the System Administrator if all CAS policy and policy configuration files are included in the system backup. If they are not, this is a finding.\n\nAsk the System Administrator if the policy and configuration files are backed up prior to migration, deployment, and reconfiguration. If they are not, this is a finding.\n\nAsk the System Administrator for documentation that shows CAS Policy configuration files are backed up as part of a disaster recovery plan. If they have no documentation proving the files are backed up, this is a finding.", "FixText": "All CAS policy and policy configuration files must be included in the system backup. \n\nAll CAS policy and policy configuration files must be backed up prior to migration, deployment, and reconfiguration.\n\nCAS policy configuration files must be included in disaster recovery plan documentation.", "CCI": "SV-7452,V-7069,CCI-000164"}, {"VulnID": "V-225228", "RuleID": "SV-225228r615940_rule", "StigID": "APPNET0060", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000219", "RuleTitle": "Remoting Services HTTP channels must utilize authentication and encryption.", "Description": "<VulnDiscussion>Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than using .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.\n\n.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.\n\nNormally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server. \n\nDue to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data. \n\nMicrosoft provides 3 different \"channels\" that are used for remoting.  They are HTTP, TCP and IPC.\n\nAny unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than using .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.\n\n.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.\n\nNormally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server. \n\nDue to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data. \n\nMicrosoft provides 3 different \"channels\" that are used for remoting.  They are HTTP, TCP and IPC.\n\nAny unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the machine.config file and the [application name].exe.config file.\n\nFor 32 bit systems, the \"machine.config\" file is contained in the following folder. %SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319\\Config \n\nFor 64 bit systems, the \"machine.config\" file is contained in the following folder. %SYSTEMROOT%\\Microsoft.NET\\Framework64\\v4.0.30319\\Config.\n\nMicrosoft specifies locating the [application].config file in the same folder as the application executable (.exe) file. However, the developer does have the capability to specify a different location when the application is compiled.  Therefore, if the file is not found in the application home folder, a search of the system is required. If the [application name].exe.config file is not found on the system, then only a check of the machine.config file is required.\n\nSample machine/application config file:\n\n<application name=\u201cremoteserver\u201d> \n  <service> \n    <activated type=\u201csample.my.object, myobjects\u201d/> \n  </service> \n  <channels> \n    <channel ref=\u201chttp server\u201d port=\u201c80\u201d/> \n  </channels> \n</application>\n\n<serverProviders>\n  <provider ref=\"wsdl\" />\n  <formatter ref=\"soap\" typeFilterLevel=\"Low\" /> \n  <formatter ref=\"binary\" typeFilterLevel=\"Low\" /> \n</serverProviders> \n\nMicrosoft provides 3 \"channels\" that are used for remoting connectivity.  They are the HTTP, TCP and IPC channels.  The channel that is used is specified via the <channels> element in the config file.  \n\nHTTP channel example:\n<channel ref=\u201chttp server\u201d port=\u201c80\u201d/> \n\nThe HTTP Channel only supports encryption and message integrity when the remote object is hosted in Internet Information Services (IIS) using TLS.\n\nThe above example shows the well known TLS port of 443 is not being used. \n\nIf the HTTP remoting channel is not configured to protect the channel by using TLS encryption, this is a finding.", "FixText": "Ensure encryption and message integrity are used for HTTP remoting channels.\n\nThe HTTP Channel only supports encryption and message integrity when the remote object is hosted in Internet Information Services (IIS) using TLS.\n\nHTTP channels are protected via TLS (HTTPS). \n<channels> \n   <channel ref=\u201chttp server\u201d port=\u201c443\u201d/> \n</channels> \n\nChange the channel ref parameter to utilize a TLS port and leverage TLS on the remote IIS server.", "CCI": "SV-7453,V-7070,CCI-001184"}, {"VulnID": "V-225229", "RuleID": "SV-225229r615940_rule", "StigID": "APPNET0061", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000516", "RuleTitle": ".Net Framework versions installed on the system must be supported.", "Description": "<VulnDiscussion>Unsupported software introduces risks and violates DoD policy.  Applications utilizing unsupported versions of .NET introduce substantial risk to the host, network, and the enclave by virtue of the fact they leverage an architecture that is no longer updated by the vendor.  This introduces potential application integrity, availability, or confidentiality issues.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Unsupported software introduces risks and violates DoD policy.  Applications utilizing unsupported versions of .NET introduce substantial risk to the host, network, and the enclave by virtue of the fact they leverage an architecture that is no longer updated by the vendor.  This introduces potential application integrity, availability, or confidentiality issues.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine which versions of the .NET Framework are installed by opening the directory %systemroot%\\Microsoft.NET.\n\nThe folder named \"%systemroot%\\Microsoft.NET\\Framework\" contains .NET files for 32 bit systems.  The folder named \"%systemroot%\\Microsoft.NET\\Framework64\" contains .NET files for 64 bit systems. 64 bit systems will have both the 32 bit and the 64 bit folders while 32 bit systems do not have a Framework64 folder.\n\nWithin each of the aforementioned folders are the individual folder names that contain the corresponding versions of the .NET Framework:\n\nv4.0.30319\nv3.5\nv3.0\nv2.0.50727\nv1.1.4322\nv1.0.3705\n\nSearch for all the Mscorlib.dll files in the %systemroot%\\Microsoft.NET\\Framework folder and the %systemroot%\\Microsoft.NET\\Framework64 folder if the folder exists. Click on each of the files, view properties, and click version tab to determine the version installed.  If there is no Mscorlib.dll, there is no installed version of .Net Framework in that directory.\n\nMore specific information on determining versions of .Net Framework installed can be found at the following link. http://support.microsoft.com/kb/318785\n\nVerify extended support is available for the installed versions of .Net Framework.\n\nVerify the .Net Framework support dates with Microsoft Product Lifecycle Search link.\nhttp://support.microsoft.com/lifecycle/search/?sort=PN&alpha=.NET+Framework\n\nBeginning with .NET 3.5 SP1, the .NET Framework is considered a Component of the Windows OS. Components follow the Support Lifecycle policy of their parent product or platform.\n \nIf any versions of the .Net Framework are installed and support is no longer available, this is a finding.", "FixText": "Remove unsupported versions of the .NET Framework and upgrade legacy applications that utilize unsupported versions of the .NET framework.", "CCI": "SV-55642,V-18395,CCI-000366"}, {"VulnID": "V-225230", "RuleID": "SV-225230r849747_rule", "StigID": "APPNET0062", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000635", "RuleTitle": "The .NET CLR must be configured to use FIPS approved encryption modules.", "Description": "<VulnDiscussion>FIPS encryption is configured via .NET configuration files.  There are numerous configuration files that affect different aspects of .Net behavior.  The .NET config files are described below.\n \nMachine Configuration Files:\nThe machine configuration file, Machine.config, contains settings that apply to an entire computer. This file is located in the %SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319\\Config directory for 32 bit .NET 4 installations and %SYSTEMROOT%\\Microsoft.NET\\Framework64\\v4.0.30319\\Config for 64 bit systems.   Machine.config contains configuration settings for machine-wide assembly binding, built-in remoting channels, and ASP.NET.\n\nApplication Configuration Files:\nApplication configuration files contain settings specific to an application. If checking these files, a .NET review of a specific .NET application is most likely being conducted. These files contain configuration settings that the Common Language Runtime reads (such as assembly binding policy, remoting objects, and so on), and settings that the application can read. \n\nThe name and location of the application configuration file depends on the application's host, which can be one of the following: \n\nExecutable\u2013hosted application configuration files. \n\nThe configuration file for an application hosted by the executable host is in the same directory as the application. The name of the configuration file is the name of the application with a .config extension. For example, an application called myApp.exe can be associated with a configuration file called myApp.exe.config. \n\nInternet Explorer-hosted application configuration files. \n\nIf an application hosted in Internet Explorer has a configuration file, the location of this file is specified in a <link> tag with the following syntax.\n\n<link rel=\"ConfigurationFileName\" href=\"location\">\n\nIn this tag, \"location\" represents a URL that point to the configuration file. This sets the application base. The configuration file must be located on the same web site as the application. \n\n.NET 4.0 allows the CLR runtime to be configured to ignore FIPS encryption requirements.  If the CLR is not configured to use FIPS encryption modules, insecure encryption modules might be employed which could introduce an application confidentiality or integrity issue.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "FIPS encryption is configured via .NET configuration files.  There are numerous configuration files that affect different aspects of .Net behavior.  The .NET config files are described below.\n \nMachine Configuration Files:\nThe machine configuration file, Machine.config, contains settings that apply to an entire computer. This file is located in the %SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319\\Config directory for 32 bit .NET 4 installations and %SYSTEMROOT%\\Microsoft.NET\\Framework64\\v4.0.30319\\Config for 64 bit systems.   Machine.config contains configuration settings for machine-wide assembly binding, built-in remoting channels, and ASP.NET.\n\nApplication Configuration Files:\nApplication configuration files contain settings specific to an application. If checking these files, a .NET review of a specific .NET application is most likely being conducted. These files contain configuration settings that the Common Language Runtime reads (such as assembly binding policy, remoting objects, and so on), and settings that the application can read. \n\nThe name and location of the application configuration file depends on the application's host, which can be one of the following: \n\nExecutable\u2013hosted application configuration files. \n\nThe configuration file for an application hosted by the executable host is in the same directory as the application. The name of the configuration file is the name of the application with a .config extension. For example, an application called myApp.exe can be associated with a configuration file called myApp.exe.config. \n\nInternet Explorer-hosted application configuration files. \n\nIf an application hosted in Internet Explorer has a configuration file, the location of this file is specified in a <link> tag with the following syntax.\n\n<link rel=\"ConfigurationFileName\" href=\"location\">\n\nIn this tag, \"location\" represents a URL that point to the configuration file. This sets the application base. The configuration file must be located on the same web site as the application. \n\n.NET 4.0 allows the CLR runtime to be configured to ignore FIPS encryption requirements.  If the CLR is not configured to use FIPS encryption modules, insecure encryption modules might be employed which could introduce an application confidentiality or integrity issue.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Examine the .NET CLR configuration files from the vulnerability discussion to find the runtime element and then the \"enforceFIPSPolicy\" element.\n\nExample:\n<configuration> \n  <runtime> \n                <enforceFIPSPolicy enabled=\"true|false\" />\n  </runtime>\n</configuration>\n\nBy default, the .NET \"enforceFIPSPolicy\" element is set to \"true\".\n\nIf the \"enforceFIPSPolicy\" element does not exist within the \"runtime\" element of the CLR configuration, this is not a finding.\n\nIf the \"enforceFIPSPolicy\" element exists and is set to \"false\", and the IAO has not accepted the risk and documented the risk acceptance, this is a finding.", "FixText": "Examine the .NET CLR configuration files to find the runtime element and then the \"enforceFIPSPolicy\" element.\n\nExample:\n<configuration> \n  <runtime> \n                <enforceFIPSPolicy enabled=\"true|false\" />\n  </runtime>\n</configuration>\n\nDelete the \"enforceFIPSPolicy\" runtime element, change the setting to \"true\" or there must be documented IAO approvals for the FIPS setting.", "CCI": "SV-40966,V-30926,CCI-002450"}, {"VulnID": "V-225231", "RuleID": "SV-225231r615940_rule", "StigID": "APPNET0063", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000175", "RuleTitle": ".NET must be configured to validate strong names on full-trust assemblies.", "Description": "<VulnDiscussion>The \"bypassTrustedAppStrongNames\" setting specifies whether the bypass feature that avoids validating strong names for full-trust assemblies is enabled. By default the bypass feature is enabled in .Net 4, therefore strong names are not validated for correctness when the assembly/program is loaded. Not validating strong names provides a faster application load time but at the expense of performing certificate validation. \n\nFull trust assemblies are .Net applications launched from the local host. Strong names are digital signatures tied to .Net applications/assemblies.  .Net 4 considers applications installed locally to be fully trusted by default and grants these applications full permissions to access host resources. \n\nThe bypass feature applies to any assembly signed with a strong name and having the following characteristics:\n\n    Fully trusted without the StrongName evidence (for example, has MyComputer zone evidence).\n\n    Loaded into a fully trusted AppDomain.\n\n    Loaded from a location under the ApplicationBase property of that AppDomain.\n\n    Not delay-signed.\n\nNot validating the certificates used to sign strong name assemblies will provide a faster application load time, but falsely assumes that signatures used to sign the application are to be implicitly trusted.  Not validating strong name certificates introduces an integrity risk to the system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The \"bypassTrustedAppStrongNames\" setting specifies whether the bypass feature that avoids validating strong names for full-trust assemblies is enabled. By default the bypass feature is enabled in .Net 4, therefore strong names are not validated for correctness when the assembly/program is loaded. Not validating strong names provides a faster application load time but at the expense of performing certificate validation. \n\nFull trust assemblies are .Net applications launched from the local host. Strong names are digital signatures tied to .Net applications/assemblies.  .Net 4 considers applications installed locally to be fully trusted by default and grants these applications full permissions to access host resources. \n\nThe bypass feature applies to any assembly signed with a strong name and having the following characteristics:\n\n    Fully trusted without the StrongName evidence (for example, has MyComputer zone evidence).\n\n    Loaded into a fully trusted AppDomain.\n\n    Loaded from a location under the ApplicationBase property of that AppDomain.\n\n    Not delay-signed.\n\nNot validating the certificates used to sign strong name assemblies will provide a faster application load time, but falsely assumes that signatures used to sign the application are to be implicitly trusted.  Not validating strong name certificates introduces an integrity risk to the system.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If there is documented ISSO risk acceptance for development systems, this is not a finding.\nFor 32 bit production systems: \nUse regedit to examine the \u201cHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\u201d key.  \nOn 64-bit production systems:\nUse regedit to examine both the \u201cHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\u201d and \u201cHKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework\u201d keys.\nIf the \"AllowStrongNameBypass\" value does not exist, or if the \u201cDWORD\u201d value is set to \u201c1\u201d, this is a finding.\n\nDocumentation must include a complete list of installed .Net applications, application versions, and acknowledgement that ISSO trusts each installed application.\n\nIf application versions installed on the system do not match approval documentation, this is a finding.", "FixText": "For 32 bit production systems: \nSet \u201cHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\AllowStrongNameBypass\" to a \u201cDWORD\u201d value of \u201c0\u201d.\nOn 64-bit production systems:\nSet \u201cHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\ AllowStrongNameBypass\u201d and \u201cHKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework\\ AllowStrongNameBypass\u201d to a \u201cDWORD\u201d value of \u201c0\u201d.\nOr, obtain documented ISSO risk acceptance for each .Net application installed on the system. \n\nApproval documentation will include complete list of all installed .Net applications, application versions, and acknowledgement of ISSO trust of each installed application.", "CCI": "SV-40977,V-30935,CCI-000185"}, {"VulnID": "V-225232", "RuleID": "SV-225232r615940_rule", "StigID": "APPNET0064", "Severity": "low", "Cat": "CAT III", "Classification": "", "GroupTitle": "SRG-APP-000516", "RuleTitle": ".Net applications that invoke NetFx40_LegacySecurityPolicy must apply previous versions of .NET STIG guidance.", "Description": "<VulnDiscussion>CAS policy is .NET runtime version-specific.  In .NET Framework version 4, CAS policy is disabled by default however; it can be re-enabled by using the NetFx40_LegacySecurityPolicy setting on a per application basis. Caspol.exe is provided by Microsoft to set security policy on .Net applications prior to version 4.0. This requirement does not apply to the caspol.exe assembly or other assemblies provided with the Windows OS or the Windows Secure Host Baseline (SHB).\n\nWhen invoking the NetFx40_LegacySecurityPolicy setting in .NET 4, earlier versions of the .NET Framework CAS policy will become active therefore previous .NET STIG guidance that applies to the reactivated versions must also be applied. \n\nFailure to apply applicable versions of STIG guidance can result in the loss of system confidentiality, integrity or availability.  </VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "CAS policy is .NET runtime version-specific.  In .NET Framework version 4, CAS policy is disabled by default however; it can be re-enabled by using the NetFx40_LegacySecurityPolicy setting on a per application basis. Caspol.exe is provided by Microsoft to set security policy on .Net applications prior to version 4.0. This requirement does not apply to the caspol.exe assembly or other assemblies provided with the Windows OS or the Windows Secure Host Baseline (SHB).\n\nWhen invoking the NetFx40_LegacySecurityPolicy setting in .NET 4, earlier versions of the .NET Framework CAS policy will become active therefore previous .NET STIG guidance that applies to the reactivated versions must also be applied. \n\nFailure to apply applicable versions of STIG guidance can result in the loss of system confidentiality, integrity or availability.  ", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Open Windows explorer and search for all *.exe.config files.  This requirement does not apply to the caspol.exe assembly or other assemblies provided with the Windows OS or the Windows Secure Host Baseline (SHB).\n\nTo find relevant files, you can run the FINDSTR command from an elevated (admin) command prompt: \nFINDSTR /i /s \"NetFx40_LegacySecurityPolicy\" c:\\*.exe.config \nThis command will search all .\"exe.config\" files on the c: drive partition for the \"LegacySecurityPolicy\" setting. Repeat the command for each drive partition on the system.\n\n\nIf the .NET application configuration file utilizes the legacy policy element and .NET STIG guidance that covers these legacy versions has not been applied, this is a finding.", "FixText": "Apply the .NET Framework Security Checklist for .Net versions 1 through 3.5 when utilizing the NetFx40_LegacySecurityPolicy setting.", "CCI": "SV-40979,V-30937,CCI-000366"}, {"VulnID": "V-225233", "RuleID": "SV-225233r849748_rule", "StigID": "APPNET0065", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000431", "RuleTitle": "Trust must be established prior to enabling the loading of remote code in .Net 4.", "Description": "<VulnDiscussion>In the .NET Framework version 3.5 and earlier versions, if an application assembly loaded code/objects from a remote location, that assembly would run partially trusted with a permissions grant set that depended on the zone in which it was loaded. For example, if an assembly was loaded from a web site, it was loaded into the Internet zone and granted the Internet permission set. In other words, it was executed in an Internet sandbox.\n\nIf the same program is run in the .NET Framework version 4, an exception is thrown which effectively states; either explicitly create a sandbox for the assembly or run it in full trust.\n\nThe <loadFromRemoteSources> element specifies the assemblies that run partially trusted in earlier versions of the .NET Framework will be run fully trusted in the .NET Framework 4.\n\nIf loadFromRemoteSources is set to true, the remotely loaded application code is granted full trust.  This could create an integrity vulnerability on the system.  The required method to address this is to explicitly create a sandboxed environment for the remotely loaded code to run in rather than allowing remotely loaded code to run with full trust.\n\nThe appropriate level of trust must be established prior to enabling the loading of remote code in .Net 4 applications and that code must be run in a controlled environment.  The following is an example of the use of loadFromRemoteSources.\n\n<configuration>\n<runtime>\n    <loadFromRemoteSources enabled=\"true\" \"https://my.dodorg.gov\" />\n    <loadFromRemoteSources enabled=\"true\" \"https://192.168.0.*\" />\n    <loadFromRemoteSources enabled=\"false\" \"*\" />\n</runtime>\n</configuration></VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "In the .NET Framework version 3.5 and earlier versions, if an application assembly loaded code/objects from a remote location, that assembly would run partially trusted with a permissions grant set that depended on the zone in which it was loaded. For example, if an assembly was loaded from a web site, it was loaded into the Internet zone and granted the Internet permission set. In other words, it was executed in an Internet sandbox.\n\nIf the same program is run in the .NET Framework version 4, an exception is thrown which effectively states; either explicitly create a sandbox for the assembly or run it in full trust.\n\nThe <loadFromRemoteSources> element specifies the assemblies that run partially trusted in earlier versions of the .NET Framework will be run fully trusted in the .NET Framework 4.\n\nIf loadFromRemoteSources is set to true, the remotely loaded application code is granted full trust.  This could create an integrity vulnerability on the system.  The required method to address this is to explicitly create a sandboxed environment for the remotely loaded code to run in rather than allowing remotely loaded code to run with full trust.\n\nThe appropriate level of trust must be established prior to enabling the loading of remote code in .Net 4 applications and that code must be run in a controlled environment.  The following is an example of the use of loadFromRemoteSources.\n\n<configuration>\n<runtime>\n    <loadFromRemoteSources enabled=\"true\" \"https://my.dodorg.gov\" />\n    <loadFromRemoteSources enabled=\"true\" \"https://192.168.0.*\" />\n    <loadFromRemoteSources enabled=\"false\" \"*\" />\n</runtime>\n</configuration>", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Open Windows explorer and search for *.exe.config.\n\nSearch each config file found for the \"loadFromRemoteSources\" element.\n\nIf the loadFromRemoteSources element is enabled  \n(\"loadFromRemoteSources enabled = true\"), and the remotely loaded application is not run in a sandboxed environment, or if OS based software controls, such as AppLocker or Software Security Policies, are not utilized, this is a finding.", "FixText": ".Net application code loaded from a remote source must be run in a controlled environment.  \n\nA controlled environment consists of a sandbox, such as running in an Internet Explorer host environment or employing OS based software access controls, such as AppLocker or Software Security Policies, when application design permits.  \n\nObtain documented IAO approvals for all remotely loaded code.", "CCI": "SV-41010,V-30968,CCI-002530"}, {"VulnID": "V-225234", "RuleID": "SV-225234r864037_rule", "StigID": "APPNET0066", "Severity": "low", "Cat": "CAT III", "Classification": "", "GroupTitle": "SRG-APP-000516", "RuleTitle": ".NET default proxy settings must be reviewed and approved.", "Description": "<VulnDiscussion>The .Net framework can be configured to utilize a different proxy or altogether bypass the default proxy settings in the client's browser.  This may lead to the framework using a proxy that is not approved for use.  If the proxy is malicious, this could lead to a loss of application integrity and confidentiality.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The .Net framework can be configured to utilize a different proxy or altogether bypass the default proxy settings in the client's browser.  This may lead to the framework using a proxy that is not approved for use.  If the proxy is malicious, this could lead to a loss of application integrity and confidentiality.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Open Windows explorer and search for all \"*.exe.config\" and \"machine.config\" files.\n\nSearch each file for the \"defaultProxy\" element.\n\n<defaultProxy\n  enabled=\"true|false\"\n  useDefaultCredentials=\"true|false\"\n  <bypasslist> \u2026 </bypasslist>\n  <proxy> \u2026 </proxy>\n  <module> \u2026 </module>\n/>\n\nIf the \"defaultProxy\" setting \"enabled=false\" or if the \"bypasslist\", \"module\", or \"proxy\" child elements have configuration entries and there are no documented approvals from the IAO, this is a finding.\n\n If the \"defaultProxy\" element is empty or if\u00a0\"useSystemDefault =True\u201d\u00a0then the framework is using default browser settings, this is not a finding.", "FixText": "Open Windows explorer and search for all \"*.exe.config\" and \"machine.config\" files.\n\nSearch each file for the \"defaultProxy\" element.\n\nClear the values contained in the \"defaultProxy\" element, and the \"bypasslist\", \"module\", and \"proxy\" child elements.\n\nThe IAO must provide documented approvals of any non-default proxy servers.", "CCI": "SV-41014,V-30972,CCI-000366"}, {"VulnID": "V-225235", "RuleID": "SV-225235r615940_rule", "StigID": "APPNET0067", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000095", "RuleTitle": "Event tracing for Windows (ETW) for Common Language Runtime events must be enabled.", "Description": "<VulnDiscussion>Event tracing captures information about applications utilizing the .NET CLR and the .NET CLR itself. This includes security oriented information, such as Strong Name and Authenticode verification.  \n\nBeginning with Windows Vista, ETW is enabled by default however, the .Net CLR and .Net applications can be configured to not utilize Event Tracing. If ETW event tracing is disabled, critical events that occurred within the runtime will not be captured in event logs.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Event tracing captures information about applications utilizing the .NET CLR and the .NET CLR itself. This includes security oriented information, such as Strong Name and Authenticode verification.  \n\nBeginning with Windows Vista, ETW is enabled by default however, the .Net CLR and .Net applications can be configured to not utilize Event Tracing. If ETW event tracing is disabled, critical events that occurred within the runtime will not be captured in event logs.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Open Windows explorer and search for all .NET config files including application config files (*.exe.config)\n\nNOTE:\nBeginning with Windows Vista and Windows Server 2008, ETW Tracing is enabled by default and the \"etwEnable\" setting is not required in order for Event Tracing to be enabled.  An etwEnable setting of \"true\" IS required in earlier versions of Windows as ETW is disabled by default. \n\nExamine the configuration settings for \n<etwEnable enabled=\"false\" />.\n\nIf the \"etwEnable\" element is set to \"true\", this is not a finding.\n\nIf the \"etwEnable\" element is set to \"false\" and documented approvals by the IAO are not provided, this is a finding.", "FixText": "Open Windows explorer and search for all .NET config files including application config files (*.exe.config).\n\nExamine the configuration settings for \n<etwEnable enabled=\"false\" />.\n\nEnable ETW Tracing by setting the etwEnable flag to \"true\" or obtain documented IAO approvals.", "CCI": "SV-41075,V-31026,CCI-000130"}, {"VulnID": "V-225236", "RuleID": "SV-225236r849749_rule", "StigID": "APPNET0070", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000431", "RuleTitle": "Software utilizing .Net 4.0 must be identified and relevant access controls configured.", "Description": "<VulnDiscussion>With the advent of .Net 4.0, the .Net framework no longer directly configures or enforces security policy for .Net applications.  This task is now relegated to the operating system layer and the security protections built-in to .Net application \"runtime hosts\" that run on the O.S. \n\nExamples of these .Net \"runtime hosts\" include; Internet Explorer, Windows Shell, ASP.NET, Database Engines or any other \"runtime hosts\" that utilize .Net and load the .Net CLR.\n\nSecurity protections include utilizing runtime host security controls such as sandboxing to restrict or control application behavior as designed or required.  \n\nTo compensate for these design changes, Windows provides native solutions such as Software Security Policies (SSP) and Application Locker (AL) which are technologies that can be implemented via Group Policy (GPO).  SSP, AL and similar third party solutions serve to restrict execution of applications, scripts and libraries based upon cryptographic hash, security zones, path and certificate values that are associated with the application files.  Additionally, application developers will utilize \"sandboxing\" techniques within their code in order to isolate 3rd party code libraries from critical system resources.\n\nIn order to assign protections to .Net 4.0 applications, the applications must first be identified and the appropriate hosting security mechanisms configured to accomplish that task.  \n\n.Net STIG guidance cannot be applied if .Net applications are not identified and documented.  The lack of an application inventory introduces confidentiality, availability and integrity vulnerabilities to the system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "With the advent of .Net 4.0, the .Net framework no longer directly configures or enforces security policy for .Net applications.  This task is now relegated to the operating system layer and the security protections built-in to .Net application \"runtime hosts\" that run on the O.S. \n\nExamples of these .Net \"runtime hosts\" include; Internet Explorer, Windows Shell, ASP.NET, Database Engines or any other \"runtime hosts\" that utilize .Net and load the .Net CLR.\n\nSecurity protections include utilizing runtime host security controls such as sandboxing to restrict or control application behavior as designed or required.  \n\nTo compensate for these design changes, Windows provides native solutions such as Software Security Policies (SSP) and Application Locker (AL) which are technologies that can be implemented via Group Policy (GPO).  SSP, AL and similar third party solutions serve to restrict execution of applications, scripts and libraries based upon cryptographic hash, security zones, path and certificate values that are associated with the application files.  Additionally, application developers will utilize \"sandboxing\" techniques within their code in order to isolate 3rd party code libraries from critical system resources.\n\nIn order to assign protections to .Net 4.0 applications, the applications must first be identified and the appropriate hosting security mechanisms configured to accomplish that task.  \n\n.Net STIG guidance cannot be applied if .Net applications are not identified and documented.  The lack of an application inventory introduces confidentiality, availability and integrity vulnerabilities to the system.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "This requirement does not apply to the \"caspol.exe\" assembly or other assemblies provided with the Windows OS or the Windows Secure Host Baseline (SHB).\n\nAsk the system administrator to provide documentation that identifies:\n\n- Each .Net 4.0 application they run on the system.\n- The .Net runtime host that invokes the application. \n- The security measures employed to control application access to system resources or user access to application.\n\nIf all .Net applications, runtime hosts and security protections have been documented or if there are no .Net 4.0 applications existing on the system, this is not a finding.\n\nIf there is no documentation that identifies the existence of .NET 4.0 applications or the lack thereof, this is a finding.\n\nIf the runtime hosts have not been identified, this is a finding.\n\nIf the security protections have not been identified, this is a finding.", "FixText": "Document the existence of all .Net 4.0 applications that are not provided by the host Windows OS or the Windows Secure Host Baseline (SHB).\n\nDocument the corresponding runtime hosts that are used to invoke the applications.\n\nDocument the applications security control requirements (restricting application access to resources or user access to the application).", "CCI": "SV-41030,V-30986,CCI-002530"}, {"VulnID": "V-225237", "RuleID": "SV-225237r615940_rule", "StigID": "APPNET0071", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000219", "RuleTitle": "Remoting Services TCP channels must utilize authentication and encryption.", "Description": "<VulnDiscussion>Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.\n\n.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.\n\nNormally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server. \n\nDue to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data. \n\nMicrosoft provides 3 different \"channels\" that are used for remoting.  They are HTTP, TCP and IPC.\n\nAny unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Note: Microsoft recommends using the Windows Communication Framework (WCF) rather than .Net remoting. New development projects should refrain from using .Net remoting capabilities whenever possible.\n\n.NET remoting provides the capability to build widely distributed applications. The application components may reside all on one computer or they may be spread out across the enclave. .NET client applications can make remoting calls to use objects in other processes on the same computer or on any other computer that is reachable over the network. .NET remoting can also be used to communicate with other application domains within the same process.  Remoting is achieved via the exposure of endpoints that can be used to establish remote connectivity.\n\nNormally when application code attempts to access a protected resource, a stack walk is performed to ensure that all stack frames have permission to access the resource. However, with .Net 4.0, when a call is made on a remote object, this stack walk is not performed across the remoting boundary. The .Net remoting infrastructure requires FullTrust permission to execute on either the client or the server. \n\nDue to the fact that FullTrust permission is required, Remoting endpoints should be authenticated and encrypted in order to protect the system and the data. \n\nMicrosoft provides 3 different \"channels\" that are used for remoting.  They are HTTP, TCP and IPC.\n\nAny unauthorized use of a remoting application provides unauthorized access with FullTrust permissions to the system. This can potentially result in a loss of system integrity or confidentiality.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check the machine.config and the [application executable name].exe.config configuration files. \n\nFor 32 bit systems, the \"machine.config\" file is contained in the following folder. %SYSTEMROOT%\\Microsoft.NET\\Framework\\v4.0.30319\\Config \n\nFor 64 bit systems, the \"machine.config\" file is contained in the following folder. %SYSTEMROOT%\\Microsoft.NET\\Framework64\\v4.0.30319\\Config.\n\nMicrosoft specifies locating the application config file in the same folder as the application executable (.exe) file. However, the developer does have the capability to specify a different location when the application is compiled.  Therefore, if the config file is not found in the application home folder, a search of the system is required. If the [application name].exe.config file is not found on the system, then only a check of the machine.config file is required.\n\nSample machine/application config file:\n\n<application name=\u201cremoteserver\u201d> \n  <service> \n    <activated type=\u201csample.my.object, myobjects\u201d/> \n  </service> \n  <channels> \n    <channel ref=\u201ctcp server\u201d port=\u201c6134\u201d/> \n  </channels> \n</application>\n\n<serverProviders>\n  <provider ref=\"wsdl\" />\n  <formatter ref=\"soap\" typeFilterLevel=\"Full\" /> \n  <formatter ref=\"binary\" typeFilterLevel=\"Full\" /> \n</serverProviders> \n\nMicrosoft provides 3 \"channels\" that are used for remoting connectivity.  They are the HTTP, TCP, and IPC channels.  The channel that is used is specified via the <channels> element in the config file.  \n\nTCP channel example:\n<channel ref=\u201ctcp\u201d port=\u201c6134\u201d secure=\"true\"/> \n\nThe TCP Channel provides encryption and message integrity when the 'secure' flag is set to true as shown in the above example.\n\nIf the secure flag is not set to \"true\" for the TCP channel, this is a finding.", "FixText": "Ensure encryption and message integrity are used for TCP remoting channels.\n\nTCP remoting connections are protected via the secure=true configuration parameter.\n<channels>\n   <channel ref=\"tcp\" secure=\"true\" />\n</channels>\n\nInclude the secure=\"true\" flag in the channel ref parameter of the machine.config and [application name].exe.config file if the [application name].exe.config file exists on the system.", "CCI": "SV-42341,V-32025,CCI-001184"}, {"VulnID": "V-225238", "RuleID": "SV-225238r849750_rule", "StigID": "APPNET0075", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000383", "RuleTitle": "Disable TLS RC4 cipher in .Net", "Description": "<VulnDiscussion>Use of the RC4 cipher in TLS could allow an attacker to perform man-in-the-middle attacks and recover plaintext from encrypted sessions. Applications that target .Net version 4.x running on multiple Windows versions could be vulnerable to these types of attacks. The registry settings in this requirement will prevent .Net applications that target the 4.x framework from selecting and utilizing the Schannel.dll RC4 cipher for TLS connections. Applications that use TLS when connecting to remote systems will perform a handshake and negotiate the TLS version and cipher that is to be used between the client and the server. This is standard protocol for all TLS connections. If the server and client are not configured to use the same TLS version and cipher, the TLS connection may fail. Applications should be tested with these registry settings prior to production implementation of the fix in order to avoid application outages.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Use of the RC4 cipher in TLS could allow an attacker to perform man-in-the-middle attacks and recover plaintext from encrypted sessions. Applications that target .Net version 4.x running on multiple Windows versions could be vulnerable to these types of attacks. The registry settings in this requirement will prevent .Net applications that target the 4.x framework from selecting and utilizing the Schannel.dll RC4 cipher for TLS connections. Applications that use TLS when connecting to remote systems will perform a handshake and negotiate the TLS version and cipher that is to be used between the client and the server. This is standard protocol for all TLS connections. If the server and client are not configured to use the same TLS version and cipher, the TLS connection may fail. Applications should be tested with these registry settings prior to production implementation of the fix in order to avoid application outages.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Use regedit to review the following Windows registry keys:\n\nFor 32-bit systems: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319\\\n\nFor 64 bit systems:\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319\\\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework\\v4.0.30319\\\n\nIf the \u201cSchUseStrongCrypto\u201d value name does not exist, or is not a REG_DWORD type set to \u201c1\u201d, this is a finding.", "FixText": "Use regedit to access the following registry key.\n\nFor 32-bit systems:\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319\\\n\nFor 64-bit systems: \nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319\\\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\.NETFramework\\v4.0.30319\\\n\nModify or create the following Windows registry value: SchUseStrongCrypto\n\nSet SchUseStrongCrypto to a REG_DWORD value of \u201c1\u201d.", "CCI": "SV-96209,V-81495,CCI-001762"}]}