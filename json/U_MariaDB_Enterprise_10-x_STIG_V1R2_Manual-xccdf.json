{"Title": "MariaDB Enterprise 10.x Security Technical Implementation Guide", "Description": "This Security Technical Implementation Guide is published as a tool to improve the security of Department of Defense (DoD) information systems. The requirements are derived from the National Institute of Standards and Technology (NIST) 800-53 and related documents. Comments or proposed revisions to this document should be sent via email to the following address: disa.stig_spt@mail.mil.", "Version": "1", "Release": "2 ", "BenchmarkDate": "24 Aug 2022", "ReleaseInfo": "Release: 2 Benchmark Date: 24 Aug 2022", "Source": "STIG.DOD.MIL", "Notice": "terms-of-use", "Rules": [{"VulnID": "V-253666", "RuleID": "SV-253666r841523_rule", "StigID": "MADB-10-000100", "Severity": "low", "Cat": "CAT III", "Classification": "", "GroupTitle": "SRG-APP-000001-DB-000031", "RuleTitle": "MariaDB must limit the number of concurrent sessions to an organization-defined number per user for all accounts and/or account types.", "Description": "<VulnDiscussion>Database management includes the ability to control the number of users and user sessions utilizing MariaDB. Unlimited concurrent connections to MariaDB could allow a successful Denial of Service (DoS) attack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate users. Limiting the number of concurrent sessions per user is helpful in reducing these risks.\n\nThis requirement addresses concurrent session control for a single account. It does not address concurrent sessions by a single user via multiple system accounts; and it does not deal with the total number of sessions across all accounts.\n\nThe capability to limit the number of concurrent sessions per user must be configured in or added to MariaDB (for example, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit sessions via a web server or application server alone, because legitimate users and adversaries can potentially connect to MariaDB by other means.\n\nThe organization will need to define the maximum number of concurrent sessions by account type, by account, or a combination thereof. In deciding on the appropriate number, it is important to consider the work requirements of the various types of users. For example, 2 might be an acceptable limit for general users accessing the database via an application; but 10 might be too few for a database administrator using a database management GUI tool, where each query tab and navigation pane may count as a separate session.\n\n(Sessions may also be referred to as connections or logons, which for the purposes of this requirement are synonyms.)</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Database management includes the ability to control the number of users and user sessions utilizing MariaDB. Unlimited concurrent connections to MariaDB could allow a successful Denial of Service (DoS) attack by exhausting connection resources; and a system can also fail or be degraded by an overload of legitimate users. Limiting the number of concurrent sessions per user is helpful in reducing these risks.\n\nThis requirement addresses concurrent session control for a single account. It does not address concurrent sessions by a single user via multiple system accounts; and it does not deal with the total number of sessions across all accounts.\n\nThe capability to limit the number of concurrent sessions per user must be configured in or added to MariaDB (for example, by use of a logon trigger), when this is technically feasible. Note that it is not sufficient to limit sessions via a web server or application server alone, because legitimate users and adversaries can potentially connect to MariaDB by other means.\n\nThe organization will need to define the maximum number of concurrent sessions by account type, by account, or a combination thereof. In deciding on the appropriate number, it is important to consider the work requirements of the various types of users. For example, 2 might be an acceptable limit for general users accessing the database via an application; but 10 might be too few for a database administrator using a database management GUI tool, where each query tab and navigation pane may count as a separate session.\n\n(Sessions may also be referred to as connections or logons, which for the purposes of this requirement are synonyms.)", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "To check the number of connections allowed for each user, as the database administrator, run the following SQL:\n\nMariaDB> SELECT user, max_user_connections FROM mysql.user;\n\nIf any users have more connections configured than documented, this is a finding. A value of 0 indicates unlimited and is a finding.", "FixText": "To limit the number of connections allowed by a specific user, as a user with appropriate privileges, run the following SQL:\n\nMariaDB> GRANT USAGE ON *.* TO  'username'@'host'  WITH MAX_USER_CONNECTIONS number_of_connections;", "CCI": "CCI-000054"}, {"VulnID": "V-253667", "RuleID": "SV-253667r841526_rule", "StigID": "MADB-10-000200", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000023-DB-000001", "RuleTitle": "MariaDB must integrate with an organization-level authentication/access mechanism providing account management and automation for all users, groups, roles, and any other principals.", "Description": "<VulnDiscussion>Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nMariaDB must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organizations current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism supporting an organizations automated account management requirements.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Enterprise environments make account management for applications and databases challenging and complex. A manual process for account management functions adds the risk of a potential oversight or other error. Managing accounts for the same person in multiple places is inefficient and prone to problems with consistency and synchronization.\n\nA comprehensive application account management process that includes automation helps to ensure that accounts designated as requiring attention are consistently and promptly addressed. \n\nExamples include, but are not limited to, using automation to take action on multiple accounts designated as inactive, suspended, or terminated, or by disabling accounts located in noncentralized account stores, such as multiple servers. Account management functions can also include assignment of group or role membership; identifying account type; specifying user access authorizations (i.e., privileges); account removal, update, or termination; and administrative alerts. The use of automated mechanisms can include, for example: using email or text messaging to notify account managers when users are terminated or transferred; using the information system to monitor account usage; and using automated telephone notification to report atypical system account usage.\n\nMariaDB must be configured to automatically utilize organization-level account management functions, and these functions must immediately enforce the organizations current account policy. \n\nAutomation may be comprised of differing technologies that when placed together contain an overall mechanism supporting an organizations automated account management requirements.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If all accounts are authenticated by the organization-level authentication/access mechanism such as LDAP, Kerberos, Active Directory and not by MariaDB, this is not a finding.\n\nIf there are any accounts managed by the DBMS, review the system documentation for justification and approval of these accounts.\n\nIf any DBMS-managed accounts exist that are not documented and approved, this is a finding.\n\nAs the OS administrator, review the configuration files /etc/pam.d and /etc/pam.conf. If file is missing or not configured, this is a finding. Example for LDAP authentication and authorization via PAM would be /etc/pam.d/mariadb_ldap: \n\n#############################\nauth         required     pam_ldap.so\naccount    required     pam_ldap.so\n#############################\n\nVerify that PAM is by installed the following SQL:\n\nMariaDB> SHOW PLUGINS;\n\nIf pam is not listed as active, this is a finding.\n\nTo find users not using PAM plugin for authentication: \n\nMariaDB> SELECT user, host, plugin FROM mysql.user WHERE plugin != 'pam';\n\nIf any users are returned, this is a finding.", "FixText": "Integrate MariaDB security with an organization-level authentication/access mechanism providing account management for all users, groups, roles, and any other principals.\n\nAs the database administrator, install and configure the PAM authentication module:\n\nMariaDB> INSTALL SONAME 'auth_pam';\n\nPAM supports many authentication methods including LDAP, Active Directory, and Kerberos. Each method must be configured properly in /etc/pam.d and /etc/pam.conf. \n\nTo alter non-PAM authenticated users to using PAM:\n\nMariaDB> ALTER USER 'username'@'host' IDENTIFIED VIA pam USING mariadb_ldap;", "CCI": "CCI-000015"}, {"VulnID": "V-253668", "RuleID": "SV-253668r841529_rule", "StigID": "MADB-10-000300", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000033-DB-000084", "RuleTitle": "MariaDB must enforce approved authorizations for logical access to information and system resources in accordance with applicable access control policies.", "Description": "<VulnDiscussion>Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access MariaDB. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies.\n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications, a category that includes database management systems. If MariaDB does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Authentication with a DoD-approved PKI certificate does not necessarily imply authorization to access MariaDB. To mitigate the risk of unauthorized access to sensitive information by entities that have been issued certificates by DoD-approved PKIs, all DoD systems, including databases, must be properly configured to implement access control policies.\n\nSuccessful authentication must not automatically give an entity access to an asset or security boundary. Authorization procedures and controls must be implemented to ensure each authenticated entity also has a validated and current authorization. Authorization is the process of determining whether an entity, once authenticated, is permitted to access a specific asset. Information systems use access control policies and enforcement mechanisms to implement this requirement.\n\nAccess control policies include identity-based policies, role-based policies, and attribute-based policies. Access enforcement mechanisms include access control lists, access control matrices, and cryptography. These policies and mechanisms must be employed by the application to control access between users (or processes acting on behalf of users) and objects (e.g., devices, files, records, processes, programs, and domains) in the information system.\n\nThis requirement is applicable to access control enforcement applications, a category that includes database management systems. If MariaDB does not follow applicable policy when approving access, it may be in conflict with networks or other applications in the information system. This may result in users either gaining or being denied access inappropriately and in conflict with applicable policy.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "From the system security plan or equivalent documentation, determine the appropriate permissions on database objects for each kind (group role) of user. If this documentation is missing, this is a finding.\n\nFirst, as the database administrator, check the privileges of all users and roles in the database.\n\nFind all users:\nMariaDB> SELECT user, host FROM mysql.user WHERE is_role = 'N';\n\nFind all roles:\nMariaDB> SELECT user FROM mysql.user WHERE is_role = 'Y';\n\nFor each user found, check grants:\n\nMariaDB> SHOW GRANTS FOR 'username'@'host';\n\nFor each role found, check grants: \n\nMariaDB> SHOW GRANTS FOR 'rolename';\n\nReview all users and roles and their associated privileges. If any users and/or roles privileges exceed those documented, this is a finding.\n\nAs the database administrator, check the configured authentication settings:\n\nMariaDB> SHOW PLUGINS;\n\nTo find users not using PAM plugin for authentication: \n\nMariaDB> SELECT user, host, plugin FROM mysql.user WHERE plugin != 'pam';\n\nIf any users are returned, this is a finding. \n\nReview all entries and their associated authentication methods. If any entries do not have their documented authentication requirements, this is a finding.", "FixText": "Create and/or maintain documentation of each group roles appropriate permissions on database objects.\n\nImplement these permissions in the database and remove any permissions that exceed those documented.\n \nThe following are examples of how to use role privileges in MariaDB to enforce access controls. Run these as the database administrator.\nFor a complete list of privileges, see the official documentation: https://mariadb.com/kb/en/grant/ \n\n#### Roles Example 1\nThe following example demonstrates how to create an admin role with SHUTDOWN privileges.\n\nAs the database administrator, run the following SQL:\n\nMariaDB> CREATE ROLE admin;\nMariaDB> GRANT SHUTDOWN ON *.* TO admin;\n\n#### Roles Example 2\nThe following example demonstrates how to create a user make the user a member of the admin role.\n\nAs the database administrator, run the following SQL:\n\nMariaDB> CREATE USER 'admin_user'@'host' IDENTIFIED VIA PAM;\nMariaDB> GRANT admin TO 'admin_user'@'%';\n\n#### Roles Example 3\nThe following demonstrates how to revoke privileges from a role using REVOKE.\n\nAs the database administrator, run the following SQL:\n\nMariaDB> REVOKE admin FROM 'admin_user'@'host';\n\n#### Roles Example 4\nThe following demonstrates how to modify privileges for a role using GRANT.\n\nAs the database administrator, run the following SQL:\n\nMariaDB> GRANT PROCESS ON *.* TO admin;\n\nThe following are examples of how to use grant privileges in MariaDB to enforce access controls on objects.\n\n#### Grant Example 1\nThe following example demonstrates how to grant INSERT on a table to a role.\n\nAs the database administrator, run the following SQL:\n\nMariaDB> GRANT INSERT ON test.t1 TO admin;\n\n#### Grant Example 2\nThe following example demonstrates how to grant ALL PRIVILEGES on a table to a role.\n\nAs the database administrator, run the following SQL:\n\nMariaDB> GRANT ALL PRIVILEGES ON test.t1 TO admin;\n\n#### Grant Example 3\nThe following example demonstrates how to grant a role to a role.\n\nAs the database administrator, run the following SQL:\n\nMariaDB> CREATE ROLE admin_master;\nMariaDB> GRANT admin TO admin_master;\n\n#### Revoke Example 1\nThe following example demonstrates how to revoke access from a role.\n\nAs the database administrator, run the following SQL:\n\nMariaDB> REVOKE PROCESS ON *.* FROM admin;\n\nTo change authentication requirements for the database, as the OS administrator, review the configuration files /etc/pam.d and /etc/pam.conf. \n\nAfter changes to the configuration files /etc/pam.d and /etc/pam.conf, reload the server:\n# SYSTEMD SERVER ONLY\n$ sudo systemctl reload mariadb\n# INITD SERVER ONLY\n$ sudo service mariadb reload", "CCI": "CCI-000213"}, {"VulnID": "V-253669", "RuleID": "SV-253669r841532_rule", "StigID": "MADB-10-000400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000080-DB-000063", "RuleTitle": "MariaDB must protect against a user falsely repudiating having performed organization-defined actions.", "Description": "<VulnDiscussion>Nonrepudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring MariaDB\u2019s audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to MariaDB, even where the application connects to MariaDB with a standard, shared account.\n\nIt is recommended to not allow shared accounts, including root. The root user is known by all attackers, and often used in attempted attacks on the database servers.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Nonrepudiation of actions taken is required in order to maintain data integrity. Examples of particular actions taken by individuals include creating information, sending a message, approving information (e.g., indicating concurrence or signing a contract), and receiving a message. \n\nNonrepudiation protects against later claims by a user of not having created, modified, or deleted a particular data item or collection of data in the database.\n\nIn designing a database, the organization must define the types of data and the user actions that must be protected from repudiation. The implementation must then include building audit features into the application data tables and configuring MariaDB\u2019s audit tools to capture the necessary audit trail. Design and implementation also must ensure that applications pass individual user identification to MariaDB, even where the application connects to MariaDB with a standard, shared account.\n\nIt is recommended to not allow shared accounts, including root. The root user is known by all attackers, and often used in attempted attacks on the database servers.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "All users should have individual accounts with appropriate privileges. The root user should be removed after administrative accounts with SUPER privilege are created. Query all users and determine if any are suspected shared accounts. Document any necessary shared accounts. \n\nMariaDB> SELECT user, host FROM mysql.user; \n\nDetermine if any accounts are shared. A shared account is defined as a username, hostname, and password that are used by multiple individuals to log in to MariaDB. An example of a shared account is the MariaDB root account \u2013 root@localhost.\n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. \n\nIf individuals are not individually authenticated before using the shared account (e.g., by the operating system or possibly by an application making calls to the database), this is a finding. \n\nThe key is individual accountability. If this can be traced, this is not a finding.\n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding.\n\nReview contents of audit logs, traces, and data tables to confirm the identity of the individual user performing the action is captured.\n\nIf shared identifiers are found, and not accompanied by individual identifiers, this is a finding.", "FixText": "Remove shared accounts which are not documented and have been determined to not be necessary.\n\nMariaDB> DROP USER 'user'@'hostname';", "CCI": "CCI-000166"}, {"VulnID": "V-253670", "RuleID": "SV-253670r841535_rule", "StigID": "MADB-10-000500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000089-DB-000064", "RuleTitle": "MariaDB must provide audit record generation capability for DoD-defined auditable events within all DBMS/database components.", "Description": "<VulnDiscussion>Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within MariaDB (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which MariaDB will provide an audit record generation capability as the following: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without the capability to generate audit records, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit records can be generated from various components within MariaDB (e.g., process, module). Certain specific application functionalities may be audited as well. The list of audited events is the set of events for which audits are to be generated. This set of events is typically a subset of the list of all events for which the system is capable of generating audit records.\n\nDoD has defined the list of events for which MariaDB will provide an audit record generation capability as the following: \n\n(i) Successful and unsuccessful attempts to access, modify, or delete privileges, security objects, security levels, or categories of information (e.g., classification levels);\n\n(ii) Access actions, such as successful and unsuccessful logon attempts, privileged activities, or other system-level access, starting and ending time for user access to the system, concurrent logons from different workstations, successful and unsuccessful accesses to objects, all program initiations, and all direct access to the information system; and\n\n(iii) All account creation, modification, disabling, and termination actions.\n\nOrganizations may define additional events requiring continuous or ad hoc auditing.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify audit filters match organization-defined auditing requirements. If not, this is a finding.", "FixText": "Configure MariaDB to generate audit records for at least the DoD minimum set of events.\n\nEdit the mariadb-enterprise.cnf configuration file located in /etc/my.cnf.d/.\n\nUnder [mariadb], add the following: \n\nserver_audit_logging = ON \n\nSave the configuration file. This change will not take effect until MariaDB Enterprise Server is restarted. \n\nUsing the MariaDB Enterprise Audit plugin, MariaDB can be configured to audit these requests. \n\nThe MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters. Ex: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));\n\nMore information about MariaDB auditing can be found here: https://mariadb.com/docs/security/mariadb-enterprise-audit/", "CCI": "CCI-000169"}, {"VulnID": "V-253671", "RuleID": "SV-253671r841538_rule", "StigID": "MADB-10-000600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000090-DB-000065", "RuleTitle": "MariaDB must allow only the ISSM (or individuals or roles appointed by the ISSM) to select which auditable events are to be audited.", "Description": "<VulnDiscussion>Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.\n\nSuppression of auditing could permit an adversary to evade detection.\n\nMisconfigured audits can degrade the systems performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without the capability to restrict which roles and individuals can select which events are audited, unauthorized personnel may be able to prevent or interfere with the auditing of critical events.\n\nSuppression of auditing could permit an adversary to evade detection.\n\nMisconfigured audits can degrade the systems performance by overwhelming the audit log. Misconfigured audits may also make it more difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "MariaDB Enterprise Audit plugin stores audit filters in the table mysql.server_audit_filters. Any users with update/delete/insert access to this table can modify the audit filters. \n\nUsers with global insert, update, delete, and/or drop privileges can modify audit filters. Find users with global insert, update, delete, and/or drop privileges: \n\nMariaDB> SELECT user, host, insert_priv, update_priv, delete_priv, drop_priv \nFROM mysql.user \nWHERE insert_priv = 'y'\nOR update_priv = 'y'\nOR delete_priv = 'y'\nOR drop_priv = 'y';\n\nUsers with insert, update, delete, and/or drop privileges on the mysql database can modify audit filters. Find users with insert, update, delete, and/or drop privileges on the mysql database: \n\nMariaDB> SELECT user, host, insert_priv, update_priv, delete_priv, drop_priv \nFROM mysql.db \nWHERE db = 'mysql'\nAND (insert_priv = 'y' \n  OR update_priv = 'y'\n  OR delete_priv = 'y'\n  OR drop_priv = 'y'\n  );\n\nUsers with insert, update, delete, and/or drop privileges on the server_audit_filters and server_audit_users tables can modify audit filters. Find users with insert, update, delete, and/or drop privileges on the mysql database: \n\nMariaDB> SELECT user, host, db, table_name, grantor, table_priv, timestamp, column_priv\nFROM mysql.tables_priv\nWHERE db = 'mysql'\nAND table_name IN ('server_audit_filters','server_audit_users')\nAND (table_priv LIKE '%Insert%'\n  OR table_priv LIKE '%Update%'\n  OR table_priv LIKE '%Delete%'\n  OR table_priv LIKE '%Drop%'\n);\n\nIf any users with the above privileges are found which should not have access to modify audit filters, this is a finding.", "FixText": "Grant the necessary privileges to authorized users. Example: \n\nMariaDB> GRANT ALL PRIVILEGES ON mysql.server_audit_filters TO 'username'@'host';\nMariaDB> GRANT ALL PRIVILEGES ON mysql.server_audit_users TO 'username'@'host';\n\nFor users found with access who are not authorized to modify audit filters, review the user's privileges, and update accordingly.", "CCI": "CCI-000171"}, {"VulnID": "V-253672", "RuleID": "SV-253672r841541_rule", "StigID": "MADB-10-000700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000091-DB-000066", "RuleTitle": "MariaDB must be able to generate audit records when privileges/permissions are retrieved.", "Description": "<VulnDiscussion>Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. MariaDB makes such information available through an audit log file.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that MariaDB continually performs to determine if any and every action on the database is permitted.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. MariaDB makes such information available through an audit log file.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that MariaDB continually performs to determine if any and every action on the database is permitted.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events ALL is included in corresponding audit filters. If not, this is a finding.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nAs a Linux user with sufficient privileges to view logs, tail the audit log file.\n\n$ tail -f /var/log/mysql/server_audit.log (default location)\n\nIn another terminal run: \n\nMariaDB> SHOW GRANTS;\n\nIf an audit record is not produced in the first terminal, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253673", "RuleID": "SV-253673r841544_rule", "StigID": "MADB-10-000800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000091-DB-000325", "RuleTitle": "MariaDB must be able to generate audit records when unsuccessful attempts to retrieve privileges/permissions occur.", "Description": "<VulnDiscussion>Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. MariaDB makes such information available through an audit log file.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that MariaDB continually performs to determine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Under some circumstances, it may be useful to monitor who/what is reading privilege/permission/role information. Therefore, it must be possible to configure auditing to do this. MariaDB makes such information available through an audit log file.\n\nThis requirement addresses explicit requests for privilege/permission/role membership information. It does not refer to the implicit retrieval of privileges/permissions/role memberships that MariaDB continually performs to determine if any and every action on the database is permitted.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the database administrator, create a user by running the following SQL:\n\nMariaDB> CREATE USER 'test_user'@'localhost' IDENTIFIED BY 'test_user_password';\n\nIn one terminal, tail the audit log file:\n\ntail -F /var/lib/mysql/server_audit.log (default location)\n\nIn another terminal attempt to retrieve information from the MariaDB table, mysql.roles_mapping, by logging in as the test_user and running a query which it does not have privileges to do, for example: \n\n$ mariadb -u test_user -p\n\nMariaDB> SELECT * FROM mysql.roles_mapping;\n  \nThe audit log will show:\n20190321 21:39:20,5a7e16cc51f7, test_user ,localhost,127,394,QUERY,, select * from mysql.roles_mapping ,1142\n  \nTo find failed queries, look for two elements: The notation indicating that it is a\u00a0QUERY\u00a0entry, and the last value for the entry. If the query is unsuccessful, the value will be\u00a0NOT EQUAL TO 0.\n  \nIf the above steps cannot verify that audit records are produced when MariaDB denies retrieval of privileges/permissions/role memberships, this is a finding. \n\nIf an audit record is not produced in the first terminal, this is a finding.", "FixText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nUpdate the filters as necessary.", "CCI": "CCI-000172"}, {"VulnID": "V-253674", "RuleID": "SV-253674r841547_rule", "StigID": "MADB-10-000900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000092-DB-000208", "RuleTitle": "MariaDB must initiate session auditing upon startup.", "Description": "<VulnDiscussion>Session auditing is for use when a user's activities are under investigation. To be sure of capturing all activity during those periods when session auditing is in use, it must be in operation for the whole time MariaDB is running.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Session auditing is for use when a user's activities are under investigation. To be sure of capturing all activity during those periods when session auditing is in use, it must be in operation for the whole time MariaDB is running.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place for user by running the following as an administrative user: \n\nMariaDB> SELECT sau.host, sau.user, saf.filtername,\n   JSON_DETAILED(saf.rule)\nFROM mysql.server_audit_filters saf\nJOIN mysql.server_audit_users sau\n   ON saf.filtername = sau.filtername\nWHERE saf.filtername != 'default'\\G\n\nVerify the corresponding audit filters are in place. If not, this is a finding.", "FixText": "If not already exists, create a named filter with the required auditing for the user in question. Example: \n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('session_auditing',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"table_event\":[\n               \"WRITE\",\n               \"CREATE\",\n               \"DROP\",\n               \"RENAME\",\n               \"ALTER\"\n            ]\n         }'\n      ));\n\nThen assign the named filter to the user. Example:\n\nMariaDB> INSERT INTO mysql.server_audit_users (host, user, filtername) VALUES (\"%\", \"username\", \"session_auditing\");\n\nReload filters. \n\nMariaDB> SET GLOBAL server_audit_reload_filters = ON;", "CCI": "CCI-001464"}, {"VulnID": "V-253675", "RuleID": "SV-253675r841550_rule", "StigID": "MADB-10-001000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000095-DB-000039", "RuleTitle": "MariaDB must produce audit records containing sufficient information to establish what type of events occurred.", "Description": "<VulnDiscussion>Information system auditing capability is critical for accurate forensic analysis. Without establishing what type of event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit record content that may be necessary to satisfy the requirement of this policy includes, for example, time stamps, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information system auditing capability is critical for accurate forensic analysis. Without establishing what type of event occurred, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nAudit record content that may be necessary to satisfy the requirement of this policy includes, for example, time stamps, user/process identifiers, event descriptions, success/fail indications, filenames involved, and access control or flow control rules invoked.\n\nAssociating event types with detected events in the application and audit logs provides a means of investigating an attack; recognizing resource utilization or capacity thresholds; or identifying an improperly configured application. \n\nDatabase software is capable of a range of actions on data stored within the database. It is important, for accurate forensic analysis, to know exactly what actions were performed. This requires specific information regarding the event type an audit record is referring to. If event type information is not recorded and stored with the audit record, the record itself is of very limited use.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nLog in to MariaDB Enterprise Server and verify the audit log location. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nVerify the necessary audit filters are in place: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nIn another terminal, view the audit log file: \n\n$ tail -f /var/log/mysql/audit.log\n\nBack in the MariaDB shell, run a query which matches an audit filter. Example if query_events is ALL:\n\nMariaDB> SELECT * FROM mysql.help_topic;\n\nVerify the entry was logged in the audit log and contains the necessary event type information. If not, this is a finding.", "FixText": "Update necessary audit filters. For example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000130"}, {"VulnID": "V-253676", "RuleID": "SV-253676r841553_rule", "StigID": "MADB-10-001600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000101-DB-000044", "RuleTitle": "MariaDB must include additional, more detailed, organization-defined information in the audit records for audit events identified by type, location, or subject.", "Description": "<VulnDiscussion>Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of users of shared accounts, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of shared account users.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information system auditing capability is critical for accurate forensic analysis. Reconstruction of harmful events or forensic analysis is not possible if audit records do not contain enough information. To support analysis, some types of events will need information to be logged that exceeds the basic requirements of event type, time stamps, location, source, outcome, and user identity. If additional information is not available, it could negatively impact forensic investigations into user actions or other malicious events.\n\nThe organization must determine what additional information is required for complete analysis of the audited events. The additional information required is dependent on the type of information (e.g., sensitivity of the data and the environment within which it resides). At a minimum, the organization must employ either full-text recording of privileged commands or the individual identities of users of shared accounts, or both. The organization must maintain audit trails in sufficient detail to reconstruct events to determine the cause and impact of compromise. \n\nExamples of detailed information the organization may require in audit records are full-text recording of privileged commands or the individual identities of shared account users.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nLog in to MariaDB Enterprise Server and verify the audit log location. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nVerify the necessary audit filters are in place: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nIn another terminal, view the audit log file: \n\n$ tail -f /var/log/mysql/audit.log\n\nBack in the MariaDB shell, run a query which matches an audit filter. Example if query_events is ALL:\n\nMariaDB> SELECT * FROM mysql.help_topic;\n\nVerify the entry was logged in the audit log and contains the necessary event user information. If not, this is a finding.", "FixText": "Update necessary audit filters. For example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000135"}, {"VulnID": "V-253677", "RuleID": "SV-253677r841556_rule", "StigID": "MADB-10-001700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000109-DB-000049", "RuleTitle": "MariaDB must by default shut down upon audit failure, to include the unavailability of space for more audit log records; or must be configurable to shut down upon audit failure.", "Description": "<VulnDiscussion>It is critical that when MariaDB is at risk of failing to process audit logs as required, an action is taken to mitigate the failure. Audit processing failures include software/hardware errors; failures in the audit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure depend upon the nature of the failure mode. \n\nWhen the need for system availability does not outweigh the need for a complete audit trail, the DBMS should shut down immediately, rolling back all in-flight transactions.\n\nSystems where audit trail completeness is paramount will most likely be at a lower MAC level than MAC I; the final determination is the prerogative of the application owner, subject to Authorizing Official concurrence. In any case, sufficient auditing resources must be allocated to avoid a shutdown in all but the most extreme situations.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "It is critical that when MariaDB is at risk of failing to process audit logs as required, an action is taken to mitigate the failure. Audit processing failures include software/hardware errors; failures in the audit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure depend upon the nature of the failure mode. \n\nWhen the need for system availability does not outweigh the need for a complete audit trail, the DBMS should shut down immediately, rolling back all in-flight transactions.\n\nSystems where audit trail completeness is paramount will most likely be at a lower MAC level than MAC I; the final determination is the prerogative of the application owner, subject to Authorizing Official concurrence. In any case, sufficient auditing resources must be allocated to avoid a shutdown in all but the most extreme situations.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If the application owner has determined that the need for system availability outweighs the need for a complete audit trail, this is not applicable (NA). \n\nOtherwise, review the procedures, manual and/or automated, for monitoring the space used by audit trail(s) and for off-loading audit records to a centralized log management system.\n\nIf the procedures do not exist, this is a finding.\n\nIf the procedures exist, request evidence that they are followed. If the evidence indicates that the procedures are not followed, this is a finding.\n\nIf the procedures exist, inquire if the system has ever run out of audit trail space in the last two years or since the last system upgrade, whichever is more recent. If it has run out of space in this period, and the procedures have not been updated to compensate, this is a finding.", "FixText": "Modify DBMS, OS, or third-party logging application settings to alert appropriate personnel when a specific percentage of log storage capacity is reached.", "CCI": "CCI-000140"}, {"VulnID": "V-253678", "RuleID": "SV-253678r841559_rule", "StigID": "MADB-10-001800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000109-DB-000321", "RuleTitle": "MariaDB must be configurable to overwrite audit log records, oldest first (First-In-First-Out - FIFO), in the event of unavailability of space for more audit log records.", "Description": "<VulnDiscussion>It is critical that when MariaDB is at risk of failing to process audit logs as required, it take action to mitigate the failure. Audit processing failures include software/hardware errors; failures in the audit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure depend upon the nature of the failure mode. \n\nWhen availability is an overriding concern, approved actions in response to an audit failure are as follows: \n\n(i) If the failure was caused by the lack of audit record storage capacity, the DBMS must continue generating audit records, if possible (automatically restarting the audit service if necessary), overwriting the oldest audit records in a first-in-first-out manner.\n\n(ii) If audit records are sent to a centralized collection server and communication with this server is lost or the server fails, the DBMS must queue audit records locally until communication is restored or until the audit records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local audit data with the collection server.\n\nSystems where availability is paramount will most likely be MAC I; the final determination is the prerogative of the application owner, subject to Authorizing Official concurrence. In any case, sufficient auditing resources must be allocated to avoid audit data loss in all but the most extreme situations.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "It is critical that when MariaDB is at risk of failing to process audit logs as required, it take action to mitigate the failure. Audit processing failures include software/hardware errors; failures in the audit capturing mechanisms; and audit storage capacity being reached or exceeded. Responses to audit failure depend upon the nature of the failure mode. \n\nWhen availability is an overriding concern, approved actions in response to an audit failure are as follows: \n\n(i) If the failure was caused by the lack of audit record storage capacity, the DBMS must continue generating audit records, if possible (automatically restarting the audit service if necessary), overwriting the oldest audit records in a first-in-first-out manner.\n\n(ii) If audit records are sent to a centralized collection server and communication with this server is lost or the server fails, the DBMS must queue audit records locally until communication is restored or until the audit records are retrieved manually. Upon restoration of the connection to the centralized collection server, action should be taken to synchronize the local audit data with the collection server.\n\nSystems where availability is paramount will most likely be MAC I; the final determination is the prerogative of the application owner, subject to Authorizing Official concurrence. In any case, sufficient auditing resources must be allocated to avoid audit data loss in all but the most extreme situations.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If the application owner has determined that the need for system availability outweighs the need for a complete audit trail, this is not applicable (NA). \n\nIf an externally managed and monitored partition or logical volume that can be grown dynamically is being used for logging, this is not a finding. \n\nIf MariaDB is auditing to a directory that is not being actively checked for availability of disk space, and if a tool, utility, script, or other mechanism is not being used to ensure sufficient disk space is available for the creation of new audit logs, this is a finding.\n\nIf a tool, utility, script, or other mechanism is being used to rotate audit logs, and oldest logs are not being removed to ensure sufficient space for newest logs, or oldest logs are not being replaced by newest logs, this is a finding.", "FixText": "Establish a process with accompanying tools for monitoring available disk space and ensuring that sufficient disk space is maintained to continue generating audit logs, overwriting the oldest existing records if necessary.\n\nTo set up the audit logs to write to sylog:\n\nEdit the mariadb-enterprise.cnf file. Add the following under the [mariadb] section: \n\nserver_audit_output_type = 'syslog' \n\nAfter the .cnf file is updated and saved, the mariadb database service must be restarted.\n\nIf not writing to syslog, log rotation and purging should be configured.", "CCI": "CCI-000140"}, {"VulnID": "V-253679", "RuleID": "SV-253679r841562_rule", "StigID": "MADB-10-002000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000118-DB-000059", "RuleTitle": "The audit information produced by MariaDB must be protected from unauthorized read access.", "Description": "<VulnDiscussion>If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.\n\nThis requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is difficult, if not impossible, to achieve. In addition, access to audit records provides information an attacker could potentially use to his or her advantage.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from any and all unauthorized access. This includes read, write, copy, etc.\n\nThis requirement can be achieved through multiple methods which will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections and limiting log data location. \n\nAdditionally, applications with user interfaces to audit records should not allow for the unfettered manipulation of or access to those records via the application. If the application provides access to the audit data, the application becomes accountable for ensuring that audit information is protected from unauthorized access.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine if the MariaDB Enterprise Audit plugin is logging to a file or syslog. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_output_type';\n \nIf FILE, find the location of the audit log:\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nIf FILE, check the permission of the file: \n\n$ sudo ls -al /path/to/audit.log\n \nConsult the organization's security guide on acceptable permissions and ownership of logs with respect to who can modify them. Verify the log files have the set configurations. \n \nIf the permissions are not set to the organization's standards, this is a finding.\n  \nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "FixText": "If the audit.log file permissions do not comply with organization's standards, change the permissions. Example: \n\n$ chown user:group /path/to/audit.log\n$ chmod 660 /path/to/audit.log\n\nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "CCI": "CCI-000162"}, {"VulnID": "V-253680", "RuleID": "SV-253680r841565_rule", "StigID": "MADB-10-002100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000119-DB-000060", "RuleTitle": "The audit information produced by MariaDB must be protected from unauthorized modification.", "Description": "<VulnDiscussion>If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve. \n\nTo ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification. \n\nThis requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations. \n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys to make access decisions regarding the modification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. \n\nModification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve. \n\nTo ensure the veracity of audit data the information system and/or the application must protect audit information from unauthorized modification. \n\nThis requirement can be achieved through multiple methods that will depend upon system architecture and design. Some commonly employed methods include ensuring log files enjoy the proper file system permissions and limiting log data locations. \n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights that the user enjoys to make access decisions regarding the modification of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity. \n\nModification of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine if the MariaDB Enterprise Audit plugin is logging to a file or syslog. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_output_type';\n \nIf FILE, find the location of the audit log:\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nIf FILE, check the permission of the file: \n\n$ sudo ls -al /path/to/audit.log\n \nConsult the organization's security guide on acceptable permissions and ownership of logs with respect to who can modify them. Verify the log files have the set configurations. \n \nIf the permissions are not set to the organization's standards, this is a finding.\n  \nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "FixText": "If the audit.log file permissions do not comply with organization's standards, change the permissions. Example: \n\n$ chown user:group /path/to/audit.log\n$ chmod 660 /path/to/audit.log\n\nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "CCI": "CCI-000163"}, {"VulnID": "V-253681", "RuleID": "SV-253681r841568_rule", "StigID": "MADB-10-002200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000120-DB-000061", "RuleTitle": "The audit information produced by MariaDB must be protected from unauthorized deletion.", "Description": "<VulnDiscussion>If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.\n\nSome commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys to make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If audit data were to become compromised, then competent forensic analysis and discovery of the true source of potentially malicious system activity is impossible to achieve.\n\nTo ensure the veracity of audit data, the information system and/or the application must protect audit information from unauthorized deletion. This requirement can be achieved through multiple methods which will depend upon system architecture and design.\n\nSome commonly employed methods include ensuring log files enjoy the proper file system permissions utilizing file system protections; restricting access; and backing up log data to ensure log data is retained.\n\nApplications providing a user interface to audit data will leverage user permissions and roles identifying the user accessing the data and the corresponding rights the user enjoys to make access decisions regarding the deletion of audit data.\n\nAudit information includes all information (e.g., audit records, audit settings, and audit reports) needed to successfully audit information system activity.\n\nDeletion of database audit data could mask the theft of, or the unauthorized modification of, sensitive data stored in the database.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine if the MariaDB Enterprise Audit plugin is logging to a file or syslog. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_output_type';\n \nIf FILE, find the location of the audit log:\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nIf FILE, check the permission of the file: \n\n$ sudo ls -al /path/to/audit.log\n \nConsult the organization's security guide on acceptable permissions and ownership of logs with respect to who can modify them. Verify the log files have the set configurations. \n \nIf the permissions are not set to the organization's standards, this is a finding.\n  \nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "FixText": "If the audit.log file permissions do not comply with organization's standards, change the permissions. Example: \n\n$ chown user:group /path/to/audit.log\n$ chmod 660 /path/to/audit.log\n\nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "CCI": "CCI-000164"}, {"VulnID": "V-253682", "RuleID": "SV-253682r841571_rule", "StigID": "MADB-10-002300", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000121-DB-000202", "RuleTitle": "MariaDB must protect its audit features from unauthorized access.", "Description": "<VulnDiscussion>Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access. \n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys to make access decisions regarding the access to audit tools.\n\nAudit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records. \n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. \n\nDepending upon the log format and application, system and application log tools may provide the only means to manipulate and manage application and system log data. It is, therefore, imperative that access to audit tools be controlled and protected from unauthorized access. \n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys to make access decisions regarding the access to audit tools.\n\nAudit tools include, but are not limited to, OS-provided audit tools, vendor-provided audit tools, and open source audit tools needed to successfully view and manipulate audit information system activity and records. \n\nIf an attacker were to gain access to audit tools, he could analyze audit logs for system weaknesses or weaknesses in the auditing itself. An attacker could also manipulate logs to hide evidence of malicious activity.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine if the MariaDB Enterprise Audit plugin is logging to a file or syslog. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_output_type';\n \nIf FILE, find the location of the audit log:\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nIf FILE, check the permission of the file: \n\n$ sudo ls -al /path/to/audit.log\n \nConsult the organization's security guide on acceptable permissions and ownership of logs with respect to who can modify them. Verify the log files have the set configurations. \n \nIf the permissions are not set to the organization's standards, this is a finding.\n  \nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "FixText": "If the audit.log file permissions do not comply with organization's standards, change the permissions. Example: \n\n$ chown user:group /path/to/audit.log\n$ chmod 660 /path/to/audit.log\n\nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "CCI": "CCI-001493"}, {"VulnID": "V-253683", "RuleID": "SV-253683r841574_rule", "StigID": "MADB-10-002400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000122-DB-000203", "RuleTitle": "MariaDB must protect its audit configuration from unauthorized modification.", "Description": "<VulnDiscussion>Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys to make access decisions regarding the modification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys to make access decisions regarding the modification of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine if the MariaDB Enterprise Audit plugin is logging to a file or syslog. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_output_type';\n \nIf FILE, find the location of the audit log:\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nIf FILE, check the permission of the file: \n\n$ sudo ls -al /path/to/audit.log\n \nConsult the organization's security guide on acceptable permissions and ownership of logs with respect to who can modify them. Verify the log files have the set configurations. \n \nIf the permissions are not set to the organization's standards, this is a finding.\n  \nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "FixText": "If the audit.log file permissions do not comply with organization's standards, change the permissions. Example: \n\n$ chown user:group /path/to/audit.log\n$ chmod 660 /path/to/audit.log\n\nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "CCI": "CCI-001494"}, {"VulnID": "V-253684", "RuleID": "SV-253684r841577_rule", "StigID": "MADB-10-002500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000123-DB-000204", "RuleTitle": "MariaDB must protect its audit features from unauthorized removal.", "Description": "<VulnDiscussion>Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys to make access decisions regarding the deletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open-source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Protecting audit data also includes identifying and protecting the tools used to view and manipulate log data. Therefore, protecting audit tools is necessary to prevent unauthorized operation on audit data.\n\nApplications providing tools to interface with audit data will leverage user permissions and roles identifying the user accessing the tools and the corresponding rights the user enjoys to make access decisions regarding the deletion of audit tools.\n\nAudit tools include, but are not limited to, vendor-provided and open-source audit tools needed to successfully view and manipulate audit information system activity and records. Audit tools include custom queries and report generators.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine if the MariaDB Enterprise Audit plugin is logging to a file or syslog. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_output_type';\n \nIf FILE, find the location of the audit log:\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_file_path';\n\nIf FILE, check the permission of the file: \n\n$ sudo ls -al /path/to/audit.log\n\nConsult the organization's security guide on acceptable permissions and ownership of logs with respect to who can modify them. Verify the log files have the set configurations. \n \nIf the permissions are not set to the organization's standards, this is a finding.\n  \nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "FixText": "If the audit.log file permissions do not comply with organization's standards, change the permissions. Example: \n\n$ chown user:group /path/to/audit.log\n$ chmod 660 /path/to/audit.log\n\nIf the MariaDB server is configured to use syslog for logging, consult the organization's syslog setting for permissions and ownership of logs with respect to who can modify them.", "CCI": "CCI-001495"}, {"VulnID": "V-253685", "RuleID": "SV-253685r841580_rule", "StigID": "MADB-10-002600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000133-DB-000179", "RuleTitle": "MariaDB must limit privileges to change software modules, to include stored procedures, functions and triggers, and links to software external to the DBMS.", "Description": "<VulnDiscussion>If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n \nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database code can lead to unauthorized or compromised installations.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If the system were to allow any user to make changes to software libraries, those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n \nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database code can lead to unauthorized or compromised installations.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review documentation to determine which users are authorized to modify the MariaDB Enterprise Server binary files and shared library paths. \n \nIf any unauthorized users are granted modify rights, this is a finding.\n\nCheck what users have access to install/uninstall MariaDB Enterprise Server plugins. This privilege can be listed in one of three places: Table level, database level, or global. \n\nTable level:\n\nMariaDB> SELECT user, host FROM mysql.tables_priv WHERE db = 'mysql' and table_name = ' plugin';\n\nDatabase level:\n\nMariaDB> SELECT user, host FROM mysql.db WHERE db = 'mysql' and (insert_priv = 'y') or (delete_priv = 'y') or (insert_priv = 'y' and delete_priv = 'y');\n\nGlobal: \n\nSELECT user, host FROM mysql.user WHERE (insert_priv = 'y') or (delete_priv = 'y') or (insert_priv = 'y' and delete_priv = 'y');\n\nIf any user identified by the above queries is not authorized to install/uninstall MariaDB Enterprise Server plugins, this is a finding. \n\nReview monitoring procedures and implementation evidence to verify monitoring of changes to database software libraries, related applications, and configuration files is done.\n\nVerify the list of files and directories being monitored is complete.\n\nIf monitoring does not occur or is not complete, this is a finding.", "FixText": "Remove privileges from users identified as not authorized to install/uninstall MariaDB Enterprise Server plugins.  \n\nImplement procedures to monitor for unauthorized changes to DBMS software libraries, related software application libraries, and configuration files. If a third-party automated tool is not employed, an automated job that reports file information on the directories and files of interest and compares them to the baseline report for the same will meet the requirement.", "CCI": "CCI-001499"}, {"VulnID": "V-253686", "RuleID": "SV-253686r841583_rule", "StigID": "MADB-10-002700", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000133-DB-000198", "RuleTitle": "The MariaDB software installation account must be restricted to authorized users.", "Description": "<VulnDiscussion>When dealing with change control issues, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can have significant effects on the overall security of the system. \n\nIf the system were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nDBA and other privileged administrative or application owner accounts are granted privileges that allow actions that can have a great impact on database security and operation. It is especially important to grant privileged access to only those persons who are qualified and authorized to use them.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "When dealing with change control issues, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can have significant effects on the overall security of the system. \n\nIf the system were to allow any user to make changes to software libraries, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nDBA and other privileged administrative or application owner accounts are granted privileges that allow actions that can have a great impact on database security and operation. It is especially important to grant privileged access to only those persons who are qualified and authorized to use them.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review procedures for controlling, granting access to, and tracking use of the MariaDB software installation account.\n\nIf access or use of this account is not restricted to the minimum number of personnel required or if unauthorized access to the account has been granted, this is a finding.", "FixText": "Develop, document, and implement procedures to restrict and track use of the MariaDB software installation account.", "CCI": "CCI-001499"}, {"VulnID": "V-253687", "RuleID": "SV-253687r841586_rule", "StigID": "MADB-10-002800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000133-DB-000199", "RuleTitle": "Database software, including MariaDB configuration files, must be stored in dedicated directories, separate from the host OS and other applications.", "Description": "<VulnDiscussion>When dealing with change control issues, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system.\n\nMultiple applications can provide a cumulative negative effect. A vulnerability and subsequent exploit to one application can lead to an exploit of other applications sharing the same security context. For example, an exploit to a web server process that leads to unauthorized administrative access to host system directories can most likely lead to a compromise of all applications hosted by the same system. Database software not installed using dedicated directories both threatens and is threatened by other hosted applications. Access controls defined for one application may by default provide access to the other application s database objects or directories. Any method that provides any level of separation of security context assists in the protection between applications.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "When dealing with change control issues, it should be noted any changes to the hardware, software, and/or firmware components of the information system and/or application can potentially have significant effects on the overall security of the system.\n\nMultiple applications can provide a cumulative negative effect. A vulnerability and subsequent exploit to one application can lead to an exploit of other applications sharing the same security context. For example, an exploit to a web server process that leads to unauthorized administrative access to host system directories can most likely lead to a compromise of all applications hosted by the same system. Database software not installed using dedicated directories both threatens and is threatened by other hosted applications. Access controls defined for one application may by default provide access to the other application s database objects or directories. Any method that provides any level of separation of security context assists in the protection between applications.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the MariaDB software library directory and note other root directories located on the same disk directory or any subdirectories. The default install directory is /var/lib/mysql.\n\nIf any non-MariaDB software directories exist on the disk directory, examine or investigate their use. If any of the directories are used by other applications, including third-party applications that use MariaDB, this is a finding.\n\nOnly applications that are required for the functioning and administration, not use, of MariaDB should be located in the same disk directory as the MariaDB software libraries.\n\nIf other applications are located in the same directory as MariaDB, this is a finding.", "FixText": "Install all applications on directories separate from the MariaDB software library directory. Relocate any directories or reinstall other application software that currently shares the MariaDB software library directory.", "CCI": "CCI-001499"}, {"VulnID": "V-253688", "RuleID": "SV-253688r841589_rule", "StigID": "MADB-10-002900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000133-DB-000200", "RuleTitle": "Database objects (including but not limited to tables, indexes, storage, stored procedures, functions, triggers, links to software external to MariaDB, etc.) must be owned by database/MariaDB principals authorized for ownership.", "Description": "<VulnDiscussion>Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definers rights. This allows anyone who uses the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.\n\nConversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Within the database, object ownership implies full privileges to the owned object, including the privilege to assign access to the owned objects to other subjects. Database functions and procedures can be coded using definers rights. This allows anyone who uses the object to perform the actions if they were the owner. If not properly managed, this can lead to privileged actions being taken by unauthorized individuals.\n\nConversely, if critical tables or other objects rely on unauthorized owner accounts, these objects may be lost when an account is removed.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review system documentation to identify accounts authorized to have privileges against database objects. Review account privileges on objects in the database(s).\n \nTo show the list of system\u00a0privileges\u00a0that the\u00a0MariaDB\u00a0server supports, run:\nMariaDB> SHOW PRIVILEGES;\n \nGather a list of SHOW GRANTS commands. SHOW GRANTS will list the privileges granted to the account.\n\nRun this database query to create the SHOW GRANTS script for each user: \n\nMariaDB> SELECT DISTINCT CONCAT( 'SHOW GRANTS FOR ', user,'@', host,';') AS grantQuery FROM mysql.user WHERE is_role = 'N';\n\nRun each SHOW GRANTS command for each user.\n\nMariaDB> SHOW GRANTS FOR 'user'@'host';\n\nVerify that all users have the correct privileges, if they do not, this is a finding.\n\nOnly DEFINERS of routines (functions and procedures) can change routines. To view the DEFINERS of all functions and procedures, as database administrator run the following SQL:\n \nMariaDB>  SELECT * FROM mysql.proc \\G\n \nOnly DEFINERS of triggers can change triggers. To view all triggers and their DEFINERS, as database administrator run the following SQL: \n\nMariaDB>  SELECT * FROM information_schema.triggers \\G\n \nIf any database users are found to have unauthorized privileges on database objects, this is a finding.", "FixText": "Assign ownership of authorized objects to authorized object owner accounts.", "CCI": "CCI-001499"}, {"VulnID": "V-253689", "RuleID": "SV-253689r841860_rule", "StigID": "MADB-10-003000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000133-DB-000362", "RuleTitle": "The role(s)/group(s) used to modify database structure (including but not necessarily limited to tables, indexes, storage, etc.) and logic modules (stored procedures, functions, triggers, links to software external to the MariaDB, etc.) must be restricted to authorized users.", "Description": "<VulnDiscussion>If the MariaDB were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If the MariaDB were to allow any user to make changes to database structure or logic, then those changes might be implemented without undergoing the appropriate testing and approvals that are part of a robust change management process.\n\nAccordingly, only qualified and authorized individuals must be allowed to obtain access to information system components for purposes of initiating changes, including upgrades and modifications.\n\nUnmanaged changes that occur to the database software libraries or configuration can lead to unauthorized or compromised installations.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Gather a list of SHOW GRANTS commands. This list will include users and roles: \n\nMariaDB> SELECT DISTINCT CONCAT( 'SHOW GRANTS FOR ', user,'@', host,';') AS grantQuery FROM mysql.user;\n\nRun each SHOW GRANTS commands and verify that all objects have the correct privileges, if they do not, this is a finding.\n\nMariaDB> SHOW GRANTS FOR 'user'@'host';\n\nFind the data directory and verify its operating system privileges. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE '%datadir%';\n\n# ls -al /path/to/datadir\n\nIf permissions of the database directory are not limited to an authorized user account, this is a finding.", "FixText": "As the database administrator, revoke any permissions from a role that are deemed unnecessary by running the following SQL:\n\nMariaDB> REVOKE  PERMISSION FROM ROLE_NAME ;\n\nRevoke any roles from a user if they are deemed unnecessary by running the following SQL:\n\nMariaDB> REVOKE  ROLE_NAME  FROM  test_user ;\n \nIf the revoked role is the default role for the user, the REVOKE command should be followed by a command to set a new default role that has appropriate permissions, or no default role:\n\nMariaDB> SET DEFAULT ROLE NONE FOR  test_user ;\nMariaDB> SET DEFAULT ROLE  ROLE_NAME  for  test_user ;", "CCI": "CCI-001499"}, {"VulnID": "V-253690", "RuleID": "SV-253690r841595_rule", "StigID": "MADB-10-003100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000141-DB-000090", "RuleTitle": "Default demonstration and sample databases, database objects, and applications must be removed.", "Description": "<VulnDiscussion>Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plugins not related to requirements or providing a wide array of functionality, not required for every mission, that cannot be disabled.\n\nDBMSs must adhere to the principles of least functionality by providing only essential capabilities.\n\nDemonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding-specific functions and are not developed to prevent vulnerabilities from being introduced to the DBMS and host system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. Examples include, but are not limited to, installing advertising software, demonstrations, or browser plugins not related to requirements or providing a wide array of functionality, not required for every mission, that cannot be disabled.\n\nDBMSs must adhere to the principles of least functionality by providing only essential capabilities.\n\nDemonstration and sample database objects and applications present publicly known attack points for malicious users. These demonstration and sample objects are meant to provide simple examples of coding-specific functions and are not developed to prevent vulnerabilities from being introduced to the DBMS and host system.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the database administrator, show all databases by running the following SQL:\n\nMariaDB> SHOW DATABASES;\n\nDetermine if the test database still exists. If it does, this is a finding.", "FixText": "If a test database is found, this is a sign that the mysql_secure_installation script was not ran when the database software was installed. It is recommended to do so. This script will prompt the user to set the MariaDB root user's password, remove all anonymous users, disallow the root user from logging in remotely to the database, remove the test database and access to it, and then reload the privilege tables.\n \n$ mariadb-secure-installation\n \nreply Y to setting a root password if one is not already set.\n \nreply Y to Remove anonymous users\n\nreply Y to disallow root login remotely\n \nreply Y to Remove test database and access to it\n \nreply Y to Reload privilege tables now (this ensures that all changes made so far will take effect immediately)\n \nNote: For this request only the \"reply Y to Remove\" test database and access to it is necessary, but \"Y\" to all the questions is recommended.\n\nAlternatively, simply dropping the test database will remedy the finding. \n\nMariaDB> DROP DATABASE test;", "CCI": "CCI-000381"}, {"VulnID": "V-253691", "RuleID": "SV-253691r841598_rule", "StigID": "MADB-10-003200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000141-DB-000091", "RuleTitle": "Unused database components, DBMS software, and database objects must be removed.", "Description": "<VulnDiscussion>Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. \n\nDBMSs must adhere to the principles of least functionality by providing only essential capabilities.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions).\n\nIt is detrimental for software products to provide, or install by default, functionality exceeding requirements or mission objectives. \n\nDBMSs must adhere to the principles of least functionality by providing only essential capabilities.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "List all plugins and determine which are acceptable. \n\nMariaDB> SHOW PLUGINS;\n\nIf unused plugins are installed and are not documented and authorized, this is a finding.", "FixText": "To uninstall the plugin but leave the libraries in place: \n\nMariaDB> UNINSTALL PLUGIN plugin_name;\n\nTo uninstall the plugin and the associated libraries: \n\nMariaDB> UNINSTALL SONAME plugin_name;", "CCI": "CCI-000381"}, {"VulnID": "V-253692", "RuleID": "SV-253692r841601_rule", "StigID": "MADB-10-003400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000141-DB-000093", "RuleTitle": "Access to external executables must be disabled or restricted.", "Description": "<VulnDiscussion>Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). \n\nIt is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. \n\nApplications must adhere to the principles of least functionality by providing only essential capabilities.\n\nMariaDB may spawn additional external processes to execute procedures that are defined in MariaDB but stored in external host files (external procedures). The spawned process used to execute the external procedure may operate within a different OS security context than MariaDB and provide unauthorized access to the host system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information systems are capable of providing a wide variety of functions and services. Some of the functions and services, provided by default, may not be necessary to support essential organizational operations (e.g., key missions, functions). \n\nIt is detrimental for applications to provide, or install by default, functionality exceeding requirements or mission objectives. \n\nApplications must adhere to the principles of least functionality by providing only essential capabilities.\n\nMariaDB may spawn additional external processes to execute procedures that are defined in MariaDB but stored in external host files (external procedures). The spawned process used to execute the external procedure may operate within a different OS security context than MariaDB and provide unauthorized access to the host system.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "MariaDB's LOAD DATA LOCAL INFILE command can interact with the server's underlying OS.  \n\nTo check the value of this option, run the following command as the database administrator: \n\nMariaDB>  SHOW GLOBAL VARIABLES LIKE 'local_infile'; \n \nVerify the option is set according to the security guide. If it is not, this is a finding. \n \nIf the value of local_infile is set to ON per the security guide, user privileges must be checked. Only users with FILE privilege can use the LOAD DATA LOCAL INFILE command.\n\nTo check the users who have FILE privilege against the security guide, run the following commands as the database administrator.\n\n1. Check which users have FILE privilege and GRANT OPTION privileges and compare to the security guide to determine if a user has FILE privilege that should not or if a user has GRANT OPTION and should not.  \n\nIf the users have privileges they should not have, this is a finding.\n\nRun this script to create the SHOW GRANTS script for each user: \nMariaDB>  SELECT DISTINCT CONCAT( 'SHOW GRANTS FOR ', user,'@', host,';') AS grantQuery FROM mysql.user WHERE is_role = 'N';\n\nRun each SHOW GRANTS command for each user.\nMariaDB> SHOW GRANTS FOR 'user'@'host';\n \n2. Check which roles have FILE privilege and GRANT OPTION privileges and compare to the security guide to determine if a role has FILE privilege that should not or if a role has GRANT OPTION and should not. \n\nIf the roles have privileges they should not have, this is a finding.\n\nMariaDB>  SELECT DISTINCT CONCAT('SHOW GRANTS FOR ',role, ';') FROM mysql.roles_mapping;\n\nRun each SHOW GRANTS command for each role.\n \n3. From the two outputs above, check which users and roles can set roles and grant privileges by checking who has GRANT OPTION and FILE privileges and comparing to the security guide.\n\nIf any user or role has GRANT OPTION or FILE privileges they should not have, this is a finding.", "FixText": "To disable LOAD DATA LOCAL INFILE make the following update as the database administrator:\n\nEdit the mariadb-enterprise.cnf configuration file located in /etc/my.cnf.d/.\n\nUnder [mariadb], add the following: \n\nlocal_infile = 0 \n\nSave the configuration file. This change will not take effect until MariaDB Enterprise Server is restarted.  \n\nTo remove FILE and GRANT OPTION privileges use the right combination of the following commands:\n1. revoke FILE privilege from a user\nMariaDB> REVOKE FILE FROM 'user'@'host';\n\n2. revoke FILE privilege from a role\nMariaDB>  REVOKE FILE FROM role; \n\n3. revoke GRANT OPTION privilege from a user\nMariaDB> REVOKE GRANT OPTION FROM 'user'@'host'; \n\n4. revoke a role grant from a user\nMariaDB>  REVOKE ROLE FROM grantee;", "CCI": "CCI-000381"}, {"VulnID": "V-253693", "RuleID": "SV-253693r841604_rule", "StigID": "MADB-10-003500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000142-DB-000094", "RuleTitle": "MariaDB must be configured to prohibit or restrict the use of organization-defined functions, ports, protocols, and/or services, as defined in the PPSM CAL and vulnerability assessments.", "Description": "<VulnDiscussion>To prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements, providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or address authorized quality-of-life issues.\n\nDatabase Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "To prevent unauthorized connection of devices, unauthorized transfer of information, or unauthorized tunneling (i.e., embedding of data types within data types), organizations must disable or restrict unused or unnecessary physical and logical ports/protocols/services on information systems.\n\nApplications are capable of providing a wide variety of functions and services. Some of the functions and services provided by default may not be necessary to support essential organizational operations. Additionally, it is sometimes convenient to provide multiple services from a single component (e.g., email and web services); however, doing so increases risk over limiting the services provided by any one component. \n\nTo support the requirements and principles of least functionality, the application must support the organizational requirements, providing only essential capabilities and limiting the use of ports, protocols, and/or services to only those required, authorized, and approved to conduct official business or address authorized quality-of-life issues.\n\nDatabase Management Systems using ports, protocols, and services deemed unsafe are open to attack through those ports, protocols, and services. This can allow unauthorized access to the database and through the database to other components of the information system.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review system documentation for a list of approved ports.\n\nAs the database administrator, run the following command to determine the currently defined port:\nMariaDB>  SHOW GLOBAL VARIABLES LIKE '%port%';\n \nIf the currently defined port is deemed prohibited, this is a finding.", "FixText": "Modify the MariaDB configuration file located within /etc/my.cnf.d/ and update the variable port to an acceptable port. Restart MariaDB Enterprise Server. \n\nExample: \n\n[server]\nport = 4008", "CCI": "CCI-000382"}, {"VulnID": "V-253694", "RuleID": "SV-253694r841607_rule", "StigID": "MADB-10-003600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000148-DB-000103", "RuleTitle": "MariaDB must uniquely identify and authenticate organizational users (or processes acting on behalf of organizational users).", "Description": "<VulnDiscussion>To ensure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.\n\nIt is recommended to not allow shared accounts, including root. The root user is known by all attackers, and often used in attempted attacks on the database servers.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "To ensure accountability and prevent unauthenticated access, organizational users must be identified and authenticated to prevent potential misuse and compromise of the system. \n\nOrganizational users include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors). Organizational users (and any processes acting on behalf of users) must be uniquely identified and authenticated for all accesses, except the following:\n\n(i) Accesses explicitly identified and documented by the organization. Organizations document specific user actions that can be performed on the information system without identification or authentication; and \n(ii) Accesses that occur through authorized use of group authenticators without individual authentication. Organizations may require unique identification of individuals using shared accounts, for detailed accountability of individual activity.\n\nIt is recommended to not allow shared accounts, including root. The root user is known by all attackers, and often used in attempted attacks on the database servers.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "All users should have individual accounts with appropriate privileges. The root users should be removed after administrative accounts with SUPER privilege are created. Query all users and determine if any are suspected shared accounts. Document any necessary shared accounts.\n\nMariaDB> SELECT user, host FROM mysql.user;\n\nDetermine if any accounts are shared. A shared account is defined as a username, hostname, and password that are used by multiple individuals to log in to MariaDB. An example of a shared account is the MariaDB root account \u2013 root@localhost.\n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. \n\nIf individuals are not individually authenticated before using the shared account (e.g., by the operating system or possibly by an application making calls to the database), this is a finding. \n\nThe key is individual accountability. If this can be traced, this is not a finding.\n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding.\n\nReview contents of audit logs, traces, and data tables to confirm the identity of the individual user performing the action is captured.\n\nIf shared identifiers are found, and not accompanied by individual identifiers, this is a finding.", "FixText": "Remove shared accounts which are not documented and have been determined to not be necessary.\n\nMariaDB> DROP USER 'user'@'hostname';", "CCI": "CCI-000764"}, {"VulnID": "V-253695", "RuleID": "SV-253695r841610_rule", "StigID": "MADB-10-003700", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000164-DB-000401", "RuleTitle": "If MariaDB authentication, using passwords, is employed, then MariaDB must enforce the DoD standards for password complexity.", "Description": "<VulnDiscussion>OS/enterprise authentication and identification must be used (SRG-APP-000023-DB-000001). Native MariaDB authentication may be used only when circumstances make it unavoidable; and must be documented and AO-approved.\n\nThe DoD standard for authentication is DoD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate and requires AO approval.\n\nIn such cases, the DoD standards for password complexity and lifetime must be implemented. DBMS products that can inherit the rules for these from the operating system or access control program (e.g., Microsoft Active Directory) must be configured to do so. For MariaDB, the rules must be enforced using available configuration parameters or custom code.\n\nBy default, MariaDB Enterprise Server has the simple_password_check plugin installed and enabled. However, the default password requirements are eight character minimum, one numeric character, and one special character.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "OS/enterprise authentication and identification must be used (SRG-APP-000023-DB-000001). Native MariaDB authentication may be used only when circumstances make it unavoidable; and must be documented and AO-approved.\n\nThe DoD standard for authentication is DoD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate and requires AO approval.\n\nIn such cases, the DoD standards for password complexity and lifetime must be implemented. DBMS products that can inherit the rules for these from the operating system or access control program (e.g., Microsoft Active Directory) must be configured to do so. For MariaDB, the rules must be enforced using available configuration parameters or custom code.\n\nBy default, MariaDB Enterprise Server has the simple_password_check plugin installed and enabled. However, the default password requirements are eight character minimum, one numeric character, and one special character.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check the simple_password_check plugin variables to ensure they match the password requirements. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'simple_password_check_%';\n\nDetermine whether the following rules are enforced. If they do not meet the following password requirements, this is a finding. \n\na. minimum of 15 characters, including at least one of each of the following character sets:\n- Uppercase\n- Lowercase\n- Numerics\n- Special characters (e.g., ~ ! @ # $ % ^ & * ( ) _ + = - ' [ ] / ? > <)\n\nb. Minimum number of characters changed from previous password: 50 percent of the minimum password length; that is, eight", "FixText": "Locate the MariaDB Enterprise Server configuration file (mariadb-enterprise.cnf) which contains the simple_password_check plugin variables within /etc/my.cnf.d/. Edit the variables. \n\nExample: \n\nsimple_password_check_digits = 2\nsimple_password_check_letters_same_case = 2\nsimple_password_check_minimal_length = 15\nsimple_password_check_other_characters = 2", "CCI": "CCI-000192"}, {"VulnID": "V-253696", "RuleID": "SV-253696r841613_rule", "StigID": "MADB-10-003750", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000164-DB-000401", "RuleTitle": "If MariaDB authentication using passwords is employed, MariaDB must enforce the DoD standards for password lifetime.", "Description": "<VulnDiscussion>OS/enterprise authentication and identification must be used (SRG-APP-000023-DB-000001). Native MariaDB authentication may be used only when circumstances make it unavoidable and must be documented and AO-approved.\n\nThe DoD standard for authentication is DoD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate and requires AO approval.\n\nIn such cases, the DoD standards for password complexity and lifetime must be implemented. DBMS products that can inherit the rules for these from the operating system or access control program (e.g., Microsoft Active Directory) must be configured to do so. For MariaDB, the rules must be enforced using available configuration parameters or custom code.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "OS/enterprise authentication and identification must be used (SRG-APP-000023-DB-000001). Native MariaDB authentication may be used only when circumstances make it unavoidable and must be documented and AO-approved.\n\nThe DoD standard for authentication is DoD-approved PKI certificates. Authentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate and requires AO approval.\n\nIn such cases, the DoD standards for password complexity and lifetime must be implemented. DBMS products that can inherit the rules for these from the operating system or access control program (e.g., Microsoft Active Directory) must be configured to do so. For MariaDB, the rules must be enforced using available configuration parameters or custom code.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check the default password lifetime variable to verify it matches the password requirement. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'default_password_lifetime%';\n\nIf the value returned is not 60 or less, this is a finding.", "FixText": "Locate the MariaDB Enterprise Server configuration file (mariadb-enterprise.cnf) that contains the password variables within /etc/my.cnf.d/. Edit the variables. \n\nExample: \n\ndefault_password_lifetime = 60", "CCI": "CCI-000192"}, {"VulnID": "V-253697", "RuleID": "SV-253697r841616_rule", "StigID": "MADB-10-003800", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000171-DB-000074", "RuleTitle": "If passwords are used for authentication, MariaDB must store only hashed, salted representations of passwords.", "Description": "<VulnDiscussion>The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate and requires AO approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would be vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes when stored internally or externally to the MariaDB.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate and requires AO approval.\n\nIn such cases, database passwords stored in clear text, using reversible encryption, or using unsalted hashes would be vulnerable to unauthorized disclosure. Database passwords must always be in the form of one-way, salted hashes when stored internally or externally to the MariaDB.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "MariaDB stores passwords encrypted. When querying users, the passwords are displayed encrypted. \n\nHowever, third-party applications, scripts, etc., might be storing passwords. In such cases, it is important to ensure these passwords are encrypted. Check all third-party applications, scripts, etc., which connect to the database and verify the passwords are encrypted. If any passwords are found in clear text, this is a finding.", "FixText": "Document all applications, scripts, etc., which connect to the database server. Ensure passwords, if stored, are encrypted and secure.", "CCI": "CCI-000196"}, {"VulnID": "V-253698", "RuleID": "SV-253698r841619_rule", "StigID": "MADB-10-003900", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000172-DB-000075", "RuleTitle": "If passwords are used for authentication, MariaDB must transmit only encrypted representations of passwords.", "Description": "<VulnDiscussion>The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate and requires AO approval.\n\nIn such cases, passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission.\n\nDBMS passwords sent in clear text format across the network are vulnerable to discovery by unauthorized users. Disclosure of passwords may easily lead to unauthorized access to the database.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nAuthentication based on User ID and Password may be used only when it is not possible to employ a PKI certificate and requires AO approval.\n\nIn such cases, passwords need to be protected at all times, and encryption is the standard method for protecting passwords during transmission.\n\nDBMS passwords sent in clear text format across the network are vulnerable to discovery by unauthorized users. Disclosure of passwords may easily lead to unauthorized access to the database.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "MariaDB by default only sends passwords encrypted. However, when authenticating via the PAM Authentication Plugin, the password is sent in cleartext. Thus when using PAM authentication, it is recommended to use TLS/SSL encryption for all database connections. \n\nIf using PAM authentication, verify TLS/SSL is in use. \n\nRun the following database command: \n\nMariaDB> STATUS; \n\nVerify the line which starts with \"SSL:\" is as expected. If it returns \"Not in use\", this is a finding.", "FixText": "As the administrator locate the MariaDB configuration file to change. This varies depending on setup and how configuration files are managed but should be in /etc/my.cnf.d/. It is recommended to have a separate configuration file within this directory for SSL connection information.\n\nIn the [server] section add the lines for SSL:\n\nssl\nssl-ca=/path/to/ssl/ca-cert.pem\nssl-cert=/path/to/ssl/server-cert.pem\nssl-key=/path/to/ssl/server-key.pem\n\nRestart of the MariaDB Server and verify SSL is being used.\n\nMariaDB> STATUS; \n\nVerify line beginning with \"SSL:\".", "CCI": "CCI-000197"}, {"VulnID": "V-253699", "RuleID": "SV-253699r841622_rule", "StigID": "MADB-10-004000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000175-DB-000067", "RuleTitle": "MariaDB, when utilizing PKI-based authentication, must validate certificates by performing RFC 5280-compliant certification path validation.", "Description": "<VulnDiscussion>The DoD standard for authentication is DoD-approved PKI certificates.\n\nA certificate's certification path is the path from the end entity certificate to a trusted root certification authority (CA). Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate issuer trust, time validity and revocation status for each certificate in the certification path. Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.\n\nDatabase Management Systems that do not validate certificates by performing RFC 5280-compliant certification path validation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow unauthorized access to the database.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nA certificate's certification path is the path from the end entity certificate to a trusted root certification authority (CA). Certification path validation is necessary for a relying party to make an informed decision regarding acceptance of an end entity certificate. Certification path validation includes checks such as certificate issuer trust, time validity and revocation status for each certificate in the certification path. Revocation status information for CA and subject certificates in a certification path is commonly provided via certificate revocation lists (CRLs) or online certificate status protocol (OCSP) responses.\n\nDatabase Management Systems that do not validate certificates by performing RFC 5280-compliant certification path validation are in danger of accepting certificates that are invalid and/or counterfeit. This could allow unauthorized access to the database.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the database administrator, list all users and their SSL setup by running the following:\n\nMariaDB> SELECT user, host, ssl_type FROM mysql.user;\n\nUse the result of the next query to verify the MariaDB Server is using certificates:\n\nMariaDB>  STATUS;\n\nVerify the line beginning with \"SSL:\" returns expected SSL information. \n\nUsing the following query, verify SSL is configured as expected: \n\nMariaDB>  SHOW GLOBAL VARIABLES LIKE  %ssl% ;\n\nIf not configured as expected, this is a finding.", "FixText": "As the administrator locate the MariaDB configuration file to change. This varies depending on setup and how configuration files are managed but should be in /etc/my.cnf.d/. It is recommended to have a separate configuration file within this directory for SSL connection information. \n\nIn the [server] section add the lines for SSL:\n\nssl-ca=/path/to/ssl/ca-cert.pem\nssl-cert=/path/to/ssl/server-cert.pem\nssl-key=/path/to/ssl/server-key.pem\n\nTo fully implement SSL for MariaDB, the client settings and user accounts need to be set up as well. More information can be found here:\nhttps://mariadb.com/kb/en/securing-connections-for-client-and-server/", "CCI": "CCI-000185"}, {"VulnID": "V-253700", "RuleID": "SV-253700r841625_rule", "StigID": "MADB-10-004100", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000176-DB-000068", "RuleTitle": "MariaDB must enforce authorized access to all PKI private keys stored/used by the DBMS.", "Description": "<VulnDiscussion>The DoD standard for authentication is DoD-approved PKI certificates. PKI certificate-based authentication is performed by requiring the certificate holder to cryptographically prove possession of the corresponding private key.\n\nIf the private key is stolen, an attacker can use the private key(s) to impersonate the certificate holder. In cases where the MariaDB-stored private keys are used to authenticate MariaDB to the system's clients, loss of the corresponding private keys would allow an attacker to successfully perform undetected man in the middle attacks against the MariaDB system and its clients.\n\nBoth the holder of a digital certificate and the issuing authority must take careful measures to protect the corresponding private key. Private keys should always be generated and protected in FIPS 140-2 validated cryptographic modules.\n\nAll access to the private key(s) of MariaDB must be restricted to authorized and authenticated users. If unauthorized users have access to one or more of the MariaDB s private keys, an attacker could gain access to the key(s) and use them to impersonate the database on the network or otherwise perform unauthorized actions.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The DoD standard for authentication is DoD-approved PKI certificates. PKI certificate-based authentication is performed by requiring the certificate holder to cryptographically prove possession of the corresponding private key.\n\nIf the private key is stolen, an attacker can use the private key(s) to impersonate the certificate holder. In cases where the MariaDB-stored private keys are used to authenticate MariaDB to the system's clients, loss of the corresponding private keys would allow an attacker to successfully perform undetected man in the middle attacks against the MariaDB system and its clients.\n\nBoth the holder of a digital certificate and the issuing authority must take careful measures to protect the corresponding private key. Private keys should always be generated and protected in FIPS 140-2 validated cryptographic modules.\n\nAll access to the private key(s) of MariaDB must be restricted to authorized and authenticated users. If unauthorized users have access to one or more of the MariaDB s private keys, an attacker could gain access to the key(s) and use them to impersonate the database on the network or otherwise perform unauthorized actions.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "First, as the database administrator, verify the following settings: Note: If no specific directory given before the filename, the files are stored in DATADIR.\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_ca';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_cert';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_key';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_crlpath';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'datadir';\n\nVerify the permissions of the above files. \n\nExample:\n\nls -al /path/to/ssl_cert \n\nMariaDB Enterprise Server runs as the mysql operating system user, thus should be owned by user mysql and group mysql with user read and group read file level permissions. \n\nExample: \n\n-r-------.  1 mysql\n \nIf the files and directories are not properly secured, this is a finding.", "FixText": "If the SSL files are not secured properly in the file system, change the ownership and permissions with operating system operations. \n\nExample: \n\nchown mysql:mysql /path/to/file\nchmod 440 /path/to/file", "CCI": "CCI-000186"}, {"VulnID": "V-253701", "RuleID": "SV-253701r841628_rule", "StigID": "MADB-10-004200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000177-DB-000069", "RuleTitle": "MariaDB must map PKI ID to an associated user account.", "Description": "<VulnDiscussion>The DoD standard for authentication is DoD-approved PKI certificates. Once a PKI is validated, it is mapped to the DBMS user account for the authentication identity and then can be used for authorization decisions.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The DoD standard for authentication is DoD-approved PKI certificates. Once a PKI is validated, it is mapped to the DBMS user account for the authentication identity and then can be used for authorization decisions.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Query all users to confirm issuer and subject are configured correctly: \n\nMariaDB>SELECT user, host, ssl_type, CAST(x509_issuer AS CHAR) AS issuer, CAST(x509_subject AS CHAR) AS subject FROM mysql.user;\n\nIf users are not mapped correctly, this is a finding.", "FixText": "Example command to create users with proper X509 certificate subject and issuer: \n\nMariaDB>CREATE USER 'janedoe'@'%' IDENTIFIED BY 'Some_Password_Here_$9'\nREQUIRE SUBJECT '/C=US/ST=Ohio/L=Columbus/O=MariaDB Corporation/CN=Jane Doe'\nAND ISSUER '/C=US/ST=Ohio/L=Columbus/O=MariaDB Corporation/CN=MariaDB CA';", "CCI": "CCI-000187"}, {"VulnID": "V-253702", "RuleID": "SV-253702r841631_rule", "StigID": "MADB-10-004300", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000178-DB-000083", "RuleTitle": "MariaDB must obscure feedback of authentication information during the authentication process to protect the information from possible exploitation/use by unauthorized individuals.", "Description": "<VulnDiscussion>The DoD standard for authentication is DoD-approved PKI certificates.\n\nNormally, with PKI authentication, the interaction with the user for authentication will be handled by a software component separate from the DBMS, such as ActivIdentity ActivClient. However, in cases where the DBMS controls the interaction, this requirement applies.\n\nTo prevent the compromise of authentication information such as passwords and PINs during the authentication process, the feedback from the system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism. \n\nObfuscation of user-provided authentication secrets when typed into the system is a method used in addressing this risk. \n\nDisplaying asterisks when a user types in a password or a smart card PIN is an example of obscuring feedback of authentication secrets.\n\nThis calls for review of applications, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The DoD standard for authentication is DoD-approved PKI certificates.\n\nNormally, with PKI authentication, the interaction with the user for authentication will be handled by a software component separate from the DBMS, such as ActivIdentity ActivClient. However, in cases where the DBMS controls the interaction, this requirement applies.\n\nTo prevent the compromise of authentication information such as passwords and PINs during the authentication process, the feedback from the system must not provide any information that would allow an unauthorized user to compromise the authentication mechanism. \n\nObfuscation of user-provided authentication secrets when typed into the system is a method used in addressing this risk. \n\nDisplaying asterisks when a user types in a password or a smart card PIN is an example of obscuring feedback of authentication secrets.\n\nThis calls for review of applications, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify best practices are documented and users trained to use the password command line interface flags appropriately. \n\nFor example, the command line option --password (or -p) prompts for a password to be entered and obscures feedback on the typed in password. \n\nEnsure users are trained to use alternatives to command line password parameters, if they are not, this is a finding.", "FixText": "When connecting to the database, the username and password are sent to the server via the command line interface or other connector interface. Using the command line interface, passing the -p or --password flags but not including the password in the command will prompt for the password and not display it on the screen as typed. \n\nExample: \n\nmariadb -u username -p", "CCI": "CCI-000206"}, {"VulnID": "V-253703", "RuleID": "SV-253703r841634_rule", "StigID": "MADB-10-004400", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000179-DB-000114", "RuleTitle": "MariaDB must use NIST FIPS 140-2 validated cryptographic modules for cryptographic operations.", "Description": "<VulnDiscussion>Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption and digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic modules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be relied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain access to and modify data stored in the database as well as the administration settings of the DBMS.\n\nApplications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 validated cryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.  \n\nThe security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A.\n\nNSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Use of weak or not validated cryptographic algorithms undermines the purposes of utilizing encryption and digital signatures to protect data. Weak algorithms can be easily broken and not validated cryptographic modules may not implement algorithms correctly. Unapproved cryptographic modules or algorithms should not be relied on for authentication, confidentiality, or integrity. Weak cryptography could allow an attacker to gain access to and modify data stored in the database as well as the administration settings of the DBMS.\n\nApplications, including DBMSs, utilizing cryptography are required to use approved NIST FIPS 140-2 validated cryptographic modules that meet the requirements of applicable federal laws, Executive Orders, directives, policies, regulations, standards, and guidance.  \n\nThe security functions validated as part of FIPS 140-2 for cryptographic modules are described in FIPS 140-2 Annex A.\n\nNSA Type-X (where X=1, 2, 3, 4) products are NSA-certified, hardware-based encryption modules.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the system administrator, run the following at the Linux commands:\n \n# openssl version\nOpenSSL 1.0.2k-fips  26 Jan 2017\n\nIf fips is not included in the openssl version, this is a finding. \n\n# sysctl crypto.fips_enabled\ncrypto.fips_enabled = 1\n \nIf crypto.fips_enabled = 0, this is a finding. \n \nMariaDB> SHOW GLOBAL VARIABLES LIKE '%have_openssl';\n\nIf the value of have_openssl is not YES, this is a finding.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE '%version_ssl_library%';\n\nIf the value of version_ssl_library does not contain fips, this is a finding.\n\nExamine the application's code to verify it does not make calls using libmysqlclient.  \n\nIf code uses libmysqlclient,\u00a0this is a finding.", "FixText": "If crypto.fips_enabled = 0, for Red Hat Linux, configure the operating system to implement DoD-approved encryption by following the steps below:\n\nTo enable strict FIPS compliance, the fips=1 kernel option must be added to the kernel command line during system installation so key generation is done with FIPS-approved algorithms and continuous monitoring tests in place.\n\nEnable FIPS mode with the following command:\n# sudo fips-mode-setup --enable\n\nModify the kernel command line of the current kernel in the \"grub.cfg\" file by adding the following option to the GRUB_CMDLINE_LINUX key in the \"/etc/default/grub\" file and then rebuild the \"grub.cfg\" file:\nfips=1\n\nChanges to \"/etc/default/grub\" require rebuilding the \"grub.cfg\" file as follows:\nOn BIOS-based machines, use the following command:\n# sudo grub2-mkconfig -o /boot/grub2/grub.cfg\n\nOn UEFI-based machines, use the following command:\n# sudo grub2-mkconfig -o /boot/efi/EFI/redhat/grub.cfg\n\nIf /boot or /boot/efi reside on separate partitions, the kernel parameter \"boot=<partition of /boot or /boot/efi>\" must be added to the kernel command line. Identify a partition by running the df /boot or df /boot/efi command:\n# sudo df /boot\n\nFilesystem 1K-blocks Used Available Use% Mounted on\n/dev/sda1 495844 53780 416464 12% /boot\n\nTo ensure the \"boot=\" configuration option will work even if device naming changes occur between boots, identify the universally unique identifier (UUID) of the partition with the following command:\n# sudo blkid /dev/sda1\n/dev/sda1: UUID=\"05c000f1-a213-759e-c7a2-f11b7424c797\" TYPE=\"ext4\"\n\nFor the example above, append the following string to the kernel command line:\nboot=UUID=05c000f1-a213-759e-c7a2-f11b7424c797\n\nReboot the system for the changes to take effect.\n\nMore information can be found here:\nRedHat: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-federal_standards_and_regulations\nUbuntu: https://security-certs.docs.ubuntu.com/en/fips", "CCI": "CCI-000803"}, {"VulnID": "V-253704", "RuleID": "SV-253704r841637_rule", "StigID": "MADB-10-004500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000180-DB-000115", "RuleTitle": "The MariaDB must uniquely identify and authenticate nonorganizational users (or processes acting on behalf of nonorganizational users).", "Description": "<VulnDiscussion>Nonorganizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). \n\nNonorganizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, other organizations, and the nation.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Nonorganizational users include all information system users other than organizational users, which include organizational employees or individuals the organization deems to have equivalent status of employees (e.g., contractors, guest researchers, individuals from allied nations). \n\nNonorganizational users must be uniquely identified and authenticated for all accesses other than those accesses explicitly identified and documented by the organization when related to the use of anonymous access, such as accessing a web server. \n\nAccordingly, a risk assessment is used in determining the authentication needs of the organization. \n\nScalability, practicality, and security are simultaneously considered in balancing the need to ensure ease of use for access to federal information and information systems with the need to protect and adequately mitigate risk to organizational operations, organizational assets, individuals, other organizations, and the nation.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "All users should have individual accounts with appropriate privileges. The root users should be removed after administrative accounts with SUPER privilege are created. Query all users and determine if any are suspected shared accounts. Document any necessary shared accounts. \n\nMariaDB> SELECT user, host FROM mysql.user; \n\nDetermine if any accounts are shared. A shared account is defined as a username, hostname, and password that are used by multiple individuals to log in to MariaDB. An example of a shared account is the MariaDB root account \u2013 root@localhost.\n\nIf accounts are determined to be shared, determine if individuals are first individually authenticated. \n\nIf individuals are not individually authenticated before using the shared account (e.g., by the operating system or possibly by an application making calls to the database), this is a finding. \n\nThe key is individual accountability. If this can be traced, this is not a finding.\n\nIf accounts are determined to be shared, determine if they are directly accessible to end users. If so, this is a finding.\n\nReview contents of audit logs, traces, and data tables to confirm the identity of the individual user performing the action is captured.\n\nIf shared identifiers are found, and not accompanied by individual identifiers, this is a finding.", "FixText": "Remove shared accounts which are not documented and have been determined to not be necessary.\n\nMariaDB> DROP USER 'user'@'hostname';", "CCI": "CCI-000804"}, {"VulnID": "V-253705", "RuleID": "SV-253705r841640_rule", "StigID": "MADB-10-004600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000211-DB-000122", "RuleTitle": "MariaDB must separate user functionality (including user interface services) from database management functionality.", "Description": "<VulnDiscussion>Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding MariaDB management is presented on an interface available for users, information on MariaDB settings may be inadvertently made available to the user.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information system management functionality includes functions necessary to administer databases, network components, workstations, or servers and typically requires privileged user access. \n\nThe separation of user functionality from information system management functionality is either physical or logical and is accomplished by using different computers, different central processing units, different instances of the operating system, different network addresses, combinations of these methods, or other methods, as appropriate. \n\nAn example of this type of separation is observed in web administrative interfaces that use separate authentication methods for users of any other information system resources. \n\nThis may include isolating the administrative interface on a different domain and with additional access controls.\n\nIf administrative functionality or information regarding MariaDB management is presented on an interface available for users, information on MariaDB settings may be inadvertently made available to the user.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Show the list of system\u00a0privileges\u00a0that the\u00a0MariaDB\u00a0server supports, run:\nMariaDB> SHOW PRIVILEGES;\n \nGather a list of SHOW GRANTS commands. SHOW GRANTS will list the privileges granted to the account.\n\nRun this database query to create the SHOW GRANTS script for each user: \n\nMariaDB> SELECT DISTINCT CONCAT( 'SHOW GRANTS FOR ', user,'@', host,';') AS grantQuery FROM mysql.user WHERE is_role = 'N';\n\nRun each SHOW GRANTS command for each user.\n\nMariaDB> SHOW GRANTS FOR 'user'@'host';\n\nIf any nonadministrative role has any one of the following privileges, this is a finding. \n\nCreate user \nEvent\nProcess \nProxy\nReload\nReplication client \nReplication slave \nShow databases \nShutdown \nSupe, \nUsage\n\nIf administrator and general user functionality are not separated either physically or logically, this is a finding.", "FixText": "Configure MariaDB Enterprise Server to separate database administration and general user functionality.\n\nDo not grant Create user, Event, Process, Proxy, Reload, Replication client, Replication slave, Show databases, Shutdown, Super, Create tablespace, Usage privileges to users and roles that do not require it.\n\nTo remove privileges, see the following examples:\n \n1. Revoke privileges from a specific user: \n\nMariaDB> REVOKE SUPER, PROCESS ON *.* FROM 'user'@'host';\n \n2. Revoke privileges from a role:\n\nMariaDB> REVOKE 'role' FROM 'user'@'host';", "CCI": "CCI-001082"}, {"VulnID": "V-253706", "RuleID": "SV-253706r841643_rule", "StigID": "MADB-10-004700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000220-DB-000149", "RuleTitle": "MariaDB must invalidate session identifiers upon user logout or other session termination.", "Description": "<VulnDiscussion>Captured sessions can be reused in replay attacks. This requirement limits the ability of adversaries to capture and continue to employ previously valid session IDs.\n\nThis requirement focuses on communications protection for the MariaDB session rather than for the network packet. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted. \n\nSession IDs are tokens generated by MariaDB to uniquely identify a user's (or process's) session. MariaDB will make access decisions and execute logic based on the session ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions. \n\nWhen a user logs out, or when any other session termination event occurs, the DBMS must terminate the user's session(s) to minimize the potential for sessions to be hijacked.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Captured sessions can be reused in replay attacks. This requirement limits the ability of adversaries to capture and continue to employ previously valid session IDs.\n\nThis requirement focuses on communications protection for the MariaDB session rather than for the network packet. The intent of this control is to establish grounds for confidence at each end of a communications session in the ongoing identity of the other party and in the validity of the information being transmitted. \n\nSession IDs are tokens generated by MariaDB to uniquely identify a user's (or process's) session. MariaDB will make access decisions and execute logic based on the session ID.\n\nUnique session IDs help to reduce predictability of said identifiers. Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions. \n\nWhen a user logs out, or when any other session termination event occurs, the DBMS must terminate the user's session(s) to minimize the potential for sessions to be hijacked.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the database administrator, run the following SQL:\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'tcp_keepalive_interval';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'tcp_keepalive_probes';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'tcp_keepalive_time';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'tcp_nodelay';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'max_statement_time';\n \nIf these settings are not set, this is a finding.", "FixText": "As the administrator locate the my.cnf file to change. For Centos, RedHat, and similar distributions this will be in /etc/my.cnf.d/.\n\nIn the [mariadb] section add the lines:\n\ntcp_keepalive_interval == seconds\nhttps://mariadb.com/docs/reference/mdb/system-variables/tcp_keepalive_interval/ \n\ntcp_keepalive_probes == number of probes\nhttps://mariadb.com/docs/reference/mdb/system-variables/tcp_keepalive_probes/ \n\ntcp_keepalive_time == seconds\nhttps://mariadb.com/docs/reference/mdb/system-variables/tcp_keepalive_time/\n\ntcp_nodelay == boolean (off or on)\nhttps://mariadb.com/docs/reference/mdb/system-variables/tcp_nodelay/\n\nmax_statement_time == seconds\nhttps://mariadb.com/docs/reference/mdb/system-variables/max_statement_time/", "CCI": "CCI-001185"}, {"VulnID": "V-253707", "RuleID": "SV-253707r841646_rule", "StigID": "MADB-10-004900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000224-DB-000384", "RuleTitle": "MariaDB must maintain the authenticity of communications sessions by guarding against man-in-the-middle attacks that guess at Session ID values.", "Description": "<VulnDiscussion>Unique session IDs help to reduce predictability of said identifiers. Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions. \n\nWhen a user logs out, or when any other session termination event occurs, the DBMS must terminate the user session(s) to minimize the potential for sessions to be hijacked.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Unique session IDs help to reduce predictability of said identifiers. Unique session IDs address man-in-the-middle attacks, including session hijacking or insertion of false information into a session. If the attacker is unable to identify or guess the session information related to pending application traffic, they will have more difficulty in hijacking the session or otherwise manipulating valid sessions. \n\nWhen a user logs out, or when any other session termination event occurs, the DBMS must terminate the user session(s) to minimize the potential for sessions to be hijacked.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine if MariaDB is configured to require SSL. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'require_secure_transport';\n\nIf require_secure_transport is not \"ON\", this is a finding.", "FixText": "Modify the MariaDB configuration file located within /etc/my.cnf.d/ and set the variable require_secure_transport to \"ON\" under the server section. Restart MariaDB Enterprise Server. \n\nExample: \n\n[server]\nrequire_secure_transport = ON", "CCI": "CCI-001188"}, {"VulnID": "V-253708", "RuleID": "SV-253708r841649_rule", "StigID": "MADB-10-005000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000225-DB-000153", "RuleTitle": "MariaDB must fail to a secure state if system initialization fails, shutdown fails, or aborts fail.", "Description": "<VulnDiscussion>Failure to a known state can address safety or security in accordance with the mission/business needs of the organization. \n\nFailure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. \n\nFailure to a known safe state helps prevent systems from failing to a state that may cause loss of data or unauthorized access to system resources. Systems that fail suddenly and with no incorporated failure state planning may leave the hosting system available but with a reduced security protection capability. Preserving information system state data also facilitates system restart and return to the operational mode of the organization with less disruption of mission/business processes. \n\nMariaDB must fail to a known consistent state. Transactions must be successfully completed or rolled back.\n\nIn general, security mechanisms must be designed so that a failure will follow the same execution path as disallowing the operation. For example, application security methods, such as isAuthorized(), isAuthenticated(), and validate(), must all return false if there is an exception during processing. If security controls can throw exceptions, they must be very clear about exactly what that condition means. \n\nAbort refers to stopping a program or function before it has finished naturally. The term abort refers to both requested and unexpected terminations.\n\nMariaDB is a fully functional ACID RDBMS with persistent storage, logs, rollback, recovery, and backup procedures. InnoDB is the default storage engine for MariaDB and all uncommitted transactions are rolled back upon restart from a failure. The process is automatic and all incomplete transactions will be rolled back to a consistent state to guarantee consistency. Users can also conduct a recovery to a point in time if needed.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Failure to a known state can address safety or security in accordance with the mission/business needs of the organization. \n\nFailure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. \n\nFailure to a known safe state helps prevent systems from failing to a state that may cause loss of data or unauthorized access to system resources. Systems that fail suddenly and with no incorporated failure state planning may leave the hosting system available but with a reduced security protection capability. Preserving information system state data also facilitates system restart and return to the operational mode of the organization with less disruption of mission/business processes. \n\nMariaDB must fail to a known consistent state. Transactions must be successfully completed or rolled back.\n\nIn general, security mechanisms must be designed so that a failure will follow the same execution path as disallowing the operation. For example, application security methods, such as isAuthorized(), isAuthenticated(), and validate(), must all return false if there is an exception during processing. If security controls can throw exceptions, they must be very clear about exactly what that condition means. \n\nAbort refers to stopping a program or function before it has finished naturally. The term abort refers to both requested and unexpected terminations.\n\nMariaDB is a fully functional ACID RDBMS with persistent storage, logs, rollback, recovery, and backup procedures. InnoDB is the default storage engine for MariaDB and all uncommitted transactions are rolled back upon restart from a failure. The process is automatic and all incomplete transactions will be rolled back to a consistent state to guarantee consistency. Users can also conduct a recovery to a point in time if needed.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify InnoDB logging is configured. \n\nAs the database administrator, verify the following settings: \n\nNote: If no specific directory is given before the filename, the files are stored in DATADIR.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'log_bin';\n\nIf value is \"OFF\", this is a finding.", "FixText": "If value of log_bin is \"OFF\", modify the MariaDB configuration file. This can be found in /etc/my.cnf.d/.\n\nOptionally specify the location of the binary logs by specifying the full path for the binary logs. \n \n[mariadb]\nlog_bin=mariadb_bin", "CCI": "CCI-001190"}, {"VulnID": "V-253709", "RuleID": "SV-253709r841652_rule", "StigID": "MADB-10-005100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000226-DB-000147", "RuleTitle": "In the event of a system failure, MariaDB must preserve any information necessary to determine cause of failure and any information necessary to return to operations with least disruption to mission processes.", "Description": "<VulnDiscussion>Failure to a known state can address safety or security in accordance with the mission/business needs of the organization.\n\nFailure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. \n\nPreserving information system state information helps to facilitate system restart and return to the operational mode of the organization with less disruption of mission/business processes. \n\nSince it is usually not possible to test this capability in a production environment, systems must either be validated in a testing environment or prior to installation. This requirement is usually a function of the design of the IDPS component. Compliance can be verified by acceptance/validation processes or vendor attestation.\n\nMariaDB is a fully functional ACID RDBMS with persistent storage, logs, rollback, recovery, and backup procedures. InnoDB is the default storage engine for MariaDB and all uncommitted transactions are rolled back upon restart from a failure. The process is automatic and all incomplete transactions will be rolled back to a consistent state to guarantee consistency. Users can also conduct a recovery to a point in time if needed.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Failure to a known state can address safety or security in accordance with the mission/business needs of the organization.\n\nFailure to a known secure state helps prevent a loss of confidentiality, integrity, or availability in the event of a failure of the information system or a component of the system. \n\nPreserving information system state information helps to facilitate system restart and return to the operational mode of the organization with less disruption of mission/business processes. \n\nSince it is usually not possible to test this capability in a production environment, systems must either be validated in a testing environment or prior to installation. This requirement is usually a function of the design of the IDPS component. Compliance can be verified by acceptance/validation processes or vendor attestation.\n\nMariaDB is a fully functional ACID RDBMS with persistent storage, logs, rollback, recovery, and backup procedures. InnoDB is the default storage engine for MariaDB and all uncommitted transactions are rolled back upon restart from a failure. The process is automatic and all incomplete transactions will be rolled back to a consistent state to guarantee consistency. Users can also conduct a recovery to a point in time if needed.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify InnoDB logging is configured. \n\nAs the database administrator, verify the following settings: \n\nNote: If no specific directory is given before the filename, the files are stored in DATADIR.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'log_bin';\n\nIf value is \"OFF\", this is a finding.", "FixText": "If value of log_bin is \"OFF\", modify the MariaDB configuration file. This can be found in /etc/my.cnf.d/.\n\nOptionally specify the location of the binary logs by specifying the full path for the binary logs. \n \n[mariadb]\nlog_bin=mariadb_bin", "CCI": "CCI-001665"}, {"VulnID": "V-253710", "RuleID": "SV-253710r841655_rule", "StigID": "MADB-10-005200", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000231-DB-000154", "RuleTitle": "MariaDB must protect the confidentiality and integrity of all information at rest.", "Description": "<VulnDiscussion>This control is intended to address the confidentiality and integrity of information at rest in nonmobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use. \n\nUser data generated, as well as application-specific configuration data, must be protected. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and unauthorized modification.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "This control is intended to address the confidentiality and integrity of information at rest in nonmobile devices and covers user information and system information. Information at rest refers to the state of information when it is located on a secondary storage device (e.g., disk drive, tape drive) within an organizational information system. Applications and application users generate information throughout the course of their application use. \n\nUser data generated, as well as application-specific configuration data, must be protected. Organizations may choose to employ different mechanisms to achieve confidentiality and integrity protections, as appropriate. \n\nIf the confidentiality and integrity of application data is not protected, the data will be open to compromise and unauthorized modification.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If the application owner and Authorizing Official have determined that encryption of data at rest is NOT required, this is not a finding.\n \nOne possible way to encrypt data within MariaDB is to use the file key management plugin. To determine if this is installed, check the following variables as the Database administrator:\n\nMariaDB> SHOW PLUGINS; \n\nConfirm the file_key_management.so is listed.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'file_key%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'aria_en%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_encrypt_tables';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_encrypt_log';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_tablespace%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'encrypt%';\n\nConfirm these are ON.\n \nIf disk or filesystem requires encryption, ask the system owner, DBA, and SA to demonstrate the use of disk-level encryption. \n\nIf this is required and is not found, this is a finding. \n\nIf controls do not exist or are not enabled, this is a finding.", "FixText": "MariaDB's data-at-rest encryption requires the use of a key management and encryption plugin. These plugins are responsible both for the management of encryption keys and for the actual encryption and decryption of data. MariaDB supports the use of multiple encryption keys. Each encryption key uses a 32-bit integer as a key identifier. If the specific plugin supports key rotation, then encryption keys can also be rotated, which creates a new version of the encryption key. \n\nThe File Key Management plugin that ships with MariaDB is a key management and encryption plugin that reads encryption keys from a plain-text file. Although the plugin's shared library is distributed with MariaDB by default, the plugin is not installed by MariaDB by default. The plugin can be installed by providing the --plugin-load or the --plugin-load-add options. This can be specified as a command-line argument to mysqld or it can be specified in a relevant server option group in an option file. For example:\n[mariadb]\n...\nplugin_load_add = file_key_management\n\nCreating the Key File: To encrypt tables with encryption keys using the File Key Management plugin, first create the file that contains the encryption keys. The file must contain two pieces of information for each encryption key. First, each encryption key must be identified with a 32-bit integer as the key identifier. Second, the encryption key itself must be provided in hex-encoded form. These two pieces of information must be separated by a semicolon. \n\nFor example, the file is formatted in the following way:\n <encryption_key_id1>;<hex-encoded_encryption_key1>\n <encryption_key_id2>;<hex-encoded_encryption_key2>\n\nThe key file can also be optionally encrypted to make it less accessible from the file system. That is explained further in the section below.\n\nThe File Key Management plugin uses Advanced Encryption Standard (AES) to encrypt data, which supports 128-bit, 192-bit, and 256-bit encryption keys. Therefore, the plugin also supports 128-bit, 192-bit, and 256-bit encryption keys.\n\nRandom encryption keys can be generated using the openssl rand command. For example, to create a random 256-bit (32-byte) encryption key, run the following command:\n\n$ openssl rand -hex 32\na7addd9adea9978fda19f21e6be987880e68ac92632ca052e5bb42b1a506939a\n\nCopy this encryption key to the key file using a text editor, or append a series of keys to a new key file. For example, to append three new encryption keys to a new key file, execute the following:\n\n$ sudo openssl rand -hex 32 >> /etc/mysql/encryption/keyfile\n$ sudo openssl rand -hex 32 >> /etc/mysql/encryption/keyfile\n$ sudo openssl rand -hex 32 >> /etc/mysql/encryption/keyfile\n\nThe new key file would look something like the following after this step:\n\na7addd9adea9978fda19f21e6be987880e68ac92632ca052e5bb42b1a506939a\n49c16acc2dffe616710c9ba9a10b94944a737de1beccb52dc1560abfdd67388b\n8db1ee74580e7e93ab8cf157f02656d356c2f437d548d5bf16bf2a56932954a3\n\nThe key file still needs to have a key identifier for each encryption key added to the beginning of each line. Key identifiers do not need to be contiguous. Open the new key file in the preferred text editor and add the key identifiers. For example, the key file would look something like the following after this step:\n\n1;a7addd9adea9978fda19f21e6be987880e68ac92632ca052e5bb42b1a506939a\n2;49c16acc2dffe616710c9ba9a10b94944a737de1beccb52dc1560abfdd67388b\n100;8db1ee74580e7e93ab8cf157f02656d356c2f437d548d5bf16bf2a56932954a3\n\nThe key identifiers give the user a way to reference the encryption keys from MariaDB. In the example above, encryption keys can be referenced using the key identifiers 1, 2, or 100 with the ENCRYPTION_KEY_ID table option or with system variables such as innodb_default_encryption_key_id. Multiple encryption keys are not always necessary; the encryption key with the key identifier \"1\" is the only mandatory encryption key.\n\nOnce the File Key Management Plugin is enabled, use it by creating an encrypted table:\n\nCREATE TABLE t (i int) ENGINE=InnoDB ENCRYPTED=YES\n\nNow, table t will be encrypted using the encryption key from the key file.", "CCI": "CCI-001199"}, {"VulnID": "V-253711", "RuleID": "SV-253711r841658_rule", "StigID": "MADB-10-005400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000243-DB-000128", "RuleTitle": "Database contents must be protected from unauthorized and unintended information transfer by enforcement of a data-transfer policy.", "Description": "<VulnDiscussion>Applications, including MariaDB, must prevent unauthorized and unintended information transfer via shared system resources. \n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Applications, including MariaDB, must prevent unauthorized and unintended information transfer via shared system resources. \n\nData used for the development and testing of applications often involves copying data from production. It is important that specific procedures exist for this process, to include the conditions under which such transfer may take place, where the copies may reside, and the rules for ensuring sensitive data are not exposed.\n\nCopies of sensitive data must not be misplaced or left in a temporary location without the proper controls.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the procedures for the refreshing of development/test data from production.\n\nReview any scripts or code that exists for the movement of production data to development/test systems, or to any other location or for any other purpose.\n\nVerify that copies of production data are not left in unprotected locations. \n\nIf the code that exists for data movement does not comply with the organization-defined data transfer policy and/or fails to remove any copies of production data from unprotected locations, this is a finding.", "FixText": "Modify any code used for moving data from production to development/test systems to comply with the organization-defined data transfer policy, and to ensure copies of production data are not left in unsecured locations.", "CCI": "CCI-001090"}, {"VulnID": "V-253712", "RuleID": "SV-253712r841661_rule", "StigID": "MADB-10-005500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000243-DB-000373", "RuleTitle": "MariaDB must prevent unauthorized and unintended information transfer via shared system resources.", "Description": "<VulnDiscussion>The purpose of this control is to prevent information, including encrypted representations of information, produced by the actions of a prior user/role (or the actions of a process acting on behalf of a prior user/role) from being available to any current user/role (or current process) that obtains access to a shared system resource (e.g., registers, main memory, secondary storage) after the resource has been released back to the information system. Control of information in shared resources is also referred to as object reuse.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The purpose of this control is to prevent information, including encrypted representations of information, produced by the actions of a prior user/role (or the actions of a process acting on behalf of a prior user/role) from being available to any current user/role (or current process) that obtains access to a shared system resource (e.g., registers, main memory, secondary storage) after the resource has been released back to the information system. Control of information in shared resources is also referred to as object reuse.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the procedures for the refreshing of development/test data from production.\n\nReview any scripts or code that exists for the movement of production data to development/test systems, or to any other location or for any other purpose.\n\nVerify that copies of production data are not left in unprotected locations. \n\nIf the code that exists for data movement does not comply with the organization-defined data transfer policy and/or fails to remove any copies of production data from unprotected locations, this is a finding.", "FixText": "Modify any code used for moving data from production to development/test systems to comply with the organization-defined data transfer policy, and to ensure copies of production data are not left in unsecured locations.", "CCI": "CCI-001090"}, {"VulnID": "V-253713", "RuleID": "SV-253713r841664_rule", "StigID": "MADB-10-005600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000243-DB-000374", "RuleTitle": "Access to database files must be limited to relevant processes and to authorized, administrative users.", "Description": "<VulnDiscussion>Applications, including MariaDB, must prevent unauthorized and unintended information transfer via shared system resources. Permitting only MariaDB processes and authorized, administrative users to have access to the files where the database resides helps ensure that those files are not shared inappropriately and are not open to backdoor access and manipulation.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Applications, including MariaDB, must prevent unauthorized and unintended information transfer via shared system resources. Permitting only MariaDB processes and authorized, administrative users to have access to the files where the database resides helps ensure that those files are not shared inappropriately and are not open to backdoor access and manipulation.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "By default, all of the MariaDB database files, log files, and backup files are located in the /var/lib/mysql.\n\nTo find the location of the datadir run this command:\n\nMariadb > SHOW GLOBAL VARIABLES LIKE 'datadir';\n \nCheck the /etc/my.cnf file for the following variables to determine if any of these files have a nondefault location configured. Only variables that specify a directory different from datadir will be in a different directory. If the variable only specifies a file name, that file will still be in the default directory.\n\nerror_log\ninnodb_log_group_home_dir\ninnodb_temp_data_file_path\ninnodb_tmpdir\ninnodb_undo_directory\ninnodb_temp_data_file_path\ninnodb_tmpdir\nlog_bin_basename\nlog_error\nrelay_log_basename\nrelay_log_file_info\nsql_error_log_filename\ntmpdir\n\nReview the permissions granted to users by the operating system/file system on the database files, database log files, and database backup files. \n\nTo verify that all files are owned by the database administrator and have the correct permissions, run the following as the database administrator: \n\n$ sudo su - root\n$ ls -lR {datadir}\n$ ls -lR  other directories defined by variables above\n\nIf using mysqldump or another tool for backups, also run the \"ls\" command as above on the directory that will be containing the backup file.\n    \nIf any files are not owned by the database administrator or allow anyone but the database administrator to read/write/execute, this is a finding. \n\nIf any user/role who is not an authorized system administrator with a need-to-know, database administrator with a need-to-know, or system account for running MariaDB processes is permitted to read/view any of these files, this is a finding.", "FixText": "By default all of the MariaDB database files, log files, and backup files are located in the /var/lib/mysql.\n\nTo find the location of the datadir run this command:\n\nMariadb > SHOW GLOBAL VARIABLES LIKE 'datadir';\n\nCheck the /etc/my.cnf file for the following variables to determine if any of these files have a nondefault location configured. Only variables that specify a directory different from datadir will be in a different directory. If the variable only specifies a file name that file will still be in the datadir directory.\n\nerror_log\ninnodb_log_group_home_dir\ninnodb_temp_data_file_path\ninnodb_tmpdir\ninnodb_undo_directory\ninnodb_temp_data_file_path\ninnodb_tmpdir\nlog_bin_basename\nlog_error\nrelay_log_basename\nrelay_log_file_info\nsql_error_log_filename\ntmpdir\n\nConfigure the permissions granted by the operating system/file system on the database files, database log files, and database backup files so that only relevant system accounts and authorized system administrators and database administrators with a need to know are permitted to read/view these files.\n\nAny files (e.g., extra configuration files) created in datadir, or a nondefault directory defined by a variable above, must be owned by the database administrator, with only owner permissions to read, write, and execute.", "CCI": "CCI-001090"}, {"VulnID": "V-253714", "RuleID": "SV-253714r841667_rule", "StigID": "MADB-10-005700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000251-DB-000160", "RuleTitle": "MariaDB must check the validity of all data inputs except those specifically identified by the organization.", "Description": "<VulnDiscussion>Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Invalid user input occurs when a user inserts data or characters into an application's data entry fields and the application is unprepared to process that data. This results in unanticipated application behavior, potentially leading to an application or information system compromise. Invalid user input is one of the primary methods employed when attempting to compromise an application.\n\nWith respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nEven when no such hijacking takes place, invalid input that gets recorded in the database, whether accidental or malicious, reduces the reliability and usability of the system. Available protections include data types, referential constraints, uniqueness constraints, range checking, and application-specific logic. Application-specific logic can be implemented within the database in stored procedures and triggers, where appropriate.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review MariaDB code (trigger procedures, functions), application code, settings, column and field definitions, and constraints to determine whether the database is protected against invalid input.\n\nIf code exists that allows invalid data to be acted upon or input into the database, this is a finding.\n\nIf column/field definitions do not exist in the database, this is a finding.\n\nIf columns/fields do not contain constraints and validity checking where required, this is a finding.\n\nWhere a column/field is noted in the system documentation as necessarily free-form, even though its name and context suggest that it should be strongly typed and constrained, the absence of these protections is not a finding.\n\nWhere a column/field is clearly identified by name, caption or context as Notes, Comments, Description, Text, etc., the absence of these protections is not a finding. Check application code that interacts with MariaDB for the use of prepared statements. If prepared statements are not used, this is a finding.", "FixText": "Modify database code to properly validate data before it is put into the database or acted upon by the database.\n\nModify the database to contain constraints and validity checking on database columns and tables that require them for data integrity.\n\nUse prepared statements when taking user input.\n\nDo not allow general users direct console access to MariaDB.", "CCI": "CCI-001310"}, {"VulnID": "V-253715", "RuleID": "SV-253715r841670_rule", "StigID": "MADB-10-005800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000251-DB-000391", "RuleTitle": "MariaDB and associated applications must reserve the use of dynamic code execution for situations that require it.", "Description": "<VulnDiscussion>With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be used otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be used otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review MariaDB source code (stored procedures, functions, triggers) and application source code, to identify cases of dynamic code execution. \n \nTo list all stored procedures, functions, and triggers in the database, as the database administrator, run the following SQL:\n \nMariaDB> SHOW FUNCTION STATUS;\nMariaDB> SHOW PROCEDURE STATUS;\nMariaDB> SHOW TRIGGERS;\n\nAny user input should be handled through prepared statements.\n\nIf dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, this is a finding.", "FixText": "Where dynamic code execution is employed in circumstances where the objective could practically be satisfied by static execution with strongly typed parameters, modify the code to do so.", "CCI": "CCI-001310"}, {"VulnID": "V-253716", "RuleID": "SV-253716r841673_rule", "StigID": "MADB-10-005900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000251-DB-000392", "RuleTitle": "MariaDB and associated applications, when making use of dynamic code execution, must scan input data for invalid values that may indicate a code injection attack.", "Description": "<VulnDiscussion>With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be used otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:\n - Allow strings as input only when necessary. \n - Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.\n - Limit the size of input strings to what is truly necessary.\n - If single quotes/apostrophes, double quotes, semicolons, equal signs, angle brackets, or square brackets will never be valid as input, reject them.\n - If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */ \n - If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n - If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.\n - If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly Grant (as a person s name), could also be valid input. \n - If there are range limits on the values that may be entered, enforce those limits.\n - Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.\n - Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n - Record the inspection and testing in the system documentation.\n - Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "With respect to database management systems, one class of threat is known as SQL Injection, or more generally, code injection. It takes advantage of the dynamic execution capabilities of various programming languages, including dialects of SQL. In such cases, the attacker deduces the manner in which SQL statements are being processed, either from inside knowledge or by observing system behavior in response to invalid inputs. When the attacker identifies scenarios where SQL queries are being assembled by application code (which may be within the database or separate from it) and executed dynamically, the attacker is then able to craft input strings that subvert the intent of the query. Potentially, the attacker can gain unauthorized access to data, including security settings, and severely corrupt or destroy the database.\n\nThe principal protection against code injection is not to use dynamic execution except where it provides necessary functionality that cannot be used otherwise. Use strongly typed data items rather than general-purpose strings as input parameters to task-specific, pre-compiled stored procedures and functions (and triggers).\n\nWhen dynamic execution is necessary, ways to mitigate the risk include the following, which should be implemented both in the on-screen application and at the database level, in the stored procedures:\n - Allow strings as input only when necessary. \n - Rely on data typing to validate numbers, dates, etc. Do not accept invalid values. If substituting other values for them, think carefully about whether this could be subverted.\n - Limit the size of input strings to what is truly necessary.\n - If single quotes/apostrophes, double quotes, semicolons, equal signs, angle brackets, or square brackets will never be valid as input, reject them.\n - If comment markers will never be valid as input, reject them. In SQL, these are -- or /* */ \n - If HTML and XML tags, entities, comments, etc., will never be valid, reject them.\n - If wildcards are present, reject them unless truly necessary. In SQL these are the underscore and the percentage sign, and the word ESCAPE is also a clue that wildcards are in use.\n - If SQL key words, such as SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP, ESCAPE, UNION, GRANT, REVOKE, DENY, MODIFY will never be valid, reject them. Use case-insensitive comparisons when searching for these. Bear in mind that some of these words, particularly Grant (as a person s name), could also be valid input. \n - If there are range limits on the values that may be entered, enforce those limits.\n - Institute procedures for inspection of programs for correct use of dynamic coding, by a party other than the developer.\n - Conduct rigorous testing of program modules that use dynamic coding, searching for ways to subvert the intended use.\n - Record the inspection and testing in the system documentation.\n - Bear in mind that all this applies not only to screen input, but also to the values in an incoming message to a web service or to a stored procedure called by a software component that has not itself been hardened in these ways. Not only can the caller be subject to such vulnerabilities; it may itself be the attacker.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review MariaDB source code (stored procedures, functions, triggers) and application source code to identify cases of dynamic code execution.\n\nIf dynamic code execution is employed without protective measures against code injection, this is a finding.", "FixText": "Where dynamic code execution is used, modify the code to implement protections against code injection.", "CCI": "CCI-001310"}, {"VulnID": "V-253717", "RuleID": "SV-253717r841676_rule", "StigID": "MADB-10-006200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000295-DB-000305", "RuleTitle": "MariaDB must automatically terminate a user's session after organization-defined conditions or trigger events requiring session disconnect.", "Description": "<VulnDiscussion>This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections that are associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.\n\nAs a good programming practice, all applications should close the database connection when they finish using the resource. MariaDB will close the session when the connection is closed and release all resources associated with the session. If the connection is not closed, MariaDB has the five global variables to allow timeouts to occur and automatically close the connection and release all associated resources.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "This addresses the termination of user-initiated logical sessions in contrast to the termination of network connections that are associated with communications sessions (i.e., network disconnect). A logical session (for local, network, and remote access) is initiated whenever a user (or process acting on behalf of a user) accesses an organizational information system. Such user sessions can be terminated (and thus terminate user access) without terminating network sessions. \n\nSession termination ends all processes associated with a user's logical session except those batch processes/jobs that are specifically created by the user (i.e., session owner) to continue after the session is terminated. \n\nConditions or trigger events requiring automatic session termination can include, for example, organization-defined periods of user inactivity, targeted responses to certain types of incidents, and time-of-day restrictions on information system use.\n\nThis capability is typically reserved for specific cases where the system owner, data owner, or organization requires additional assurance.\n\nAs a good programming practice, all applications should close the database connection when they finish using the resource. MariaDB will close the session when the connection is closed and release all resources associated with the session. If the connection is not closed, MariaDB has the five global variables to allow timeouts to occur and automatically close the connection and release all associated resources.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "MariaDB has five global variables that can be set so that connections will be closed after a certain period of inactivity. Check the values for these variables and verify they correspond to security procedures defined: \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE '%timeout%'; \n \ninteractive_timeout  - Time in seconds that the server waits for an interactive connection (one that connects with the mysql_real_connect() CLIENT_INTERACTIVE option) to become active before closing it. See also wait_timeout.\n\nwait_timeout - Time in seconds that the server waits for a connection to become active before closing it. The session value is initialized when a thread starts up from either the global value, if the connection is noninteractive, or from the interactive_timeout value, if the connection is interactive.\n\nIn situations where transactions may be started, but not committed or rolled back, more granular control and a shorter timeout may be desirable so as to avoid locks being held for too long.\n\nidle_transaction_timeout\nidle_write_transaction_timeout\nidle_readonly_transaction_timeout\n\nReview system documentation to obtain the organization's definition of circumstances requiring automatic session termination. If the documentation explicitly states that such termination is not required or is prohibited, this is not a finding.\n\nIf the security procedures require server-side session termination within a specified amount of time but MariaDB is not configured accordingly, this is a finding.", "FixText": "Configure MariaDB to automatically terminate a user's session based on security procedures requirements regarding conditions or trigger events that require session termination.\n \nTo change the values of the following timeout variables to conform to organization-defined values for triggering conditions or events requiring session termination select the appropriate variable to change and as the database administrator. \n \nAs the administrator locate the MariaDB Enterprise Server configuration file to change. For Centos, RedHat, and similar distributions this will be in /etc/my.cnf.d/.\n\nIn the [mariadb] section add the lines:\n\ninteractive_timeout = value\nwait_timeout = value\nidle_transaction_timeout = value\nidle_write_transaction_timeout = value\nidle_readonly_transaction_timeout = value\n\nWhere value is in seconds and corresponds to the company defined value. Restart MariaDB Enterprise Server for these changes to take effect.", "CCI": "CCI-002361"}, {"VulnID": "V-253718", "RuleID": "SV-253718r841679_rule", "StigID": "MADB-10-006300", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000296-DB-000306", "RuleTitle": "MariaDB must provide logout functionality to allow the user to manually terminate a session initiated by that user.", "Description": "<VulnDiscussion>If a user cannot explicitly end a DBMS session, the session may remain open and be exploited by an attacker; this is referred to as a zombie session.\n\nSuch logout may be explicit or implicit. Examples of explicit are clicking on a Log Out link or button in the application window; clicking the Windows Start button and selecting Log Out or Shut Down. Examples of implicit logout are closing the application's (main) window and powering off the workstation without invoking the OS shutdown. \n\nBoth the explicit and implicit logouts must be detected by the DBMS.\n\nIn all cases, the DBMS must ensure that the user's DBMS session and all processes owned by the session are terminated. \n\nThis should not, however, interfere with batch processes/jobs initiated by the user during his/her online session; these should be permitted to run to completion.\n\nAs a good programming practice, all applications should close the database connection when they finish using the resource. MariaDB will close the session when the connection is closed and release all resources associated with the session. If the connection cannot be closed, MariaDB has the five global variables to allow timeouts to occur and automatically close the connection and release all associated resources.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If a user cannot explicitly end a DBMS session, the session may remain open and be exploited by an attacker; this is referred to as a zombie session.\n\nSuch logout may be explicit or implicit. Examples of explicit are clicking on a Log Out link or button in the application window; clicking the Windows Start button and selecting Log Out or Shut Down. Examples of implicit logout are closing the application's (main) window and powering off the workstation without invoking the OS shutdown. \n\nBoth the explicit and implicit logouts must be detected by the DBMS.\n\nIn all cases, the DBMS must ensure that the user's DBMS session and all processes owned by the session are terminated. \n\nThis should not, however, interfere with batch processes/jobs initiated by the user during his/her online session; these should be permitted to run to completion.\n\nAs a good programming practice, all applications should close the database connection when they finish using the resource. MariaDB will close the session when the connection is closed and release all resources associated with the session. If the connection cannot be closed, MariaDB has the five global variables to allow timeouts to occur and automatically close the connection and release all associated resources.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "MariaDB has five global variables which can be set so that connections will be closed after a certain period of inactivity. Check the values for these variables and verify they correspond to security procedures defined: \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE '%timeout%'; \n \ninteractive_timeout  - Time in seconds that the server waits for an interactive connection (one that connects with the mysql_real_connect() CLIENT_INTERACTIVE option) to become active before closing it. See also wait_timeout.\n\nwait_timeout - Time in seconds that the server waits for a connection to become active before closing it. The session value is initialized when a thread starts up from either the global value, if the connection is noninteractive, or from the interactive_timeout value, if the connection is interactive.\n\nIn situations where transactions may be started, but not committed or rolled back, more granular control and a shorter timeout may be desirable so as to avoid locks being held for too long.\n\nidle_transaction_timeout\nidle_write_transaction_timeout\nidle_readonly_transaction_timeout\n\nReview system documentation to obtain the organization's definition of circumstances requiring automatic session termination. If the documentation explicitly states that such termination is not required or is prohibited, this is not a finding.\n\nIf the security procedures require server-side session termination within a specified amount of time but MariaDB is not configured accordingly, this is a finding.", "FixText": "As an authorized user locate the session to be terminated and terminate that session.\n\nTo locate a session and terminate the session follow the following steps:\n\n1. Connect to the MariaDB database using an authorized user:\n\nmariadb -u admin_user -p \n\n2. At the MariaDB prompt run either of the following commands:\n\nMariaDB> SHOW PROCESSLIST;\nMariaDB> SELECT id, user, host, db, command, time, state, info, progress FROM information_schema.processlist;\n\n3. Identify the session to be terminated and issue kill process number from display. (**This will kill the session.**) Example: \n\nMariaDB> KILL 192;\n\n4. A kill query process number can be issued from display. (**This will kill the active query but leave the session active for run-away queries. **)\n\nConfigure MariaDB to automatically terminate a user session based on security procedures requirements regarding conditions or trigger events that require session termination.\n \nTo change the values of the following timeout variables to conform to organization-defined values for triggering conditions or events requiring session termination, select the appropriate variable to change as the database administrator. \n \nAs the administrator locate the MariaDB Enterprise Server configuration file to change. For Centos, RedHat, and similar distributions this will be in /etc/my.cnf.d/.\n\nIn the [mariadb] section add the lines:\n\ninteractive_timeout = value\nwait_timeout = value\nidle_transaction_timeout = value\nidle_write_transaction_timeout = value\nidle_readonly_transaction_timeout = value\n\nWhere value is in seconds and corresponds to the company defined value. Restart MariaDB Enterprise Server for these changes to take effect.", "CCI": "CCI-002363"}, {"VulnID": "V-253719", "RuleID": "SV-253719r841682_rule", "StigID": "MADB-10-006400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000311-DB-000308", "RuleTitle": "MariaDB must associate organization-defined types of security labels having organization-defined security label values with information in storage.", "Description": "<VulnDiscussion>Without the association of security labels to information, there is no basis for MariaDB to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of the DBMS product, a third-party product, or custom application code.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without the association of security labels to information, there is no basis for MariaDB to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of the DBMS product, a third-party product, or custom application code.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but the security labeling is not implemented or does not reliably maintain labels on information in storage, this is a finding.", "FixText": "Add custom data structures, data elements and application code, to provide reliable security labeling of information in transmission. Write Custom Code: https://mariadb.com/resources/blog/protect-your-data-row-level-security-in-mariadb-10-0/", "CCI": "CCI-002262"}, {"VulnID": "V-253720", "RuleID": "SV-253720r841685_rule", "StigID": "MADB-10-006500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000313-DB-000309", "RuleTitle": "MariaDB must associate organization-defined types of security labels having organization-defined security label values with information in process.", "Description": "<VulnDiscussion>Without the association of security labels to information, there is no basis for MariaDB to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of the DBMS product, a third-party product, or custom application code.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without the association of security labels to information, there is no basis for MariaDB to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling may be a feature of the DBMS product, a third-party product, or custom application code.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but the security labeling is not implemented or does not reliably maintain labels on information in process, this is a finding.", "FixText": "Add custom data structures, data elements and application code, to provide reliable security labeling of information in transmission. Write Custom Code: https://mariadb.com/resources/blog/protect-your-data-row-level-security-in-mariadb-10-0/", "CCI": "CCI-002263"}, {"VulnID": "V-253721", "RuleID": "SV-253721r841688_rule", "StigID": "MADB-10-006600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000314-DB-000310", "RuleTitle": "MariaDB must associate organization-defined types of security labels having organization-defined security label values with information in transmission.", "Description": "<VulnDiscussion>Without the association of security labels to information, there is no basis for MariaDB to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling in MariaDB is custom application code.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without the association of security labels to information, there is no basis for MariaDB to make security-related access-control decisions.\n\nSecurity labels are abstractions representing the basic properties or characteristics of an entity (e.g., subjects and objects) with respect to safeguarding information. \n\nThese labels are typically associated with internal data structures (e.g., tables, rows) within the database and are used to enable the implementation of access control and flow control policies, reflect special dissemination, handling or distribution instructions, or support other aspects of the information security policy. \n\nOne example includes marking data as classified or CUI. These security labels may be assigned manually or during data processing, but, either way, it is imperative these assignments are maintained while the data is in storage. If the security labels are lost when the data is stored, there is the risk of a data compromise.\n\nThe mechanism used to support security labeling in MariaDB is custom application code.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If security labeling is not required, this is not a finding.\n\nIf security labeling requirements have been specified, but the security labeling is not implemented or does not reliably maintain labels on information in transmission, this is a finding.", "FixText": "Add custom data structures, data elements and application code, to provide reliable security labeling of information in transmission. Write Custom Code: https://mariadb.com/resources/blog/protect-your-data-row-level-security-in-mariadb-10-0/", "CCI": "CCI-002264"}, {"VulnID": "V-253722", "RuleID": "SV-253722r841691_rule", "StigID": "MADB-10-006700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000328-DB-000301", "RuleTitle": "MariaDB must enforce discretionary access control policies, as defined by the data owner, over defined subjects, and objects.", "Description": "<VulnDiscussion>Discretionary Access Control (DAC) is based on the notion that individual users are owners of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.\n\nWhen discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects. \n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level. \n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Discretionary Access Control (DAC) is based on the notion that individual users are owners of objects and therefore have discretion over who should be authorized to access the object and in which mode (e.g., read or write). Ownership is usually acquired as a consequence of creating the object or via specified ownership assignment. DAC allows the owner to determine who will have access to objects they control. An example of DAC includes user-controlled table permissions.\n\nWhen discretionary access control policies are implemented, subjects are not constrained with regard to what actions they can take with information for which they have already been granted access. Thus, subjects that have been granted access to information are not prevented from passing (i.e., the subjects have the discretion to pass) the information to other subjects or objects. \n\nA subject that is constrained in its operation by Mandatory Access Control policies is still able to operate under the less rigorous constraints of this requirement. Thus, while Mandatory Access Control imposes constraints preventing a subject from passing information to another subject operating at a different sensitivity level, this requirement permits the subject to pass the information to any subject at the same sensitivity level. \n\nThe policy is bounded by the information system boundary. Once the information is passed outside of the control of the information system, additional means may be required to ensure the constraints remain in effect. While the older, more traditional definitions of discretionary access control require identity-based access control, that limitation is not required for this use of discretionary access control.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review system documentation to identify the required DAC.\n\nReview the security configuration of the database and MariaDB. If applicable, review the security configuration of the application(s) using the database.\n\nIf the discretionary access control defined in the documentation is not implemented in the security configuration, this is a finding.\n \nTo check the permissions granted to a user use the following queries:\n \nAs the database administrator, run the following SQL:\n\n**For user privileges:\n\nRun this script to create the SHOW GRANTS script for each user: \n\nMariaDB> SELECT DISTINCT CONCAT( 'SHOW GRANTS FOR ', user,'@', host,';') AS grantQuery FROM mysql.user WHERE is_role = 'N';\n\nRun each SHOW GRANTS command for each user.\n\nVerify that all users have the correct privileges. If they do not, this is a finding.\n\n**For role privileges (except admin_option, whether the role can be granted by a particular use):\n\nMariaDB> SELECT CONCAT('SHOW GRANTS FOR ',Role,';' ) FROM mysql.roles_mapping;\n\nRun each SHOW GRANTS command for each role.\n\nVerify that all roles have the correct privileges. If they do not, this is a finding.\n \n**To determine if a role has admin_option (Whether the role can be granted by a particular user)\n \nMariaDB> SELECT * FROM mysql.roles_mapping;\n \nVerify that all privileges are correct. If they are not, this is a finding.", "FixText": "Implement the organization's DAC policy in the security configuration of the database and DBMS, and, if applicable, the security configuration of the application(s) using the database.\n \nTo grant and revoke privileges, as the database administrator, use the following SQL syntax:\n\n**To Grant User and Role privileges:\n \nMariaDB> GRANT  privilege  ON  database . table  TO  user|role ;\n \n**To Revoke User and Role privileges:\n \nMariaDB> REVOKE  privilege_type  ON   database . table  FROM  user|role ;", "CCI": "CCI-002165"}, {"VulnID": "V-253723", "RuleID": "SV-253723r841694_rule", "StigID": "MADB-10-006800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000340-DB-000304", "RuleTitle": "MariaDB must prevent nonprivileged users from executing privileged functions, to include disabling, circumventing, or altering implemented security safeguards/countermeasures.", "Description": "<VulnDiscussion>Preventing nonprivileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Nonprivileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from nonprivileged users.\n\nA privileged function in MariaDB/database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of the DBMS and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database triggers, other mechanisms, or a combination of these.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Preventing nonprivileged users from executing privileged functions mitigates the risk that unauthorized individuals or processes may gain unnecessary access to information or privileges. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nDepending on circumstances, privileged functions can include, for example, establishing accounts, performing system integrity checks, or administering cryptographic key management activities. Nonprivileged users are individuals that do not possess appropriate authorizations. Circumventing intrusion detection and prevention mechanisms or malicious code protection mechanisms are examples of privileged functions that require protection from nonprivileged users.\n\nA privileged function in MariaDB/database context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to: \n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of the DBMS and the design of the database and associated applications, the prevention of unauthorized use of privileged functions may be achieved by means of DBMS security features, database triggers, other mechanisms, or a combination of these.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the system documentation to obtain the definition of the database/MariaDB functionality considered privileged in the context of the system in question.\n\nReview the MariaDB security configuration and/or other means used to protect privileged functionality from unauthorized use.\n\nIf the configuration does not protect all of the actions defined as privileged, this is a finding.", "FixText": "Configure MariaDB security to protect all privileged functionality.", "CCI": "CCI-002235"}, {"VulnID": "V-253724", "RuleID": "SV-253724r841697_rule", "StigID": "MADB-10-006900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000342-DB-000302", "RuleTitle": "Execution of software modules (to include stored procedures, functions, and triggers) with elevated privileges must be restricted to necessary cases only.", "Description": "<VulnDiscussion>In certain situations, to provide required functionality, MariaDB needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation must be used only where necessary and protected from misuse.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "In certain situations, to provide required functionality, MariaDB needs to execute internal logic (stored procedures, functions, triggers, etc.) and/or external code modules with elevated privileges. However, if the privileges required for execution are at a higher level than the privileges assigned to organizational users invoking the functionality applications/programs, those users are indirectly provided with greater privileges than assigned by organizations.\n\nPrivilege elevation must be used only where necessary and protected from misuse.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Functions and Procedures in MariaDB all have DEFINER and SECURITY_TYPE options.\n\nIf SECURITY_TYPE = DEFINER then the function or procedure is run using the privileges of the DEFINER account. \n\nIf SECURITY_TYPE = INVOKER, then they will be run using the privileges of the user invoking the function or procedure.\n\nTo list the values of the DEFINER and SECURITY_TYPE in functions and procedures as the database administrator, run the following SQL:\n\nMariaDB> SELECT ROUTINE_NAME, ROUTINE_SCHEMA, ROUTINE_TYPE, DEFINER, SECURITY_TYPE FROM information_schema.routines WHERE ROUTINE_SCHEMA NOT IN ('sys','mysql');\n\nTriggers in MariaDB have a DEFINER option.\n\nFor Triggers the value of the DEFINER determines the privileges to be used at trigger activation time.\n\nTo list the values of the DEFINER in Triggers, as the database administrator, run the following SQL:\n\nMariaDB> SELECT trigger_schema, trigger_name, action_statement, definer FROM information_schema.triggers;\n\nIf elevation of MariaDB privileges is utilized but not documented, this is a finding.\n\nIf elevation of MariaDB privileges is documented, but not implemented as described in the documentation, this is a finding.\n\nIf the privilege-elevation logic can be invoked in ways other than intended, or in contexts other than intended, or by subjects/principals other than intended, this is a finding.", "FixText": "Determine where, when, how, and by what principals/subjects elevated privilege is needed. \n\nTo change the values of the SECURITY_TYPE for functions and procedures:\n\nMariaDB> USE <database>;\nMariaDB> ALTER FUNCTION  procedure_name | function_name  sql security  INVOKER | DEFINER ;\n\nTo change the values of the DEFINER for functions, procedures, and triggers, run the following SQL as the database administrator:\n\nMariaDB> SHOW CREATE  function | procedure ;\nMariaDB> DROP  function | procedure ;\n\nRecreate the function or procedure using the results of the create statement (from the SHOW CREATE results above), with the definer set to the desired user.", "CCI": "CCI-002233"}, {"VulnID": "V-253725", "RuleID": "SV-253725r841700_rule", "StigID": "MADB-10-007100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000356-DB-000314", "RuleTitle": "MariaDB must utilize centralized management of the content captured in audit records generated by all components of the DBMS.", "Description": "<VulnDiscussion>MariaDB can be configured to use syslog or any OS system file to store audit records to designated disk directories. \n\nReview the server_audit_events to make sure that they include QUERY, and verify the server_audit_logging is set ON.\n\nCheck the log file location:\n----\nAs the database administrator, run the following SQL:\nmysql -u root -e show global variables like  server_audit% \n\nVerify the server_audit_logging is set ON.\n##To use system logs (syslog): \n     From the query above verify the value of:\n       server_audit_output_type=SYSLOG\n##To use a OS file:\n     From the query above verify the value of:\n       server_audit_output_type=FILE\n \nThe following values should also be checked:\nserver_audit_file_rotate_now = ON \nserver_audit_file_rotate_size x*1024. This is the size of the file (in bytes) that will cause file rotation.\nserver_ audit_file_rotations =x   This is the number of rotations to save.\n------\n \nCheck with the security guide to verify that the central management system is getting the audit logs from the correct directories.\n\nIf MariaDB audit records are not written directly to or systematically transferred to the centralized log management system in the security guide, this is a finding.\n \nIf MariaDB does not have a continuous network connection to the centralized log management system, and MariaDB audit records are not transferred to the centralized log management system weekly or more often, this is a finding.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "MariaDB can be configured to use syslog or any OS system file to store audit records to designated disk directories. \n\nReview the server_audit_events to make sure that they include QUERY, and verify the server_audit_logging is set ON.\n\nCheck the log file location:\n----\nAs the database administrator, run the following SQL:\nmysql -u root -e show global variables like  server_audit% \n\nVerify the server_audit_logging is set ON.\n##To use system logs (syslog): \n     From the query above verify the value of:\n       server_audit_output_type=SYSLOG\n##To use a OS file:\n     From the query above verify the value of:\n       server_audit_output_type=FILE\n \nThe following values should also be checked:\nserver_audit_file_rotate_now = ON \nserver_audit_file_rotate_size x*1024. This is the size of the file (in bytes) that will cause file rotation.\nserver_ audit_file_rotations =x   This is the number of rotations to save.\n------\n \nCheck with the security guide to verify that the central management system is getting the audit logs from the correct directories.\n\nIf MariaDB audit records are not written directly to or systematically transferred to the centralized log management system in the security guide, this is a finding.\n \nIf MariaDB does not have a continuous network connection to the centralized log management system, and MariaDB audit records are not transferred to the centralized log management system weekly or more often, this is a finding.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine if the centralized log management system is pulling syslog. If so, verify MariaDB Enterprise Audit plugin is configured to write to syslog.\n\nIf the centralized log management system is not pulling syslog, verify the MariaDB Enterprise Audit plugin is configured to write to a file which the centralized log management system can access. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_output_type';\n\nIf not writing to syslog, AND the audit file is not being pulled by a central log management system, this is a finding.", "FixText": "Configure MariaDB or deploy and configure software tools to transfer audit records to a centralized log management system, continuously and in near-real time where a continuous network connection to the log management system exists, or at least weekly in the absence of such a connection.\n\nIf server_audit_output_type is set to FILE, set the directory in the MariaDB configuration file to one that is managed by the centralized management system.\n\n[server]\nserver_audit_file_path =  /path/to/audit.log \n\nRestart MariaDB Enterprise Server. \n\nTo set up the audit logs to write to sylog:\n\nEdit the mariadb-enterprise.cnf file. Add the following under the [mariadb] section:  \n\nserver_audit_output_type = 'syslog' \n\nAfter the .cnf file is updated and saved, the mariadb database service must be restarted.\n\nIf audit logs are written to syslog, verify the central log management system is pulling the server's syslog.", "CCI": "CCI-001844"}, {"VulnID": "V-253726", "RuleID": "SV-253726r841703_rule", "StigID": "MADB-10-007200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000356-DB-000315", "RuleTitle": "MariaDB must provide centralized configuration of the content to be captured in audit records generated by all components of the DBMS.", "Description": "<VulnDiscussion>If the configuration of the DBMS's auditing is spread across multiple locations in the database management software, or across multiple commands, only loosely related, it is harder to use and takes longer to reconfigure in response to events.\n\nThe DBMS must provide a unified tool for audit configuration.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If the configuration of the DBMS's auditing is spread across multiple locations in the database management software, or across multiple commands, only loosely related, it is harder to use and takes longer to reconfigure in response to events.\n\nThe DBMS must provide a unified tool for audit configuration.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the system documentation for a description of how audit records are off-loaded and how local audit log space is managed. \n\nIf the MariaDB audit records are not written directly to or systematically transferred to a centralized log management system, this is a finding.", "FixText": "Configure and/or deploy software tools to ensure that MariaDB audit records are written directly to or systematically transferred to a centralized log management system.", "CCI": "CCI-001844"}, {"VulnID": "V-253727", "RuleID": "SV-253727r841706_rule", "StigID": "MADB-10-007300", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000357-DB-000316", "RuleTitle": "MariaDB must allocate audit record storage capacity in accordance with organization-defined audit record storage requirements.", "Description": "<VulnDiscussion>To ensure sufficient storage capacity for the audit logs, MariaDB must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be off-loaded to a centralized log management system, it remains necessary to provide space on the database server to serve as a buffer against outages and capacity limits of the off-loading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial installation of MariaDB and is closely associated with the DBA and system administrator roles. The DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are off-loaded to the central log management system; and any limitations that exist on MariaDB s ability to reuse the space formerly occupied by off-loaded records.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "To ensure sufficient storage capacity for the audit logs, MariaDB must be able to allocate audit record storage capacity. Although another requirement (SRG-APP-000515-DB-000318) mandates that audit data be off-loaded to a centralized log management system, it remains necessary to provide space on the database server to serve as a buffer against outages and capacity limits of the off-loading mechanism.\n\nThe task of allocating audit record storage capacity is usually performed during initial installation of MariaDB and is closely associated with the DBA and system administrator roles. The DBA or system administrator will usually coordinate the allocation of physical drive space with the application owner/installer and the application will prompt the installer to provide the capacity information, the physical location of the disk, or both.\n\nIn determining the capacity requirements, consider such factors as total number of users; expected number of concurrent users during busy periods; number and type of events being monitored; types and amounts of data being captured; the frequency/speed with which audit records are off-loaded to the central log management system; and any limitations that exist on MariaDB s ability to reuse the space formerly occupied by off-loaded records.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Investigate whether there have been any incidents where MariaDB ran out of audit file log disk space since the last time the space was allocated or other corrective measures were taken.\n\nIf there have been incidents where MariaDB ran out of audit log file disk space, this is a finding.\n\nMariaDB can be configured to use syslog or any OS system file to store audit records to designated disk directories.\n\nCheck the log file location:\n\nTo check how much storage capacity is available for audit records, first determine the location where the audit logs are being written by executing the following command. Run the following SQL:\n\nshow global variables like  'server_audit%' ;\n\nFor system logs (syslog): \n     From the query above verify the value of:\n       server_audit_output_type=SYSLOG\n\nFor OS file:\n     From the query above verify the value of:\n       server_audit_output_type=FILE\n\nIf written to SYSLOG, follow the procedure for storage in the corresponding OS STIG.\n\nIf written to FILE, check the remaining storage on the disk. If it does not meet organizationally defined audit record storage requirements, this is a finding.", "FixText": "MariaDB audit log file location either goes to the syslog directory (if logging is set to SYSLOG) or is controlled by the server_audit_file_path in the MariaDB my.cnf configuration file.\n\nIf the audit log file directory does not have enough disk space available, then increase the diskspace available for the audit log file directory or move the audit log file directory to another location that has more disk space available.\nAllocate sufficient audit file space to support peak demand.\n \nIf server_audit_output_type=FILE set the directory in /etc/my.cnf to one that is managed by the centralized management system.\n\n[mariadb]\nserver_audit_file_path=  mydir / mylogfilename .log \n\nNow, as the system administrator, restart the server with the new configuration: \n        $ systemctl restart mysqld\n \nAllocate sufficient audit file space to support peak demand for the log files.", "CCI": "CCI-001849"}, {"VulnID": "V-253728", "RuleID": "SV-253728r841709_rule", "StigID": "MADB-10-007400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000359-DB-000319", "RuleTitle": "MariaDB must provide a warning to appropriate support staff when allocated audit record storage volume reaches 75 percent of maximum audit record storage capacity.", "Description": "<VulnDiscussion>Organizations are required to use a central log management system, so, under normal conditions, the audit space allocated to the DBMS on its own server will not be an issue. However, space will still be required on the MariaDB server for audit records in transit, and, under abnormal conditions, this could fill up. Since a requirement exists to halt processing upon audit failure, a service outage would result.\n\nIf support personnel are not notified immediately upon storage volume utilization reaching 75 percent, they are unable to plan for storage capacity expansion. \n\nThe appropriate support staff include, at a minimum, the ISSO and the DBA/SA.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Organizations are required to use a central log management system, so, under normal conditions, the audit space allocated to the DBMS on its own server will not be an issue. However, space will still be required on the MariaDB server for audit records in transit, and, under abnormal conditions, this could fill up. Since a requirement exists to halt processing upon audit failure, a service outage would result.\n\nIf support personnel are not notified immediately upon storage volume utilization reaching 75 percent, they are unable to plan for storage capacity expansion. \n\nThe appropriate support staff include, at a minimum, the ISSO and the DBA/SA.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review OS, or third-party logging application settings to determine whether a warning will be provided when 75 percent of DBMS audit log storage capacity is reached.\n\nIf no warning will be provided, this is a finding.", "FixText": "Configure the system to notify appropriate support staff immediately upon storage volume utilization reaching 75 percent.\n\nMariaDB does not monitor storage, however, it is possible to monitor storage with a script.\n\n##### Example Monitoring Script\n\n#!/bin/bash\n\nDATADIR=/var/lib/psql/mysql\nCURRENT=$(df ${DATADIR?} | grep / | awk '{ print $5}' | sed 's/%//g')\nTHRESHOLD=75\n\nif [ \"$CURRENT\" -gt \"$THRESHOLD\" ] ; then\nmail -s 'Disk Space Alert' mail@support.com << EOF\nThe data directory volume is almost full. Used: $CURRENT\n%EOF\nfi\n\nSchedule this script in cron to run around the clock.", "CCI": "CCI-001855"}, {"VulnID": "V-253729", "RuleID": "SV-253729r841712_rule", "StigID": "MADB-10-007500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000360-DB-000320", "RuleTitle": "MariaDB must provide an immediate real-time alert to appropriate support staff of all audit failure events requiring real-time alerts.", "Description": "<VulnDiscussion>It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without a real-time alert, security personnel may be unaware of an impending failure of the audit capability, and system operation may be adversely affected. \n\nThe appropriate support staff include, at a minimum, the ISSO and the DBA/SA.\n\nAlerts provide organizations with urgent messages. Real-time alerts provide these messages immediately (i.e., the time from event detection to alert occurs in seconds or less).</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "It is critical for the appropriate personnel to be aware if a system is at risk of failing to process audit logs as required. Without a real-time alert, security personnel may be unaware of an impending failure of the audit capability, and system operation may be adversely affected. \n\nThe appropriate support staff include, at a minimum, the ISSO and the DBA/SA.\n\nAlerts provide organizations with urgent messages. Real-time alerts provide these messages immediately (i.e., the time from event detection to alert occurs in seconds or less).", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review MariaDB Server settings, OS, or third-party logging software settings to determine whether a real-time alert will be sent to the appropriate personnel when auditing fails for any reason.\n\nIf real-time alerts are not sent upon auditing failure, this is a finding.", "FixText": "Configure the system to provide an immediate real-time alert to appropriate support staff when a specified audit failure occurs.\n\nIt is possible to create scripts or implement third-party tools to enable real-time alerting for audit failures in MariaDB.", "CCI": "CCI-001858"}, {"VulnID": "V-253730", "RuleID": "SV-253730r841715_rule", "StigID": "MADB-10-007600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000374-DB-000322", "RuleTitle": "MariaDB must record time stamps, in audit records and application data, that can be mapped to Coordinated Universal Time (UTC, formerly GMT).", "Description": "<VulnDiscussion>If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.\n\nTime stamps generated by MariaDB must include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC. \n\nSome DBMS products offer a data type called TIMESTAMP that is not a representation of date and time. Rather, it is a database state counter and does not correspond to calendar and clock time. This requirement does not refer to that meaning of TIMESTAMP.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If time stamps are not consistently applied and there is no common time reference, it is difficult to perform forensic analysis.\n\nTime stamps generated by MariaDB must include date and time. Time is commonly expressed in Coordinated Universal Time (UTC), a modern continuation of Greenwich Mean Time (GMT), or local time with an offset from UTC. \n\nSome DBMS products offer a data type called TIMESTAMP that is not a representation of date and time. Rather, it is a database state counter and does not correspond to calendar and clock time. This requirement does not refer to that meaning of TIMESTAMP.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check the current timezone value by running the following command as an administrative user:\n \nMariaDB> SHOW GLOBAL VARIABLES LIKE '%zone%';\n \nIf time_zone = SYSTEM, and system_time_zone is not equal to UTC, this is a finding.\n \nIf time_zone is not SYSTEM and is not UTC, this is a finding.", "FixText": "On the OS command line run the following command to get the time zone the system is in:\n \ndate | awk '{print $5;}'\n\nIf the system is in UTC, to set the time zone for timestamps to UTC, modify the MariaDB configuration file located within /etc/my.cnf.d/ and set the variable time_zone to SYSTEM under the server section. Restart MariaDB Enterprise Server. \n\nExample: \n\n[server]\nTimezone  = SYSTEM\n\nIf the OS system timezone is not set to UTC, to set the time zone for timestamps to UTC, modify the MariaDB configuration file located within /etc/my.cnf.d/ and set the variable time_zone to UTC under the server section. Restart MariaDB Enterprise Server. \n\nExample: \n\n[server]\nTimezone  = UTC", "CCI": "CCI-001890"}, {"VulnID": "V-253731", "RuleID": "SV-253731r841718_rule", "StigID": "MADB-10-007800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000378-DB-000365", "RuleTitle": "MariaDB must prohibit user installation of logic modules (stored procedures, functions, triggers, views, etc.) without explicit privileged status.", "Description": "<VulnDiscussion>Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.\n\nDBMS functionality and the nature and requirements of databases will vary; so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.\n\nThe DBMS must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Allowing regular users to install software, without explicit privileges, creates the risk that untested or potentially malicious software will be installed on the system. Explicit privileges (escalated or administrative privileges) provide the regular user with explicit capabilities and control that exceed the rights of a regular user.\n\nDBMS functionality and the nature and requirements of databases will vary; so while users are not permitted to install unapproved software, there may be instances where the organization allows the user to install approved software packages such as from an approved software repository. The requirements for production servers will be more restrictive than those used for development and research.\n\nThe DBMS must enforce software installation by users based upon what types of software installations are permitted (e.g., updates and security patches to existing software) and what types of installations are prohibited (e.g., software whose pedigree with regard to being potentially malicious is unknown or suspect by the organization). \n\nIn the case of a database management system, this requirement covers stored procedures, functions, triggers, views, etc.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If MariaDB supports only software development, experimentation and/or developer-level testing (that is, excluding production systems, integration testing, stress testing, and user acceptance testing), this is not a finding.\n\nReview MariaDB and database security settings with respect to nonadministrative users ability to create, alter, or replace logic modules, to include but not necessarily only stored procedures, functions, triggers, and views.\n\n1. To list the privileges for all users on all tables and schemas, as the database administrator, run the following:\n \nGather a list of SHOW GRANTS commands. SHOW GRANTS will list the privileges granted to the account.\n\nRun this script to create the SHOW GRANTS script for each user: \nMariaDB> SELECT DISTINCT CONCAT( 'SHOW GRANTS FOR ', user,'@', host,';') AS grantQuery FROM mysql.user WHERE is_role = 'N';\n\nRun each SHOW GRANTS command for each user.\n \n2. Only DEFINERS of routines (functions and procedures) can change routines. To view the DEFINERS of all functions and procedures, as database administrator run the following SQL:\n \nMariaDB>  SELECT * FROM mysql.proc \\G\n \n3. Only DEFINERS of triggers can change triggers. To view all triggers and their DEFINERS, as database administrator run the following SQL: \n\nMariaDB>  SELECT * FROM information_schema.triggers \\G\n \n4. Views: At view definition time, the view creator must have the privileges needed to use the top-level objects accessed by the view. For example, if the view definition refers to table columns, the creator must have privileges for the columns, as described previously. If the definition refers to a stored function, only the privileges needed to invoke the function can be checked. The privileges required when the function runs can be checked only as it executes. For different invocations of the function, different execution paths within the function might be taken.\n\nIf any such permissions exist and are not documented and approved, this is a finding.", "FixText": "Document and obtain approval for any nonadministrative users who require the ability to create, alter, or replace logic modules.\n\nCheck the security guide to implement the approved permissions. Revoke any unapproved permissions.", "CCI": "CCI-001812"}, {"VulnID": "V-253732", "RuleID": "SV-253732r841721_rule", "StigID": "MADB-10-007900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000380-DB-000360", "RuleTitle": "MariaDB must enforce access restrictions associated with changes to the configuration of MariaDB or database(s).", "Description": "<VulnDiscussion>Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system. \n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system. \n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Failure to provide logical access restrictions associated with changes to configuration may have significant effects on the overall security of the system. \n\nWhen dealing with access restrictions pertaining to change control, it should be noted that any changes to the hardware, software, and/or firmware components of the information system can potentially have significant effects on the overall security of the system. \n\nAccordingly, only qualified and authorized individuals should be allowed to obtain access to system components for the purposes of initiating changes, including upgrades and modifications.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "To list all the permissions of individual roles, as the database administrator, run the following SQL:\n \n1. For User privileges:\n\nGather a list of SHOW GRANTS commands. SHOW GRANTS will list the privileges granted to the account.\n\nRun this script to create the SHOW GRANTS script for each user: \nMariaDB> SELECT DISTINCT CONCAT( 'SHOW GRANTS FOR ', user,'@', host,';') AS grantQuery FROM mysql.user WHERE is_role = 'N';\n\nRun each SHOW GRANTS command for each user.\n\n2. For role privileges (except admin_option, whether the role can be granted by a particular use):\n\n  MariaDB> SELECT CONCAT('SHOW GRANTS FOR ',Role,';' ) FROM mysql.roles_mapping;\n \nRun each SHOW GRANTS command for each role.\n\nIf any role has admin_option that should not, this is a finding.\n\nThere are no privileges assigned to databases or tables, security is enforced through the traditional way with granting very specific user privileges.\n \nIf any database or schema has update or create privileges and should not, this is a finding.", "FixText": "Configure MariaDB to enforce access restrictions associated with changes to the configuration of MariaDB or database(s). \n \n1. Use REVOKE to revoke privileges or roles on objects from users.\n \nMariaDB>  REVOKE  privileges  ON  object  FROM  user ;\n \n2. Use REVOKE to remove a role from a user or another role that it was previously assigned to.\n \nMariaDB>  REVOKE  role  FROM  grantee or role ;", "CCI": "CCI-001813"}, {"VulnID": "V-253733", "RuleID": "SV-253733r841724_rule", "StigID": "MADB-10-008000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000381-DB-000361", "RuleTitle": "MariaDB must produce audit records of its enforcement of access restrictions associated with changes to the configuration of the DBMS or database(s).", "Description": "<VulnDiscussion>Without auditing the enforcement of access restrictions against changes to configuration, it would be difficult to identify attempted attacks and an audit trail would not be available for forensic investigation for after-the-fact actions. \n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after the fact.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without auditing the enforcement of access restrictions against changes to configuration, it would be difficult to identify attempted attacks and an audit trail would not be available for forensic investigation for after-the-fact actions. \n\nEnforcement actions are the methods or mechanisms used to prevent unauthorized changes to configuration settings. Enforcement action methods may be as simple as denying access to a file based on the application of file permissions (access restriction). Audit items may consist of lists of actions blocked by access restrictions or changes identified after the fact.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "To verify that system denies are logged when unprivileged users attempt to change database configuration, run the following commands using the database administrator, and a newly created user shown here as test_user: \n\nMariaDB> CREATE USER 'test_user'@'localhost' IDENTIFIED BY 'TEst_Password!2';\nMariaDB> CREATE DATABASE myapp;\nMariaDB> CREATE TABLE myapp.mytable (a int, b char(10));\n\nAs the newly created test_user, alter the table: \n$ mariadb -u test_user -p\nEnter password:\nMariaDB> ALTER TABLE mytable ADD COLUMN (c int);\n\nCheck the latest log to determine if the denial is logged. For example: \n$ tail -f /var/log/mysql/audit.log\n \n20190909 12:14:29,osboxes,test_user9,localhost,21,0,CONNECT,,,0\n20190909 12:14:29,osboxes,test_user9,localhost,21,10,QUERY,, alter table myapp.mytable add column (c int) ,1142\n20190909 12:14:29,osboxes,test_user9,localhost,21,0,DISCONNECT,,,0\n\nIf the denial is not produced, this is a finding.\n\nBy default MariaDB configuration files are owned by the OS Administrator user (here root) and cannot be edited by nonprivileged users:\n\n$ ls -la /etc | grep my.cnf\n-rw-r--r--. \u00a0 1 root root \u00a0 \u00a0 \u00a0301 Aug 25 12:45 my.cnf\n\nIf my.cnf is not owned by the OS administrator (chown here as root) and does not have read and write permissions for the owner, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));\n\nIf the config files are not secured properly in the file system, change the ownership and permissions with operating system operations. \n\nExample: \n\nchown root:root /etc/my.cnf.d\nchmod 644 /etc/my.cnf.d", "CCI": "CCI-001814"}, {"VulnID": "V-253734", "RuleID": "SV-253734r841727_rule", "StigID": "MADB-10-008100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000383-DB-000364", "RuleTitle": "MariaDB must disable network functions, ports, protocols, and services deemed by the organization to be nonsecure, in accord with the Ports, Protocols, and Services Management (PPSM) guidance.", "Description": "<VulnDiscussion>Use of nonsecure network functions, ports, protocols, and services exposes the system to avoidable threats.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Use of nonsecure network functions, ports, protocols, and services exposes the system to avoidable threats.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check the ports in use by running the following command as the administrator user:\n\nMariaDB > SHOW GLOBAL VARIABLES LIKE 'port';\n\nIf the currently defined port configuration is deemed prohibited, this is a finding.", "FixText": "To verify that mariadb system denies specific network functions, locate cnf file and specifically bind ip address to deny (or port):\n        $ ls -la /etc | grep my.cnf\n-rw-r--r--. \u00a0 1 root root \u00a0 \u00a0 \u00a0301 Aug 25 12:45 my.cnf\n      bind-address = 127.0.0.1 #just an example\n   \nTo specifically change default port (3306) is something different:  port = 1234\nbind = 10.10.10.10      #as an example \n\nAfter making changes to the .cnf file, stop and restart the database service.", "CCI": "CCI-001762"}, {"VulnID": "V-253735", "RuleID": "SV-253735r841730_rule", "StigID": "MADB-10-008200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000389-DB-000372", "RuleTitle": "MariaDB must require users to reauthenticate when organization-defined circumstances or situations require reauthentication.", "Description": "<VulnDiscussion>The DoD standard for authentication of an interactive user is the presentation of a Common Access Card (CAC) or other physical token bearing a valid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled with a Personal Identification Number (PIN) to be entered by the user at the beginning of each session and whenever reauthentication is required.\n\nWithout reauthentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user reauthenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:\n\n  (i) When authenticators change; \n (ii) When roles change; \n(iii) When security categories of information systems change; \n(iv) When the execution of privileged functions occurs; \n (v) After a fixed period of time; or\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The DoD standard for authentication of an interactive user is the presentation of a Common Access Card (CAC) or other physical token bearing a valid, current, DoD-issued Public Key Infrastructure (PKI) certificate, coupled with a Personal Identification Number (PIN) to be entered by the user at the beginning of each session and whenever reauthentication is required.\n\nWithout reauthentication, users may access resources or perform tasks for which they do not have authorization.\n\nWhen applications provide the capability to change security roles or escalate the functional capability of the application, it is critical the user reauthenticate.\n\nIn addition to the reauthentication requirements associated with session locks, organizations may require reauthentication of individuals and/or devices in other situations, including (but not limited to) the following circumstances:\n\n  (i) When authenticators change; \n (ii) When roles change; \n(iii) When security categories of information systems change; \n(iv) When the execution of privileged functions occurs; \n (v) After a fixed period of time; or\n(vi) Periodically.\n\nWithin the DoD, the minimum circumstances requiring reauthentication are privilege escalation and role changes.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Determine all situations where a user must reauthenticate. Check if the mechanisms that handle such situations use the following SQL:\n\nTo make a single user reauthenticate, an existing connection must be present:\n\nTo search for a specific user:\nMariaDB> SELECT * FROM information_schema.PROCESSLIST where user ='<name>' and host like '%';\n\nTo review all  connections:\nMariaDB> SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST;\n\nNote the ID(s) (processlist_id) of the connection(s) for the user that must reauthenticate.\n\nTo make a user reauthenticate, run the following for each ID returned above (as they can have multiple connections):\n\nMariaDB> KILL CONNECTION processslist_id;\n\nIf the provided SQL does not force reauthentication, this is a finding.", "FixText": "To force a single user reauthenticate, the user must be currently authenticated to the database server. \n\nFind the process ID of the user in question:\n\nMariaDB> SELECT id FROM information_schema.processlist WHERE user = 'username'; \n\nUse the id to kill the process, which kills the connection and forces the user to reauthenticate: \n\nMariaDB> KILL id; \n\nTo force all users to reauthenticate, run the following as the database administrator:\n\nMariaDB> SELECT concat( KILL  ,id, ; ) FROM information_schema.processlist INTO OUTFILE /tmp/x.txt;\n\nMariaDB> SOURCE /tmp/x.txt;", "CCI": "CCI-002038"}, {"VulnID": "V-253736", "RuleID": "SV-253736r841733_rule", "StigID": "MADB-10-008300", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000400-DB-000367", "RuleTitle": "MariaDB must prohibit the use of cached authenticators after an organization-defined time period.", "Description": "<VulnDiscussion>If cached authentication information is out-of-date, the validity of the authentication information may be questionable.\n\nEach connection to the MariaDB database requires the authentication of the user. The authentication remains in place for the connection until the connection is closed or the connection times out due to inactivity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "If cached authentication information is out-of-date, the validity of the authentication information may be questionable.\n\nEach connection to the MariaDB database requires the authentication of the user. The authentication remains in place for the connection until the connection is closed or the connection times out due to inactivity.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "The system parameter idle_transaction_timeout specifies in seconds when a connection will be terminated due to inactivity. After a connection is terminated, a new request to the database must be preceded by an authentication, which is not cached within the database.\n\nRun the following SQL:\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'idle_transaction_timeout';\n\nIf the value is 0, this is a finding.", "FixText": "Verify that the idle_transaction_wait is set to a value greater than 0 or is set to the value needed by the administrator. The value of idle_transaction_wait can be validated by issuing SHOW VARIABLES. Example:\n\nLocate the MariaDB Enterprise Server configuration files in /etc/my.cnf.d/. Add the following: \n\nUnder the [mariadb] section: \n\nidle_transaction_timeout = 60\n\nAfter making changes to the .cnf file, stop and restart the database service.", "CCI": "CCI-002007"}, {"VulnID": "V-253737", "RuleID": "SV-253737r841736_rule", "StigID": "MADB-10-008400", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000416-DB-000380", "RuleTitle": "MariaDB must use NSA-approved cryptography to protect classified information in accordance with the data owner's requirements.", "Description": "<VulnDiscussion>Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of MariaDB with the encryption devices.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nNSA-approved cryptography for classified networks is hardware based. This requirement addresses the compatibility of MariaDB with the encryption devices.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If MariaDB is deployed in an unclassified environment, this is not applicable (NA).\n\nIf MariaDB is not using NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards, this is a finding.\n\nTo check if MariaDB is configured to use SSL, as the database administrator: \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'have_ssl';\n\nIf have_ssl is not YES, this is a finding.\n\nConsult network administration staff to determine whether the server is protected by NSA-approved encrypting devices. If not, this a finding.", "FixText": "Configure the DBMS and related system components to use NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n \nConfigure MariaDB to use TLS.\n\nDetails for this procedure can be found here:\nhttps://mariadb.com/docs/security/encryption/in-transit/enable-tls-server/", "CCI": "CCI-002450"}, {"VulnID": "V-253738", "RuleID": "SV-253738r841739_rule", "StigID": "MADB-10-008500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000427-DB-000385", "RuleTitle": "MariaDB must only accept end entity certificates issued by DoD PKI or DoD-approved PKI Certification Authorities (CAs) for the establishment of all encrypted sessions.", "Description": "<VulnDiscussion>Only DoD-approved external PKIs have been evaluated to ensure that they have security controls and identity vetting procedures in place that are sufficient for DoD systems to rely on the identity asserted in the certificate. PKIs lacking sufficient security controls and identity vetting procedures risk being compromised and issuing certificates that enable adversaries to impersonate legitimate users. \n\nThe authoritative list of DoD-approved PKIs is published at https://dl.dod.cyber.mil/wp-content/uploads/pki-pke/pdf/unclass-ss_using_commercial_pki_certificates.pdf.\n\nThis requirement focuses on communications protection for the MariaDB session rather than for the network packet.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Only DoD-approved external PKIs have been evaluated to ensure that they have security controls and identity vetting procedures in place that are sufficient for DoD systems to rely on the identity asserted in the certificate. PKIs lacking sufficient security controls and identity vetting procedures risk being compromised and issuing certificates that enable adversaries to impersonate legitimate users. \n\nThe authoritative list of DoD-approved PKIs is published at https://dl.dod.cyber.mil/wp-content/uploads/pki-pke/pdf/unclass-ss_using_commercial_pki_certificates.pdf.\n\nThis requirement focuses on communications protection for the MariaDB session rather than for the network packet.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the database administrator, check the following variables: \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_ca';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_cert'; \n\nThe Value column will show the fully qualified file name of the ssl_ca and ssl_cert respectively. The issuer can be found by running the following command:\n$ openssl x509 -in  fully-qualified-file-name-of-ssl_ca  -noout -issuer\n$ openssl x509 -in  fully-qualified-file-name-of-ssl_cert  -noout -issuer\n \nThe issuer should be checked against the authoritative list of DoD-approved PKIs, which is published at https://dl.dod.cyber.mil/wp-content/uploads/pki-pke/pdf/unclass-ss_using_commercial_pki_certificates.pdf.\n\nIf the DBMS will accept non-DoD approved PKI end-entity certificates, this is a finding.", "FixText": "Revoke trust in any certificates not issued by a DoD-approved certificate authority.   \n \nConfigure MariaDB to accept only DoD and DoD-approved PKI end-entity certificates.", "CCI": "CCI-002470"}, {"VulnID": "V-253739", "RuleID": "SV-253739r841742_rule", "StigID": "MADB-10-008600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000428-DB-000386", "RuleTitle": "MariaDB must implement cryptographic mechanisms to prevent unauthorized modification of organization-defined information at rest (to include, at a minimum, PII and classified information) on organization-defined information system components.", "Description": "<VulnDiscussion>MariaDB\u2019s handling of data requiring data at rest protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to the MariaDB or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "MariaDB\u2019s handling of data requiring data at rest protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to the MariaDB or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields). \n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the security guide to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of MariaDB, operating system/file system, and additional software as relevant.\n \nOne possible way to encrypt data within MariaDB is to use the file key management plugin. To determine if this is installed, check the following variables as the Database administrator:\n\nMariaDB> SHOW PLUGINS; \n\nConfirm the file_key_management.so is listed.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'file_key%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'aria_en%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_encrypt_tables';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_encrypt_log';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_tablespace%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'encrypt%';\n\nConfirm that these are ON.\n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a manner that provides the required level of protection, this is a finding.", "FixText": "Configure MariaDB, operating system/file system, and additional software as relevant, to provide the required level of cryptographic protection.\n \nOnce the File Key Management Plugin is enabled, use it by creating an encrypted table:\n\nMariaDB> CREATE TABLE t (i int) ENGINE=InnoDB ENCRYPTED=YES;\n\nNow, table t will be encrypted using the encryption key from the key file.", "CCI": "CCI-002475"}, {"VulnID": "V-253740", "RuleID": "SV-253740r841745_rule", "StigID": "MADB-10-008700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000429-DB-000387", "RuleTitle": "MariaDB must implement cryptographic mechanisms preventing the unauthorized disclosure of organization-defined information at rest on organization-defined information system components.", "Description": "<VulnDiscussion>MariaDB\u2019s handling of data requiring data at rest protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to the MariaDB or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).\n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "MariaDB\u2019s handling of data requiring data at rest protections must employ cryptographic mechanisms to prevent unauthorized disclosure and modification of the information at rest. These cryptographic mechanisms may be native to the MariaDB or implemented via additional software or operating system/file system settings, as appropriate to the situation.\n\nSelection of a cryptographic mechanism is based on the need to protect the integrity of organizational information. The strength of the mechanism is commensurate with the security category and/or classification of the information. Organizations have the flexibility to either encrypt all information on storage devices (i.e., full disk encryption) or encrypt specific data structures (e.g., files, records, or fields).\n\nThe decision whether and what to encrypt rests with the data owner and is also influenced by the physical measures taken to secure the equipment and media on which the information resides.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the security guide to determine whether the organization has defined the information at rest that is to be protected from modification, which must include, at a minimum, PII and classified information.\n\nIf no information is identified as requiring such protection, this is not a finding.\n\nReview the configuration of MariaDB, operating system/file system, and additional software as relevant.\n \nOne possible way to encrypt data within MariaDB is to use the file key management plugin. To determine if this is installed check the following variables as the Database administrator:\n\nMariaDB> SHOW PLUGINS; \n\nConfirm the file_key_management.so is listed.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'file_key%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'aria_en%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_encrypt_tables';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_encrypt_log';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'innodb_tablespace%';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'encrypt%';\n\nConfirm that these are ON.\n\nIf any of the information defined as requiring cryptographic protection from modification is not encrypted in a manner that provides the required level of protection, this is a finding.", "FixText": "Configure MariaDB, operating system/file system, and additional software as relevant, to provide the required level of cryptographic protection for information requiring cryptographic protection against disclosure.\n\nSecure the premises, equipment, and media to provide the required level of physical protection.\n \nOne possible way to encrypt data within MariaDB is:\n How to Set Up and Configure MariaDB for Data-at-Rest Encryption\n    Generate random encryption keys using openssl rand command.    \n    $ mkdir -p /etc/mysql/encryption\n    $ for i in {1..5}; do openssl rand -hex 32 >> /etc/mysql/encryption/keyfile;  done;\n    Open and edit the file /etc/mysql/encryption/keyfile and add the key IDs that will be referenced when creating encrypted tables as the encryption key id. See ENCRYPTION_KEY_ID for more details. The format will be as follows: \n\n     <encryption_key_id1>;<hex-encoded_encryption_key1>\n     <encryption_key_id2>;<hex-encoded_encryption_key2>\n\nIn the example keyfile, this looks similar to the following: \n$ cat keyfile\n1;687a90b4423c10417f2483726a5901007571c16331d2ee9534333fef4e323075\n2;e7bf20f1cbde9632587c2996871cff74871890d19b49e273d13def123d781e17\n3;9284c9c80da9a323b3ac2c82427942dfbf1718b57255cc0bc0e2c3d6f15ac3ac\n4;abf80c3a8b10643ef53a43c759227304bcffa263700a94a996810b0f0459a580\n5;bdbc5f67d34a4904c4adc9771420ac2ab2bd9c6af1ec532e960335e831f02933\n\nCreate or generate a random password using the similar command from step 1:\n$ openssl rand -hex 128 > /etc/mysql/encryption/keyfile.key\n\nBefore proceeding to the next step, it is important to take note of the following details about encrypting the key file: \n    The only algorithm that MariaDB currently supports to encrypt the key file is Cipher Block Chaining (CBC) mode of Advanced Encryption Standard (AES).\n    The encryption key size can be 128-bits, 192-bits, or 256-bits.\n    The encryption key is created from the SHA-1 hash of the encryption password.\n    The encryption password has a max length of 256 characters.\n\nTo encrypt the key file using openssl enc command, run the following command: \n$ openssl enc -aes-256-cbc -md sha1 -pass file:/etc/mysql/encryption/keyfile.key -in /etc/mysql/encryption/keyfile    -out /etc/mysql/encryption/keyfile.enc\n\nAdd the following variables in the MySQL configuration file (i.e., /etc/my.cnf on RHEL-based Linux OS or /etc/mysql/my.cnf in Debian/Ubuntu Linux based OS)\n\n[mysqld]\n\u2026\n#################### DATABASE ENCRYPTION ##############################\nplugin_load_add = file_key_management\nfile_key_management_filename = /etc/mysql/encryption/keyfile.enc\nfile_key_management_filekey = FILE:/etc/mysql/encryption/keyfile.key\nfile_key_management_encryption_algorithm = aes_cbc \nencrypt_binlog = 1 \ninnodb_encrypt_tables = ON\ninnodb_encrypt_log = ON\ninnodb_encryption_threads = 4\ninnodb_encryption_rotate_key_age = 0 # Do not rotate key\nRestart MariaDB Server now\n$ systemctl start mariadb \n\nOnce the File Key Management Plugin is enabled, use it by creating an encrypted table:\nCREATE TABLE t (i int) ENGINE=InnoDB ENCRYPTED=YES\n\nTable t will be encrypted using the encryption key from the key file.", "CCI": "CCI-002476"}, {"VulnID": "V-253741", "RuleID": "SV-253741r841748_rule", "StigID": "MADB-10-008900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000441-DB-000378", "RuleTitle": "MariaDB must maintain the confidentiality and integrity of information during preparation for transmission.", "Description": "<VulnDiscussion>Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality, or integrity of the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, MariaDB associated applications and infrastructure must leverage transmission protection mechanisms.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information can be either unintentionally or maliciously disclosed or modified during preparation for transmission, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality, or integrity of the information.\n\nUse of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen transmitting data, MariaDB associated applications and infrastructure must leverage transmission protection mechanisms.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If the data owner does not have a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process, this is not a finding.\n \nFirst, as the database administrator, verify the following settings: \n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_ca';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_cert';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_key';\n \nIf SSL is not enabled, this is a finding.\n\nIf MariaDB does not employ protective measures against unauthorized disclosure and modification during preparation for transmission, this is a finding.", "FixText": "Configure the DBMS and related system components to use NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n \nConfigure MariaDB to use TLS.\n\nDetails for this procedure can be found here:\nhttps://mariadb.com/docs/security/encryption/in-transit/enable-tls-server/", "CCI": "CCI-002420"}, {"VulnID": "V-253742", "RuleID": "SV-253742r841751_rule", "StigID": "MADB-10-009000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000442-DB-000379", "RuleTitle": "MariaDB must maintain the confidentiality and integrity of information during reception.", "Description": "<VulnDiscussion>Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality, or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data nonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, MariaDB-associated applications and infrastructure must leverage protection mechanisms.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information can be either unintentionally or maliciously disclosed or modified during reception, including, for example, during aggregation, at protocol transformation points, and during packing/unpacking. These unauthorized disclosures or modifications compromise the confidentiality, or integrity of the information.\n\nThis requirement applies only to those applications that are either distributed or can allow access to data nonlocally. Use of this requirement will be limited to situations where the data owner has a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process. \n\nWhen receiving data, MariaDB-associated applications and infrastructure must leverage protection mechanisms.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If the data owner does not have a strict requirement for ensuring data integrity and confidentiality is maintained at every step of the data transfer and handling process, this is not a finding.\n\nFirst, as the database administrator, verify the following settings: \n \nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_ca';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_cert';\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'ssl_key';\n \nIf SSL is not enabled, this is a finding.\n\nIf MariaDB, associated applications, and infrastructure do not employ protective measures against unauthorized disclosure and modification during reception, this is a finding.", "FixText": "Configure the DBMS and related system components to use NSA-approved cryptography to protect classified information in accordance with applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n \nConfigure MariaDB to use TLS.\n\nDetails for this procedure can be found here:\nhttps://mariadb.com/docs/security/encryption/in-transit/enable-tls-server/", "CCI": "CCI-002422"}, {"VulnID": "V-253743", "RuleID": "SV-253743r841754_rule", "StigID": "MADB-10-009100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000447-DB-000393", "RuleTitle": "When invalid inputs are received, MariaDB must behave in a predictable and documented manner that reflects organizational and system objectives.", "Description": "<VulnDiscussion>A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "A common vulnerability is unplanned behavior when invalid inputs are received. This requirement guards against adverse or unintended system behavior caused by invalid inputs, where information system responses to the invalid input may be disruptive or cause the system to fail into an unsafe state.\n\nThe behavior will be derived from the organizational and system requirements and includes, but is not limited to, notification of the appropriate personnel, creating an audit record, and rejecting invalid input.\n\nThis calls for inspection of application source code, which will require collaboration with the application developers. It is recognized that in many cases, the database administrator (DBA) is organizationally separate from the application developers, and may have limited, if any, access to source code. Nevertheless, protections of this type are so important to the secure operation of databases that they must not be ignored. At a minimum, the DBA must attempt to obtain assurances from the development organization that this issue has been addressed and must document what has been discovered.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the database administrator, make a small SQL syntax error by running the following:\n \nMariaDB> CREAT TABLEincorrect_syntax(id INT) \nERROR 1064 (42000) at line 1: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near  CREAT TABLEincorrect_syntax(id INT)  at line 1\n  \nNow verify the syntax error was logged (change the log file name and part to suit the circumstances):\n\n$ cat $DATADIR/sql_errors.log\n\n2019-09-05 14:31:22 root[root] @ localhost [] ERROR 1064: You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near  CREAT TABLEincorrect_syntax(id INT)  at line 1 : CREAT TABLEincorrect_syntax(id INT)\n\nReview security guide to determine how input errors from application to MariaDB are to be handled in general and if any special handling is defined for specific circumstances.\n\nIf it does not implement the documented behavior, this is a finding.", "FixText": "All errors and denials are logged to the sql errorlog. If the sql error log does not exist, install the sql error log plugin as follows:\n\nMariaDB> INSTALL SONAME 'sql_errlog';\n\nThe error log should by default be located as sql_errors.log within the data directory (/var/lib/mysql by default).", "CCI": "CCI-002754"}, {"VulnID": "V-253744", "RuleID": "SV-253744r841757_rule", "StigID": "MADB-10-009200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000454-DB-000389", "RuleTitle": "When updates are applied to the MariaDB software, any software components that have been replaced or made unnecessary must be removed.", "Description": "<VulnDiscussion>Previous versions of MariaDB components that are not removed from the information system after updates have been installed may be exploited by adversaries. \n\nMariaDB may remove older versions of software automatically from the information system. In other cases, manual review and removal will be required. In planning installations and upgrades, organizations must include steps (automated, manual, or both) to identify and remove the outdated modules.\n\nA transition period may be necessary when both the old and the new software are required. This should be taken into account in the planning.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Previous versions of MariaDB components that are not removed from the information system after updates have been installed may be exploited by adversaries. \n\nMariaDB may remove older versions of software automatically from the information system. In other cases, manual review and removal will be required. In planning installations and upgrades, organizations must include steps (automated, manual, or both) to identify and remove the outdated modules.\n\nA transition period may be necessary when both the old and the new software are required. This should be taken into account in the planning.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If updating through a repository using yum, apt, etc., all MariaDB packages should be updated/upgraded at the same time. \n\nUse the package manager to verify no outdated packages remain. Example: \n\n$ sudo yum list installed | grep -i mariadb\n\nIf older packages remain, this is a finding.", "FixText": "If after the upgrade outdated packages remain, update them if needed or remove. Example: \n\n$ sudo yum remove package_name", "CCI": "CCI-002617"}, {"VulnID": "V-253745", "RuleID": "SV-253745r841760_rule", "StigID": "MADB-10-009300", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000456-DB-000390", "RuleTitle": "Security-relevant software updates to MariaDB must be installed within the time period directed by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).", "Description": "<VulnDiscussion>Security flaws with software applications, including database management systems, are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously. \n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality, will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application will be configured to check for and install security-relevant software updates within an identified time period from the availability of the update. The specific time period will be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Security flaws with software applications, including database management systems, are discovered daily. Vendors are constantly updating and patching their products to address newly discovered security vulnerabilities. Organizations (including any contractor to the organization) are required to promptly install security-relevant software updates (e.g., patches, service packs, and hot fixes). Flaws discovered during security assessments, continuous monitoring, incident response activities, or information system error handling must also be addressed expeditiously. \n\nOrganization-defined time periods for updating security-relevant software may vary based on a variety of factors including, for example, the security category of the information system or the criticality of the update (i.e., severity of the vulnerability related to the discovered flaw).\n\nThis requirement will apply to software patch management solutions that are used to install patches across the enclave and also to applications themselves that are not part of that patch management solution. For example, many browsers today provide the capability to install their own patch software. Patch criticality, as well as system criticality, will vary. Therefore, the tactical situations regarding the patch management process will also vary. This means that the time period utilized must be a configurable parameter. Time frames for application of security-relevant software updates may be dependent upon the Information Assurance Vulnerability Management (IAVM) process.\n\nThe application will be configured to check for and install security-relevant software updates within an identified time period from the availability of the update. The specific time period will be defined by an authoritative source (e.g., IAVM, CTOs, DTMs, and STIGs).", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If new packages are available for MariaDB, they can be reviewed in the package manager appropriate for the server operating system.\n \nTo list the version of installed MariaDB, run the following Linux commands as the system administrator:\n \nMariaDB> SELECT @@version; \n\nCheck the list of installed packages:\n$ sudo yum list installed | grep -i mariadb\n\nAll versions of MariaDB will be listed on:\nhttps://mariadb.com/downloads/#mariadb_platform-mariadb_server\n \nAll security-relevant software updates for MariaDB will be listed on:\n\nhttps://mariadb.com/kb/en/library/security/\n\nIf MariaDB is not at the latest version, this is a finding. \n\nIf MariaDB is not at the latest version and the evaluated version has CVEs (IAVAs), this is a CAT I finding.", "FixText": "Institute and adhere to policies and procedures to ensure that patches are consistently applied to MariaDB within the time allowed.", "CCI": "CCI-002605"}, {"VulnID": "V-253746", "RuleID": "SV-253746r841763_rule", "StigID": "MADB-10-009400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000492-DB-000332", "RuleTitle": "MariaDB must be able to generate audit records when security objects are accessed.", "Description": "<VulnDiscussion>Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nCREATE\nINSERT\nUPDATE\nDELETE\nEXECUTE\nALTER\nDROP</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nCREATE\nINSERT\nUPDATE\nDELETE\nEXECUTE\nALTER\nDROP", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events includes ALL in corresponding audit filters. If not, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253747", "RuleID": "SV-253747r841766_rule", "StigID": "MADB-10-009500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000492-DB-000333", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to access security objects occur.", "Description": "<VulnDiscussion>Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nCREATE\nINSERT\nUPDATE\nDELETE\nEXECUTE\nALTER\nDROP\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes to the security configuration must be tracked.\n\nThis requirement applies to situations where security data is retrieved or modified via data manipulation operations, as opposed to via specialized security functionality.\n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nCREATE\nINSERT\nUPDATE\nDELETE\nEXECUTE\nALTER\nDROP\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events includes ALL in corresponding audit filters. If not, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253748", "RuleID": "SV-253748r841769_rule", "StigID": "MADB-10-009600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000494-DB-000344", "RuleTitle": "MariaDB must generate audit records when categories of information (e.g., classification levels/security levels) are accessed.", "Description": "<VulnDiscussion>Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events includes ALL in corresponding audit filters. If not, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253749", "RuleID": "SV-253749r841772_rule", "StigID": "MADB-10-009700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000494-DB-000345", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to access categories of information (e.g., classification levels/security levels) occur.", "Description": "<VulnDiscussion>Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If category tracking is not required in the database, this is not applicable.\n \nVerify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events includes ALL in corresponding audit filters. If not, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253750", "RuleID": "SV-253750r841775_rule", "StigID": "MADB-10-009800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000495-DB-000326", "RuleTitle": "MariaDB must generate audit records when privileges/permissions are added.", "Description": "<VulnDiscussion>Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn MariaDB, adding permissions is done via the GRANT command, or, in the negative, the REVOKE command.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn MariaDB, adding permissions is done via the GRANT command, or, in the negative, the REVOKE command.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding.\n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events includes DCL or ALL in corresponding audit filters. If not, this is a finding.\n\nIn one terminal, tail the audit log file. For example: \n$ tail -F /var/lib/mysql/server_audit.log (default location)\n\nOpen a new terminal and connect to the database. \n\nAs the database administrator, create a user without special permissions:\nMariaDB> CREATE USER 'user_name_here'@'localhost' IDENTIFIED BY 'password_here';\n\nAs the database administrator, create a role by running the following SQL: \nMariaDB> CREATE ROLE 'role_name_here';\n\nAs the database administrator, GRANT role to testuser: \nMariaDB> GRANT 'role_name_here' TO 'user_name_here'@'localhost';\n\nAs the database administrator, add privileges to user_role for testdb, and add GRANT role to testuser:\nMariaDB> GRANT SELECT ON db_name_here TO 'user_name_here'@'localhost';\nMariaDB> GRANT SELECT ON db_name_here TO 'role_name_here';\n \nAs the database administrator, modify privileges for testuser and user_role:\nMariaDB> GRANT DELETE ON db_name_here TO 'user_name_here'@'localhost';\nMariaDB> GRANT DELETE ON db_name_here TO 'role_name_here';\n\nIf the audit records are not produced for successful attempts to modify privileges/permissions and roles in the first terminal, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253751", "RuleID": "SV-253751r841778_rule", "StigID": "MADB-10-009900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000495-DB-000327", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to add privileges/permissions occur.", "Description": "<VulnDiscussion>Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn MariaDB, adding permissions is done via the GRANT command, or, in the negative, the REVOKE command.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn MariaDB, adding permissions is done via the GRANT command, or, in the negative, the REVOKE command.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events includes DCL or ALL in corresponding audit filters. If not, this is a finding.\n\nIn one terminal, tail the audit log file. For example: \n$ tail -F /var/lib/mysql/server_audit.log (default location)\n\nOpen a new terminal and connect to the database. \n\nAs the database administrator, create a user without special permissions:\nMariaDB> CREATE USER 'user_name_here'@'localhost' IDENTIFIED BY 'password_here';\n\nAs the database administrator, create a role by running the following SQL: \nMariaDB> CREATE ROLE 'role_name_here';\n\nAs the database administrator, GRANT role to testuser: \nMariaDB> GRANT 'role_name_here' TO 'user_name_here'@'localhost';\n\nAs the database administrator, add privileges to user_role for testdb, and add GRANT role to testuser :\nMariaDB> GRANT SELECT ON db_name_here TO 'user_name_here'@'localhost';\nMariaDB> GRANT SELECT ON db_name_here TO 'role_name_here';\n \nAs a regular user, modify privileges for testuser and user_role:\nMariaDB> GRANT DELETE ON db_name_here TO 'user_name_here'@'localhost';\nMariaDB> GRANT DELETE ON db_name_here TO 'role_name_here';\n\nIf the audit records are not produced for unsuccessful attempts to modify privileges/permissions and roles in the first terminal, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253752", "RuleID": "SV-253752r841781_rule", "StigID": "MADB-10-010000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000495-DB-000328", "RuleTitle": "MariaDB must generate audit records when privileges/permissions are modified.", "Description": "<VulnDiscussion>Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn the MariaDB environment, modifying permissions is done via the GRANT, and REVOKE commands.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn the MariaDB environment, modifying permissions is done via the GRANT, and REVOKE commands.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events includes DCL or ALL in corresponding audit filters. If not, this is a finding.\n\nIn one terminal, tail the audit log file. For example: \n$ tail -F /var/lib/mysql/server_audit.log (default location)\n\nOpen a new terminal and connect to the database. \n\nAs the database administrator, create a user without special permissions:\nMariaDB> CREATE USER 'user_name_here'@'localhost' IDENTIFIED BY 'password_here';\n\nAs the database administrator, create a role by running the following SQL: \nMariaDB> CREATE ROLE 'role_name_here';\n\nAs the database administrator, GRANT role to testuser: \nMariaDB> GRANT 'role_name_here' TO 'user_name_here'@'localhost';\n\nAs the database administrator, add privileges to user_role for testdb, and add GRANT role to testuser:\nMariaDB> GRANT SELECT ON db_name_here TO 'user_name_here'@'localhost';\nMariaDB> GRANT SELECT ON db_name_here TO 'role_name_here';\n \nAs the database administrator, modify privileges for testuser and user_role:\nMariaDB> GRANT DELETE ON db_name_here TO 'user_name_here'@'localhost';\nMariaDB> GRANT DELETE ON db_name_here TO 'role_name_here';\n\nIf the audit records are not produced for successful attempts to modify privileges/permissions and roles in the first terminal, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253753", "RuleID": "SV-253753r841784_rule", "StigID": "MADB-10-010100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000495-DB-000329", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to modify privileges/permissions occur.", "Description": "<VulnDiscussion>Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn the MariaDB environment, modifying permissions is typically done via the GRANT, and REVOKE commands. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn the MariaDB environment, modifying permissions is typically done via the GRANT, and REVOKE commands. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events includes DCL or ALL in corresponding audit filters. If not, this is a finding.\n\nIn one terminal, tail the audit log file. For example: \n$ tail -F /var/lib/mysql/server_audit.log (default location)\n\nOpen a new terminal and connect to the database. \n\nAs the database administrator, create a user without special permissions:\nMariaDB> CREATE USER 'user_name_here'@'localhost' IDENTIFIED BY 'password_here';\n\nAs the database administrator, create a role by running the following SQL: \nMariaDB> CREATE ROLE 'role_name_here';\n\nAs the database administrator, GRANT role to testuser: \nMariaDB> GRANT 'role_name_here' TO 'user_name_here'@'localhost';\n\nAs the database administrator, add privileges to user_role for testdb, and add GRANT role to testuser:\nMariaDB> GRANT SELECT ON db_name_here TO 'user_name_here'@'localhost';\nMariaDB> GRANT SELECT ON db_name_here TO 'role_name_here';\n \nAs a regular user, modify privileges for testuser and user_role:\nMariaDB> GRANT DELETE ON db_name_here TO 'user_name_here'@'localhost';\nMariaDB> GRANT DELETE ON db_name_here TO 'role_name_here';\n\nIf the audit records are not produced for unsuccessful attempts to modify privileges/permissions and roles in the first terminal, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253754", "RuleID": "SV-253754r841787_rule", "StigID": "MADB-10-010200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000496-DB-000334", "RuleTitle": "MariaDB must generate audit records when security objects are modified.", "Description": "<VulnDiscussion>Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events ALL is included in corresponding audit filters. If not, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253755", "RuleID": "SV-253755r841790_rule", "StigID": "MADB-10-010300", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000496-DB-000335", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to modify security objects occur.", "Description": "<VulnDiscussion>Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in the database objects (tables, views, procedures, functions) that record and control permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized changes to the security subsystem could go undetected. The database could be severely compromised or rendered inoperative.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events ALL is included in corresponding audit filters. If not, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253756", "RuleID": "SV-253756r841793_rule", "StigID": "MADB-10-010400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000498-DB-000346", "RuleTitle": "MariaDB must generate audit records when categories of information (e.g., classification levels/security levels) are modified.", "Description": "<VulnDiscussion>Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If category tracking is not required in the database, this is not applicable.\n\nVerify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events ALL is included in corresponding audit filters. If not, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253757", "RuleID": "SV-253757r841796_rule", "StigID": "MADB-10-010500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000498-DB-000347", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to modify categories of information (e.g., classification levels/security levels) occur.", "Description": "<VulnDiscussion>Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If category tracking is not required in the database, this is not applicable.\n\nVerify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events ALL is included in corresponding audit filters. If not, this is a finding.", "FixText": "The MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253758", "RuleID": "SV-253758r841799_rule", "StigID": "MADB-10-010600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000499-DB-000330", "RuleTitle": "MariaDB must generate audit records when privileges/permissions are deleted.", "Description": "<VulnDiscussion>Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn MariaDB, deleting permissions is typically done via the REVOKE command.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized elevation or restriction of privileges could go undetected. Elevated privileges give users access to information and functionality that they should not have; restricted privileges wrongly deny access to authorized users.\n\nIn MariaDB, deleting permissions is typically done via the REVOKE command.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nAs the database administrator, create a user without special permissions:\nMariaDB>  CREATE USER testuser IDENTIFIED BY  password ;\n\nIn one terminal, tail the audit log file. For example: \n$ tail -F /var/lib/mysql/server_audit.log (default location)\n\nAs the database administrator, create a role by running the following SQL: \nMariaDB>  CREATE ROLE user_role\n\nAs the database administrator, GRANT user_role to testuser: \nMariaDB>  GRANT user_role to testuser\n\nAs the database administrator, add 2 privileges to user_role for testdb and then delete one of the privileges:\nMariaDB>  GRANT SELECT,DELETE on testdb to testuser\nMariaDB>  GRANT SELECT on testdb to testuser\n\nAs the database administrator,  revoke grant from testuser:\nMariaDB>  REVOKE user_role to testuser\n\nIf the audit records for REVOKE and the second SELECT are not produced in the first terminal, this is a finding.", "FixText": "No super/administrative users should not have access to modify tables within the mysql database. Verify users do not have access and revoke as necessary. Example: \n\nView user grants:\n\nMariaDB> SHOW GRANTS FOR 'username'@'host';\n\nIf user has INSERT, UPDATE, and/or DELETE on the mysql database or all databases, modify the user privileges as necessary. \n\nThe MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253759", "RuleID": "SV-253759r841802_rule", "StigID": "MADB-10-010700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000499-DB-000331", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to delete privileges/permissions occur.", "Description": "<VulnDiscussion>Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn MariaDB, deleting permissions is typically done via the REVOKE command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Failed attempts to change the permissions, privileges, and roles granted to users and roles must be tracked. Without an audit trail, unauthorized attempts to elevate or restrict privileges could go undetected. \n\nIn MariaDB, deleting permissions is typically done via the REVOKE command. \n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nAs the database administrator, create a user without special permissions:\nMariaDB>  CREATE USER testuser IDENTIFIED BY  password ;\n\nIn one terminal, tail the audit log file. For example: \n$ tail -F /var/lib/mysql/server_audit.log (default location)\n\nAs the database administrator, create a role by running the following SQL: \nMariaDB>  CREATE ROLE user_role\n\nAs the database administrator, GRANT user_role to testuser: \nMariaDB>  GRANT user_role to testuser\n\nAs the database administrator, add two privileges to user_role for testdb and then delete one of the privileges:\nMariaDB>  GRANT SELECT,DELETE on testdb to testuser\n\nAs the testuser,  remove the users delete privilege by granting only SELECT, and revoke grant from test user:\nMariaDB>  GRANT SELECT on testdb to testuser\nMariaDB>  REVOKE user_role to testuser\n\nIf the audit records for REVOKE and the second SELECT are not produced in the first terminal, this is a finding.", "FixText": "No super/administrative users should not have access to modify tables within the mysql database. Verify users do not have access and revoke as necessary. Example: \n\nView user grants:\n\nMariaDB> SHOW GRANTS FOR 'username'@'host';\n\nIf user has INSERT, UPDATE, and/or DELETE on the mysql database or all databases, modify the user privileges as necessary.\n\nThe MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253760", "RuleID": "SV-253760r841805_rule", "StigID": "MADB-10-010800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000501-DB-000336", "RuleTitle": "MariaDB must generate audit records when security objects are deleted.", "Description": "<VulnDiscussion>The removal of security objects from the database/DBMS would seriously degrade a system s information assurance posture. If such an event occurs, it must be logged.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The removal of security objects from the database/DBMS would seriously degrade a system s information assurance posture. If such an event occurs, it must be logged.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nIn one terminal, tail the audit log file. For example: \n$ tail -F /var/lib/mysql/server_audit.log (default location)\n\nAs the database administrator, create a role by running the following SQL: \nMariaDB>  CREATE ROLE user_role\n\nAs the database administrator, delete the user_role: \nMariaDB>  DROP ROLE user_role\n\nIf the audit records for DROP are not produced in the first terminal, this is a finding.", "FixText": "Super/administrative users must not have access to modify tables within the mysql database. Verify users do not have access and revoke as necessary. Example: \n\nView user grants:\n\nMariaDB> SHOW GRANTS FOR 'username'@'host';\n\nIf user has INSERT, UPDATE, and/or DELETE on the mysql database or all databases, modify the user privileges as necessary. \n\nThe MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253761", "RuleID": "SV-253761r841808_rule", "StigID": "MADB-10-010900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000501-DB-000337", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to delete security objects occur.", "Description": "<VulnDiscussion>The removal of security objects from the database/DBMS would seriously degrade a system s information assurance posture. If such an action is attempted, it must be logged.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "The removal of security objects from the database/DBMS would seriously degrade a system s information assurance posture. If such an action is attempted, it must be logged.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nAs the database administrator, create a user without special permissions:\nMariaDB>  CREATE USER testuser IDENTIFIED BY  password ;\n\nIn one terminal, tail the audit log file. For example: \n$ tail -F /var/lib/mysql/server_audit.log (default location)\n\nAs the database administrator, create a role by running the following SQL: \nMariaDB>  CREATE ROLE user_role\n\nAs the database administrator, GRANT user_role to testuser: \nMariaDB>  GRANT user_role to testuser\n\nAs the database administrator, add two privileges to user_role for testdb and then delete one of the privileges:\nMariaDB>  GRANT SELECT,DELETE on testdb to testuser\nMariaDB>  GRANT SELECT on testdb to testuser\n\nAs the database administrator, revoke grant from testuser:\nMariaDB>  REVOKE user_role to testuser\n\nIf the audit records for REVOKE and the second SELECT are not produced in the first terminal, this is a finding.", "FixText": "Super/administrative users must not have access to modify tables within the mysql database. Verify users do not have access and revoke as necessary. Example: \n\nView user grants:\n\nMariaDB> SHOW GRANTS FOR 'username'@'host';\n\nIf user has INSERT, UPDATE, and/or DELETE on the mysql database or all databases, modify the user privileges as necessary. \n\nThe MariaDB Enterprise Audit plugin can be configured to audit these changes. \n\nUpdate necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253762", "RuleID": "SV-253762r841811_rule", "StigID": "MADB-10-011000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000502-DB-000348", "RuleTitle": "MariaDB must generate audit records when categories of information (e.g., classification levels/security levels) are deleted.", "Description": "<VulnDiscussion>Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If category tracking is not required in the database, this is not applicable.\n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events ALL is included in corresponding audit filters. If not, this is a finding.", "FixText": "Update necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253763", "RuleID": "SV-253763r841814_rule", "StigID": "MADB-10-011100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000502-DB-000349", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to delete categories of information (e.g., classification levels/security levels) occur.", "Description": "<VulnDiscussion>Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Changes in categories of information must be tracked. Without an audit trail, unauthorized access to protected data could go undetected.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.\n\nFor detailed information on categorizing information, refer to FIPS Publication 199, Standards for Security Categorization of Federal Information and Information Systems, and FIPS Publication 200, Minimum Security Requirements for Federal Information and Information Systems.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "If category tracking is not required in the database, this is not applicable.\n\nVerify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify query_events ALL is included in corresponding audit filters. If not, this is a finding.", "FixText": "Update necessary audit filters to include query_event ALL. Example: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ],\n            \"query_event\": [\n                \"ALL\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253764", "RuleID": "SV-253764r844267_rule", "StigID": "MADB-10-011200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000503-DB-000350", "RuleTitle": "MariaDB must generate audit records when successful logons or connections occur.", "Description": "<VulnDiscussion>For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to the DBMS.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "For completeness of forensic analysis, it is necessary to track who/what (a user or other principal) logs on to the DBMS.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify connect_events include connect in audit filters. If not, this is a finding. \n\nLog in to and out of the MariaDB database server. Verify the connect is logged in the audit logfile or syslog depending on how it is configured. \n\nIf connect is not logged this is a finding.", "FixText": "Edit the necessary filters to include  connect_events connect. Example:\n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253765", "RuleID": "SV-253765r841820_rule", "StigID": "MADB-10-011300", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000503-DB-000351", "RuleTitle": "MariaDB must generate audit records when unsuccessful logons or connection attempts occur.", "Description": "<VulnDiscussion>For completeness of forensic analysis, it is necessary to track failed attempts to log on to MariaDB. While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "For completeness of forensic analysis, it is necessary to track failed attempts to log on to MariaDB. While positive identification may not be possible in a case of failed authentication, as much information as possible about the incident must be captured.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify connect_events include connect in audit filters. If not, this is a finding. \n\nLog in to and out of the MariaDB database server with both valid and invalid users. Verify the connect and disconnect are logged in the audit logfile or syslog depending on how it is configured. \n\nIf connect/disconnect and invalid logins are not logged, this is a finding.", "FixText": "Edit the necessary filters to include  connect_events connect. Example:\n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253766", "RuleID": "SV-253766r841823_rule", "StigID": "MADB-10-011400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000504-DB-000354", "RuleTitle": "MariaDB must generate audit records for all privileged activities or other system-level access.", "Description": "<VulnDiscussion>Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples in SQL include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of the DBMS and the design of the database and associated applications, audit logging may be achieved by means of DBMS auditing features, database triggers, other mechanisms, or a combination of these.\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nThere may also be Data Manipulation Language (DML) statements that, subject to context, should be regarded as privileged. Possible examples in SQL include:\n\nTRUNCATE TABLE;\nDELETE, or\nDELETE affecting more than n rows, for some n, or\nDELETE without a WHERE clause;\n\nUPDATE or\nUPDATE affecting more than n rows, for some n, or\nUPDATE without a WHERE clause;\n\nany SELECT, INSERT, UPDATE, or DELETE to an application-defined security table executed by other than a security principal.\n\nDepending on the capabilities of the DBMS and the design of the database and associated applications, audit logging may be achieved by means of DBMS auditing features, database triggers, other mechanisms, or a combination of these.\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the security plan to obtain the definition of the database/DBMS functionality considered privileged in the context of the system in question. \n\nIf audit logging covers at least all of the actions defined as privileged, this is not a finding, otherwise, this is a finding.\n\nReview the MariaDB audit settings. \n\nVerify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the MariaDB Enterprise Audit plugin is not active, this is a finding. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nReview the filters to verify TABLE and QUERY are included. If QUERY and TABLE are not included, this is a finding.", "FixText": "Edit the necessary filters to include the desired logging actions. Exact steps vary depending on desired logging. \n\nExample named audit filter assigned to specific user: \n\nMariaDB> INSERT INTO mysql.server_audit_users (host, user, filtername)\n   VALUES (\"%\", \"user1\", \"filter_example\");\n\nMariaDB> SET GLOBAL server_audit_reload_filters=ON;", "CCI": "CCI-000172"}, {"VulnID": "V-253767", "RuleID": "SV-253767r841826_rule", "StigID": "MADB-10-011500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000504-DB-000355", "RuleTitle": "MariaDB must generate audit records when unsuccessful attempts to execute privileged activities or other system-level access occur.", "Description": "<VulnDiscussion>Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without tracking privileged activity, it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nSystem documentation should include a definition of the functionality considered privileged.\n\nA privileged function in this context is any operation that modifies the structure of the database, its built-in logic, or its security settings. This would include all Data Definition Language (DDL) statements and all security-related statements. In an SQL environment, it encompasses, but is not necessarily limited to:\n\nCREATE\nALTER\nDROP\nGRANT\nREVOKE\n\nNote that it is particularly important to audit, and tightly control, any action that weakens the implementation of this requirement itself, since the objective is to have a complete audit trail of all administrative activity.\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify audit filters are correctly configured to log desired actions per user. If not, this is a finding.", "FixText": "Edit the necessary filters to include the desired logging actions. Exact steps vary depending on desired logging. \n\nExample named audit filter assigned to specific user: \n\nMariaDB> INSERT INTO mysql.server_audit_users (host, user, filtername)\n   VALUES (\"%\", \"user1\", \"filter_example\");\n\nMariaDB> SET GLOBAL server_audit_reload_filters=ON;", "CCI": "CCI-000172"}, {"VulnID": "V-253768", "RuleID": "SV-253768r841829_rule", "StigID": "MADB-10-011600", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000505-DB-000352", "RuleTitle": "MariaDB must generate audit records showing starting and ending time for user access to the database(s).", "Description": "<VulnDiscussion>For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) connection to MariaDB lasts. This can be achieved by recording disconnections, in addition to logons/connections, in the audit logs. \n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or network failure. To the greatest extent possible, all disconnections must be logged.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "For completeness of forensic analysis, it is necessary to know how long a user's (or other principal's) connection to MariaDB lasts. This can be achieved by recording disconnections, in addition to logons/connections, in the audit logs. \n\nDisconnection may be initiated by the user or forced by the system (as in a timeout) or result from a system or network failure. To the greatest extent possible, all disconnections must be logged.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Log in to and out of the MariaDB database server. Verify the connect and disconnect are logged in the audit logfile or syslog depending on how it is configured. \n\nIf connect and disconnect are not logged, this is a finding.", "FixText": "Edit the necessary filters to include connect_events connect. Example:\n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\": [\n               \"CONNECT\",\n               \"DISCONNECT\"\n            ]\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253769", "RuleID": "SV-253769r841832_rule", "StigID": "MADB-10-011700", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000506-DB-000353", "RuleTitle": "MariaDB must generate audit records when concurrent logons/connections by the same user from different workstations occur.", "Description": "<VulnDiscussion>For completeness of forensic analysis, it is necessary to track who logs on to MariaDB.\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such connections may be due to improper circumvention of the requirement to use the CAC for authentication; or they may indicate unauthorized account sharing; or they may be because an account has been compromised.\n\n(If the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for other events (logons/connections; voluntary and involuntary disconnections), then it is not mandatory to create additional log entries specifically for this.)</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "For completeness of forensic analysis, it is necessary to track who logs on to MariaDB.\n\nConcurrent connections by the same user from multiple workstations may be valid use of the system; or such connections may be due to improper circumvention of the requirement to use the CAC for authentication; or they may indicate unauthorized account sharing; or they may be because an account has been compromised.\n\n(If the fact of multiple, concurrent logons by a given user can be reliably reconstructed from the log entries for other events (logons/connections; voluntary and involuntary disconnections), then it is not mandatory to create additional log entries specifically for this.)", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify connect_events include connect in audit filters. If not, this is a finding.", "FixText": "Edit the necessary filters to include  connect_events connect. Example:\n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\":\"CONNECT\"\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253770", "RuleID": "SV-253770r841835_rule", "StigID": "MADB-10-011800", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000507-DB-000356", "RuleTitle": "MariaDB must be able to generate audit records when successful accesses to objects occur.", "Description": "<VulnDiscussion>Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident, or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\n\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nDefault Audit Filter is applied to all users by default. \n\nNamed Audit Filters are assigned to specific users. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nCheck what Named Audit Filters are assigned to what users: \n\nMariaDB> SELECT sau.host, sau.user, saf.filtername,\n   JSON_DETAILED(saf.rule)\nFROM mysql.server_audit_filters saf\nJOIN mysql.server_audit_users sau\n   ON saf.filtername = sau.filtername\nWHERE saf.filtername != 'default'\\G\n\nIf the MariaDB Enterprise Audit plugin is not active and/or necessary auditing is not in place, this is a finding.", "FixText": "If the MariaDB Enterprise Audit plugin is not active, enable it in one of the two following ways. \n\n1. Config file (requires restart): \n\n[mariadb]\nserver_audit_logging = ON\n\n2. SQL (does not require restart): \n\nMariaDB> SET GLOBAL server_audit_logging=ON;\n\nOnce the MariaDB Enterprise Audit plugin is loaded, verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the necessary auditing is not in place for all or specific users, modify the filters. \n\nTo modify the default filter, delete, and recreate: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"logging\":\"ON\",\n            \"connect_event\":\"ALL\",\n            \"query_event\":\"ALL\",\n            \"table_event\":\"ALL\"\n         }'\n      ));\n\nSpecific objects can be added to filters with inclusion or exclusion. \n\nignore_databases: Do not log actions on these databases. \nignore_tables: Do not log actions on these tables. \ndatabases: Log actions on these databases.\ntables: Log actions on these tables.\n\nExample: \n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES (\n       'reporting',\n       JSON_COMPACT(\n          '{\n              \"tables\": [\n                  \"production.*\",\n                  \"reporting.*\",\n                  {\n                     \"table_event\": [\n                         \"WRITE\",\n                         \"CREATE\",\n                         \"DROP\",\n                         \"RENAME\",\n                         \"ALTER\"\n                     ],\n                     \"query_event\": [\n                         \"DML\",\n                         \"DDL\",\n                         {\n                             \"ignore_tables\": [\n                                 \"production.customer_profiles\",\n                                 \"production.customer_addresses\"\n                             ]\n                         }\n                     ]\n                  }\n              ]\n          }'\n       )\n    );", "CCI": "CCI-000172"}, {"VulnID": "V-253771", "RuleID": "SV-253771r841838_rule", "StigID": "MADB-10-011900", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000507-DB-000357", "RuleTitle": "MariaDB must generate audit records when unsuccessful accesses to objects occur.", "Description": "<VulnDiscussion>Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Without tracking all or selected types of access to all or selected objects (tables, views, procedures, functions, etc.), it would be difficult to establish, correlate, and investigate the events relating to an incident or identify those responsible for one. \n\nIn an SQL environment, types of access include, but are not necessarily limited to:\nSELECT\nINSERT\nUPDATE\nDELETE\nEXECUTE\n\nTo aid in diagnosis, it is necessary to keep track of failed attempts in addition to the successful ones.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nDefault Audit Filter is applied to all users by default. \n\nNamed Audit Filters are assigned to specific users. \n\nCheck what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nCheck what Named Audit Filters are assigned to what users: \n\nMariaDB> SELECT sau.host, sau.user, saf.filtername,\n   JSON_DETAILED(saf.rule)\nFROM mysql.server_audit_filters saf\nJOIN mysql.server_audit_users sau\n   ON saf.filtername = sau.filtername\nWHERE saf.filtername != 'default'\\G\n\nIf the MariaDB Enterprise Audit plugin is not active and/or necessary auditing is not in place, this is a finding.", "FixText": "If the MariaDB Enterprise Audit plugin is not active, enable it in one of the two following ways. \n\n1. Config file (requires restart): \n\n[mariadb]\nserver_audit_logging = ON\n\n2. SQL (does not require restart): \n\nMariaDB> SET GLOBAL server_audit_logging=ON;\n\nOnce the MariaDB Enterprise Audit plugin is loaded, verify the MariaDB Enterprise Audit plugin is loaded and actively logging:\n\nMariaDB> SHOW GLOBAL STATUS LIKE 'Server_audit_active';\n\nIf the necessary auditing is not in place for all or specific users, modify the filters. \n\nTo modify the default filter, delete and recreate: \n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"logging\":\"ON\",\n            \"connect_event\":\"ALL\",\n            \"query_event\":\"ALL\",\n            \"table_event\":\"ALL\"\n         }'\n      ));\n\nSpecific objects can be added to filters with inclusion or exclusion. \n\nignore_databases: Do not log actions on these databases. \nignore_tables: Do not log actions on these tables. \ndatabases: Log actions on these databases.\ntables: Log actions on these tables.\n\nExample: \n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES (\n       'reporting',\n       JSON_COMPACT(\n          '{\n              \"tables\": [\n                  \"production.*\",\n                  \"reporting.*\",\n                  {\n                     \"table_event\": [\n                         \"WRITE\",\n                         \"CREATE\",\n                         \"DROP\",\n                         \"RENAME\",\n                         \"ALTER\"\n                     ],\n                     \"query_event\": [\n                         \"DML\",\n                         \"DDL\",\n                         {\n                             \"ignore_tables\": [\n                                 \"production.customer_profiles\",\n                                 \"production.customer_addresses\"\n                             ]\n                         }\n                     ]\n                  }\n              ]\n          }'\n       )\n    );", "CCI": "CCI-000172"}, {"VulnID": "V-253772", "RuleID": "SV-253772r841841_rule", "StigID": "MADB-10-012000", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000508-DB-000358", "RuleTitle": "MariaDB must generate audit records for all direct access to the database(s).", "Description": "<VulnDiscussion>In this context, direct access is any query, command, or call to MariaDB that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and nonstandard sources.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "In this context, direct access is any query, command, or call to MariaDB that comes from any source other than the application(s) that it supports. Examples would be the command line or a database management utility program. The intent is to capture all activity from administrative and nonstandard sources.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check what filters are in place by running the following as an administrative user: \n\nMariaDB> SELECT * FROM mysql.server_audit_filters;\n\nVerify connect_events include connect in audit filters. If not, this is a finding.", "FixText": "Edit the necessary filters to include  connect_events connect. Example:\n\nMariaDB> DELETE FROM mysql.server_audit_filters WHERE filtername = 'default';\n\nMariaDB> INSERT INTO mysql.server_audit_filters (filtername, rule)\n   VALUES ('default',\n      JSON_COMPACT(\n         '{\n            \"connect_event\":\"CONNECT\"\n         }'\n      ));", "CCI": "CCI-000172"}, {"VulnID": "V-253773", "RuleID": "SV-253773r841844_rule", "StigID": "MADB-10-012100", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000514-DB-000381", "RuleTitle": "MariaDB must implement NIST FIPS 140-2 validated cryptographic modules to provision digital signatures.", "Description": "<VulnDiscussion>Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the system administrator, run the following at the Linux commands:\n \n# openssl version\nOpenSSL 1.0.2k-fips  26 Jan 2017\n\nIf fips is not included in the openssl version, this is a finding. \n\n# sysctl crypto.fips_enabled\ncrypto.fips_enabled = 1\n \nIf crypto.fips_enabled = 0, this is a finding. \n \nMariaDB> SHOW GLOBAL VARIABLES LIKE \u2018%have_openssl%';\n\nIf the value of have_openssl is not YES, this is a finding.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE \u2018%version_ssl_library%';\n\nIf the value of version_ssl_library does not contain fips, this is a finding.\n\nExamine the application's code to ensure is does not make calls using libmysqlclient.  \nIf code uses libmysqlclient\u00a0 this is a finding.", "FixText": "If crypto.fips_enabled = 0, configure operating system per operating system documentation: \nRedHat: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-federal_standards_and_regulations\nUbuntu: https://security-certs.docs.ubuntu.com/en/fips", "CCI": "CCI-002450"}, {"VulnID": "V-253774", "RuleID": "SV-253774r841847_rule", "StigID": "MADB-10-012200", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000514-DB-000382", "RuleTitle": "MariaDB must implement NIST FIPS 140-2 validated cryptographic modules to generate and validate cryptographic hashes.", "Description": "<VulnDiscussion>Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the system administrator, run the following at the Linux commands:\n \n# openssl version\nOpenSSL 1.0.2k-fips  26 Jan 2017\n\nIf fips is not included in the openssl version, this is a finding. \n\n# sysctl crypto.fips_enabled\ncrypto.fips_enabled = 1\n \nIf crypto.fips_enabled = 0, this is a finding. \n \nMariaDB> SHOW GLOBAL VARIABLES LIKE \u2018%have_openssl%';\n\nIf the value of have_openssl is not YES, this is a finding.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE \u2018%version_ssl_library%';\n\nIf the value of version_ssl_library does not contain fips this is a finding.\n\nExamine the application's code to ensure is does not make calls using libmysqlclient.  \n\nIf code uses libmysqlclient, this is a finding.", "FixText": "If crypto.fips_enabled = 0, configure operating system per operating system documentation: \nRedHat: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-federal_standards_and_regulations\nUbuntu: https://security-certs.docs.ubuntu.com/en/fips", "CCI": "CCI-002450"}, {"VulnID": "V-253775", "RuleID": "SV-253775r841850_rule", "StigID": "MADB-10-012300", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000514-DB-000383", "RuleTitle": "MariaDB must implement NIST FIPS 140-2 validated cryptographic modules to protect unclassified information requiring confidentiality and cryptographic protection, in accordance with the data owners requirements.", "Description": "<VulnDiscussion>Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Use of weak or untested encryption algorithms undermines the purposes of utilizing encryption to protect data. The application must implement cryptographic modules adhering to the higher standards approved by the federal government since this provides assurance they have been tested and validated.\n\nIt is the responsibility of the data owner to assess the cryptography requirements in light of applicable federal laws, Executive Orders, directives, policies, regulations, and standards.\n\nFor detailed information, refer to NIST FIPS Publication 140-2, Security Requirements For Cryptographic Modules. Note that the product's cryptographic modules must be validated and certified by NIST as FIPS-compliant.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "As the system administrator, run the following at the Linux commands:\n \n# openssl version\nOpenSSL 1.0.2k-fips  26 Jan 2017\n\nIf fips is not included in the openssl version, this is a finding.\n\n# sysctl crypto.fips_enabled\ncrypto.fips_enabled = 1\n \nIf crypto.fips_enabled = 0, this is a finding. \n \nMariaDB> SHOW GLOBAL VARIABLES LIKE \u2018%have_openssl%';\n\nIf the value of have_openssl is not YES, this is a finding.\n\nMariaDB> SHOW GLOBAL VARIABLES LIKE \u2018%version_ssl_library%';\n\nIf the value of version_ssl_library does not contain fips, this is a finding.\n\nExamine the application's code to ensure is does not make calls using libmysqlclient.  \n\nIf code uses libmysqlclient, this is a finding.", "FixText": "If crypto.fips_enabled = 0, configure operating system per operating system documentation: \nRedHat: https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/chap-federal_standards_and_regulations\nUbuntu: https://security-certs.docs.ubuntu.com/en/fips", "CCI": "CCI-002450"}, {"VulnID": "V-253776", "RuleID": "SV-253776r841853_rule", "StigID": "MADB-10-012400", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000515-DB-000318", "RuleTitle": "MariaDB must off-load audit data to a separate log management facility; this must be continuous and in near real time for systems with a network connection to the storage facility and weekly or more often for stand-alone systems.", "Description": "<VulnDiscussion>Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOff-loading is a common process in information systems with limited audit storage capacity. \n\nMariaDB writes audit records to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with off-loading the records to the centralized system.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Information stored in one location is vulnerable to accidental or incidental deletion or alteration.\n\nOff-loading is a common process in information systems with limited audit storage capacity. \n\nMariaDB writes audit records to files in the file system, to other kinds of local repository, or directly to a centralized log management system. Whatever the method used, it must be compatible with off-loading the records to the centralized system.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Check if the variable server_audit_output_type is set to syslog, and verify the operating system is using a centralized syslog utility such as rsyslogd. \n\nMariaDB> SHOW GLOBAL VARIABLES LIKE 'server_audit_output_type'; \n\nIf not, this is a finding.", "FixText": "To set up the audit logs to write to sylog:\n\nEdit the mariadb-enterprise.cnf file. Add the following under the [mariadb] section:  \n\nserver_audit_output_type = 'syslog' \n\nAfter the .cnf file is updated and saved, the mariadb database service must be restarted.", "CCI": "CCI-001851"}, {"VulnID": "V-253777", "RuleID": "SV-253777r841856_rule", "StigID": "MADB-10-012500", "Severity": "medium", "Cat": "CAT II", "Classification": "", "GroupTitle": "SRG-APP-000516-DB-000363", "RuleTitle": "MariaDB must be configured in accordance with the security configuration settings based on DoD security configuration and implementation guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.", "Description": "<VulnDiscussion>Configuring the DBMS to implement organization-wide security implementation guides and security checklists ensures compliance with federal standards and establishes a common security baseline across DoD that reflects the most restrictive security posture consistent with operational requirements. \n\nIn addition to this STIG, sources of guidance on security and information assurance include NSA configuration guides, CTOs, DTMs, and IAVMs. The DBMS must be configured in compliance with guidance from all such relevant sources.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Configuring the DBMS to implement organization-wide security implementation guides and security checklists ensures compliance with federal standards and establishes a common security baseline across DoD that reflects the most restrictive security posture consistent with operational requirements. \n\nIn addition to this STIG, sources of guidance on security and information assurance include NSA configuration guides, CTOs, DTMs, and IAVMs. The DBMS must be configured in compliance with guidance from all such relevant sources.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the MariaDB documentation and configuration to determine if MariaDB is configured in accordance with DoD security configuration and implementation guidance, including STIGs, NSA configuration guides, CTOs, DTMs, and IAVMs.\n\nIf MariaDB is not configured in accordance with security configuration settings, this is a finding.", "FixText": "Configure MariaDB in accordance with DoD security configuration and implementation guidance, including STIGs, NSA configuration guides, CTOs, and DTMs and IAVMs.\n\nIf MariaDB is not configured in accordance with security configuration settings, this is a finding.", "CCI": "CCI-000366"}, {"VulnID": "V-253778", "RuleID": "SV-253778r841859_rule", "StigID": "MADB-10-012600", "Severity": "high", "Cat": "CAT I", "Classification": "", "GroupTitle": "SRG-APP-000456-DB-000400", "RuleTitle": "MariaDB products must be a version supported by the vendor.", "Description": "<VulnDiscussion>Unsupported commercial and database systems should not be used because fixes to newly identified bugs will not be implemented by the vendor. The lack of support can result in potential vulnerabilities.\n\nSystems at unsupported servicing levels or releases will not receive security updates for new vulnerabilities, which leaves them subject to exploitation.\n\nWhen maintenance updates and patches are no longer available, the database software is no longer considered supported and should be upgraded or decommissioned.</VulnDiscussion><FalsePositives></FalsePositives><FalseNegatives></FalseNegatives><Documentable>false</Documentable><Mitigations></Mitigations><SeverityOverrideGuidance></SeverityOverrideGuidance><PotentialImpacts></PotentialImpacts><ThirdPartyTools></ThirdPartyTools><MitigationControl></MitigationControl><Responsibility></Responsibility><IAControls></IAControls>", "VulnDiscussion": "Unsupported commercial and database systems should not be used because fixes to newly identified bugs will not be implemented by the vendor. The lack of support can result in potential vulnerabilities.\n\nSystems at unsupported servicing levels or releases will not receive security updates for new vulnerabilities, which leaves them subject to exploitation.\n\nWhen maintenance updates and patches are no longer available, the database software is no longer considered supported and should be upgraded or decommissioned.", "FalsePositives": "", "FalseNegatives": "", "Documentable": "false", "Mitigations": "", "SeverityOverrideGuidance": "", "PotentialImpacts": "", "ThirdPartyTools": "", "MitigationControl": "", "Responsibility": "", "IAControls": "", "CheckText": "Review the version and release information.\n\nVerify the MariaDB Enterprise Server version via one of the following methods: \n\nMariaDB> SELECT VERSION();\n\n# mariadb --version\n\nVerify the version is supported per the MariaDB support policy: \nhttps://mariadb.com/engineering-policies/ \n\nIf the installed version of MariaDB is not supported by the vendor, this is a finding.", "FixText": "Remove or decommission all unsupported software products.\n\nUpgrade MariaDB Enterprise to a supported version of the product.", "CCI": "CCI-002605"}]}